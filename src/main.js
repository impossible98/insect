(function (f) {
    if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f();
    }
    else if (typeof define === "function" && define.amd) {
        define([], f);
    }
    else {
        let g;
        if (typeof window !== "undefined") {
            g = window;
        }
        else if (typeof global !== "undefined") {
            g = global;
        }
        else if (typeof self !== "undefined") {
            g = self;
        }
        else {
            g = this;
        }
        g.Insect = f();
    }
})(() => {
    let define;
    let module;
    let exports;
    return (() => {
        function r(e, n, t) {
            function o(i, f) {
                if (!n[i]) {
                    if (!e[i]) {
                        const c = "function" == typeof require && require;
                        if (!f && c)
                            return c(i, !0);
                        if (u)
                            return u(i, !0);
                        const a = new Error(`Cannot find module '${i}'`);
                        throw (a.code = "MODULE_NOT_FOUND", a);
                    }
                    const p = n[i] = { exports: {} };
                    e[i][0].call(p.exports, r => { const n = e[i][1][r]; return o(n || r); }, p, p.exports, r, e, n, t);
                } return n[i].exports;
            } for (var u = "function" == typeof require && require, i = 0; i < t.length; i++)
                o(t[i]); return o;
        } return r;
    })()({
        1: [function (require, module, exports) {
            ;
            (globalScope => {
                const EXP_LIMIT = 9e15;
                const MAX_DIGITS = 1e9;
                const NUMERALS = '0123456789abcdef';
                let LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058';
                let PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789';

                let Decimal = {
                    precision: 20,
                    rounding: 4,
                    modulo: 1,
                    toExpNeg: -7,
                    toExpPos: 21,
                    minE: -EXP_LIMIT,
                    maxE: EXP_LIMIT,
                    crypto: false
                };

                let inexact;
                let noConflict;
                let quadrant;
                let external = true;
                const decimalError = '[DecimalError] ';
                const invalidArgument = `${decimalError}Invalid argument: `;
                const precisionLimitExceeded = `${decimalError}Precision limit exceeded`;
                const cryptoUnavailable = `${decimalError}crypto unavailable`;
                const mathfloor = Math.floor;
                const mathpow = Math.pow;
                const isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i;
                const isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i;
                const isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i;
                const isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
                const BASE = 1e7;
                const LOG_BASE = 7;
                const MAX_SAFE_INTEGER = 9007199254740991;
                const LN10_PRECISION = LN10.length - 1;
                const PI_PRECISION = PI.length - 1;
                const P = {};

                P.absoluteValue = P.abs = () => {
                    const x = new this.constructor(this);
                    if (x.s < 0)
                        x.s = 1;
                    return finalise(x);
                };

                P.ceil = function () {
                    return finalise(new this.constructor(this), this.e + 1, 2);
                };

                P.comparedTo = P.cmp = function (y) {
                    let i;
                    let j;
                    let xdL;
                    let ydL;
                    const x = this;
                    const xd = x.d;
                    const yd = (y = new x.constructor(y)).d;
                    const xs = x.s;
                    const ys = y.s;
                    if (!xd || !yd) {
                        return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
                    }
                    if (!xd[0] || !yd[0])
                        return xd[0] ? xs : yd[0] ? -ys : 0;
                    if (xs !== ys)
                        return xs;
                    if (x.e !== y.e)
                        return x.e > y.e ^ xs < 0 ? 1 : -1;
                    xdL = xd.length;
                    ydL = yd.length;
                    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
                        if (xd[i] !== yd[i])
                            return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
                    }
                    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
                };

                P.cosine = P.cos = function () {
                    let pr;
                    let rm;
                    let x = this;
                    const Ctor = x.constructor;
                    if (!x.d)
                        return new Ctor(NaN);
                    if (!x.d[0])
                        return new Ctor(1);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
                    Ctor.rounding = 1;
                    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
                };

                P.cubeRoot = P.cbrt = () => {
                    let e;
                    let m;
                    let n;
                    let r;
                    let rep;
                    let s;
                    let sd;
                    let t;
                    let t3;
                    let t3plusx;
                    const x = this;
                    const Ctor = x.constructor;
                    if (!x.isFinite() || x.isZero())
                        return new Ctor(x);
                    external = false;
                    s = x.s * (x.s * x ** (1 / 3));
                    if (!s || Math.abs(s) == 1 / 0) {
                        n = digitsToString(x.d);
                        e = x.e;
                        if (s = (e - n.length + 1) % 3)
                            n += (s == 1 || s == -2 ? '0' : '00');
                        s = n ** (1 / 3);
                        e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));
                        if (s == 1 / 0) {
                            n = `5e${e}`;
                        }
                        else {
                            n = s.toExponential();
                            n = n.slice(0, n.indexOf('e') + 1) + e;
                        }
                        r = new Ctor(n);
                        r.s = x.s;
                    }
                    else {
                        r = new Ctor(s.toString());
                    }
                    sd = (e = Ctor.precision) + 3;
                    for (; ;) {
                        t = r;
                        t3 = t.times(t).times(t);
                        t3plusx = t3.plus(x);
                        r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);
                        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
                            n = n.slice(sd - 3, sd + 1);
                            if (n == '9999' || !rep && n == '4999') {
                                if (!rep) {
                                    finalise(t, e + 1, 0);
                                    if (t.times(t).times(t).eq(x)) {
                                        r = t;
                                        break;
                                    }
                                }
                                sd += 4;
                                rep = 1;
                            }
                            else {
                                if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
                                    finalise(r, e + 1, 1);
                                    m = !r.times(r).times(r).eq(x);
                                }
                                break;
                            }
                        }
                    }
                    external = true;
                    return finalise(r, e, Ctor.rounding, m);
                };

                P.decimalPlaces = P.dp = () => {
                    let w;
                    const d = this.d;
                    let n = NaN;
                    if (d) {
                        w = d.length - 1;
                        n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;
                        w = d[w];
                        if (w)
                            for (; w % 10 == 0; w /= 10)
                                n--;
                        if (n < 0)
                            n = 0;
                    }
                    return n;
                };
                P.dividedBy = P.div = function (y) {
                    return divide(this, new this.constructor(y));
                };
                P.dividedToIntegerBy = P.divToInt = function (y) {
                    const x = this;
                    const Ctor = x.constructor;
                    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
                };
                P.equals = P.eq = function (y) {
                    return this.cmp(y) === 0;
                };
                P.floor = function () {
                    return finalise(new this.constructor(this), this.e + 1, 3);
                };
                P.greaterThan = P.gt = y => {
                    return this.cmp(y) > 0;
                };
                P.greaterThanOrEqualTo = P.gte = function (y) {
                    const k = this.cmp(y);
                    return k == 1 || k === 0;
                };
                P.hyperbolicCosine = P.cosh = function () {
                    let k;
                    let n;
                    let pr;
                    let rm;
                    let len;
                    let x = this;
                    const Ctor = x.constructor;
                    const one = new Ctor(1);
                    if (!x.isFinite())
                        return new Ctor(x.s ? 1 / 0 : NaN);
                    if (x.isZero())
                        return one;
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
                    Ctor.rounding = 1;
                    len = x.d.length;
                    if (len < 32) {
                        k = Math.ceil(len / 3);
                        n = (4 ** -k).toString();
                    }
                    else {
                        k = 16;
                        n = '2.3283064365386962890625e-10';
                    }
                    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);
                    let cosh2_x;
                    let i = k;
                    const d8 = new Ctor(8);
                    for (; i--;) {
                        cosh2_x = x.times(x);
                        x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
                    }
                    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
                };
                P.hyperbolicSine = P.sinh = function () {
                    let k;
                    let pr;
                    let rm;
                    let len;
                    let x = this;
                    const Ctor = x.constructor;
                    if (!x.isFinite() || x.isZero())
                        return new Ctor(x);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
                    Ctor.rounding = 1;
                    len = x.d.length;
                    if (len < 3) {
                        x = taylorSeries(Ctor, 2, x, x, true);
                    }
                    else {
                        k = 1.4 * Math.sqrt(len);
                        k = k > 16 ? 16 : k | 0;
                        x = x.times(5 ** -k);
                        x = taylorSeries(Ctor, 2, x, x, true);
                        let sinh2_x;
                        const d5 = new Ctor(5);
                        const d16 = new Ctor(16);
                        const d20 = new Ctor(20);
                        for (; k--;) {
                            sinh2_x = x.times(x);
                            x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
                        }
                    }
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return finalise(x, pr, rm, true);
                };
                P.hyperbolicTangent = P.tanh = function () {
                    let pr;
                    let rm;
                    const x = this;
                    const Ctor = x.constructor;
                    if (!x.isFinite())
                        return new Ctor(x.s);
                    if (x.isZero())
                        return new Ctor(x);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + 7;
                    Ctor.rounding = 1;
                    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
                };
                P.inverseCosine = P.acos = function () {
                    let halfPi;
                    let x = this;
                    const Ctor = x.constructor;
                    const k = x.abs().cmp(1);
                    const pr = Ctor.precision;
                    const rm = Ctor.rounding;
                    if (k !== -1) {
                        return k === 0
                            ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
                            : new Ctor(NaN);
                    }
                    if (x.isZero())
                        return getPi(Ctor, pr + 4, rm).times(0.5);
                    Ctor.precision = pr + 6;
                    Ctor.rounding = 1;
                    x = x.asin();
                    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return halfPi.minus(x);
                };
                P.inverseHyperbolicCosine = P.acosh = function () {
                    let pr;
                    let rm;
                    let x = this;
                    const Ctor = x.constructor;
                    if (x.lte(1))
                        return new Ctor(x.eq(1) ? 0 : NaN);
                    if (!x.isFinite())
                        return new Ctor(x);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
                    Ctor.rounding = 1;
                    external = false;
                    x = x.times(x).minus(1).sqrt().plus(x);
                    external = true;
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return x.ln();
                };
                P.inverseHyperbolicSine = P.asinh = function () {
                    let pr;
                    let rm;
                    let x = this;
                    const Ctor = x.constructor;
                    if (!x.isFinite() || x.isZero())
                        return new Ctor(x);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
                    Ctor.rounding = 1;
                    external = false;
                    x = x.times(x).plus(1).sqrt().plus(x);
                    external = true;
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return x.ln();
                };
                P.inverseHyperbolicTangent = P.atanh = function () {
                    let pr;
                    let rm;
                    let wpr;
                    let xsd;
                    let x = this;
                    const Ctor = x.constructor;
                    if (!x.isFinite())
                        return new Ctor(NaN);
                    if (x.e >= 0)
                        return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    xsd = x.sd();
                    if (Math.max(xsd, pr) < 2 * -x.e - 1)
                        return finalise(new Ctor(x), pr, rm, true);
                    Ctor.precision = wpr = xsd - x.e;
                    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);
                    Ctor.precision = pr + 4;
                    Ctor.rounding = 1;
                    x = x.ln();
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return x.times(0.5);
                };
                P.inverseSine = P.asin = function () {
                    let halfPi;
                    let k;
                    let pr;
                    let rm;
                    let x = this;
                    const Ctor = x.constructor;
                    if (x.isZero())
                        return new Ctor(x);
                    k = x.abs().cmp(1);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    if (k !== -1) {
                        if (k === 0) {
                            halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
                            halfPi.s = x.s;
                            return halfPi;
                        }
                        return new Ctor(NaN);
                    }
                    Ctor.precision = pr + 6;
                    Ctor.rounding = 1;
                    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return x.times(2);
                };
                P.inverseTangent = P.atan = function () {
                    let i;
                    let j;
                    let k;
                    let n;
                    let px;
                    let t;
                    let r;
                    let wpr;
                    let x2;
                    let x = this;
                    const Ctor = x.constructor;
                    const pr = Ctor.precision;
                    const rm = Ctor.rounding;
                    if (!x.isFinite()) {
                        if (!x.s)
                            return new Ctor(NaN);
                        if (pr + 4 <= PI_PRECISION) {
                            r = getPi(Ctor, pr + 4, rm).times(0.5);
                            r.s = x.s;
                            return r;
                        }
                    }
                    else if (x.isZero()) {
                        return new Ctor(x);
                    }
                    else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
                        r = getPi(Ctor, pr + 4, rm).times(0.25);
                        r.s = x.s;
                        return r;
                    }
                    Ctor.precision = wpr = pr + 10;
                    Ctor.rounding = 1;
                    k = Math.min(28, wpr / LOG_BASE + 2 | 0);
                    for (i = k; i; --i)
                        x = x.div(x.times(x).plus(1).sqrt().plus(1));
                    external = false;
                    j = Math.ceil(wpr / LOG_BASE);
                    n = 1;
                    x2 = x.times(x);
                    r = new Ctor(x);
                    px = x;
                    for (; i !== -1;) {
                        px = px.times(x2);
                        t = r.minus(px.div(n += 2));
                        px = px.times(x2);
                        r = t.plus(px.div(n += 2));
                        if (r.d[j] !== void 0)
                            for (i = j; r.d[i] === t.d[i] && i--;)
                                ;
                    }
                    if (k)
                        r = r.times(2 << (k - 1));
                    external = true;
                    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
                };
                P.isFinite = function () {
                    return !!this.d;
                };
                P.isInteger = P.isInt = function () {
                    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
                };
                P.isNaN = function () {
                    return !this.s;
                };
                P.isNegative = P.isNeg = function () {
                    return this.s < 0;
                };
                P.isPositive = P.isPos = function () {
                    return this.s > 0;
                };
                P.isZero = function () {
                    return !!this.d && this.d[0] === 0;
                };
                P.lessThan = P.lt = function (y) {
                    return this.cmp(y) < 0;
                };
                P.lessThanOrEqualTo = P.lte = function (y) {
                    return this.cmp(y) < 1;
                };
                P.logarithm = P.log = function (base) {
                    let isBase10;
                    let d;
                    let denominator;
                    let k;
                    let inf;
                    let num;
                    let sd;
                    let r;
                    const arg = this;
                    const Ctor = arg.constructor;
                    const pr = Ctor.precision;
                    const rm = Ctor.rounding;
                    const guard = 5;
                    if (base == null) {
                        base = new Ctor(10);
                        isBase10 = true;
                    }
                    else {
                        base = new Ctor(base);
                        d = base.d;
                        if (base.s < 0 || !d || !d[0] || base.eq(1))
                            return new Ctor(NaN);
                        isBase10 = base.eq(10);
                    }
                    d = arg.d;
                    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
                        return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
                    }
                    if (isBase10) {
                        if (d.length > 1) {
                            inf = true;
                        }
                        else {
                            for (k = d[0]; k % 10 === 0;)
                                k /= 10;
                            inf = k !== 1;
                        }
                    }
                    external = false;
                    sd = pr + guard;
                    num = naturalLogarithm(arg, sd);
                    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
                    r = divide(num, denominator, sd, 1);
                    if (checkRoundingDigits(r.d, k = pr, rm)) {
                        do {
                            sd += 10;
                            num = naturalLogarithm(arg, sd);
                            denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
                            r = divide(num, denominator, sd, 1);
                            if (!inf) {
                                if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
                                    r = finalise(r, pr + 1, 0);
                                }
                                break;
                            }
                        } while (checkRoundingDigits(r.d, k += 10, rm));
                    }
                    external = true;
                    return finalise(r, pr, rm);
                };
                P.minus = P.sub = function (y) {
                    let d;
                    let e;
                    let i;
                    let j;
                    let k;
                    let len;
                    let pr;
                    let rm;
                    let xd;
                    let xe;
                    let xLTy;
                    let yd;
                    const x = this;
                    const Ctor = x.constructor;
                    y = new Ctor(y);
                    if (!x.d || !y.d) {
                        if (!x.s || !y.s)
                            y = new Ctor(NaN);
                        else if (x.d)
                            y.s = -y.s;
                        else
                            y = new Ctor(y.d || x.s !== y.s ? x : NaN);
                        return y;
                    }
                    if (x.s != y.s) {
                        y.s = -y.s;
                        return x.plus(y);
                    }
                    xd = x.d;
                    yd = y.d;
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    if (!xd[0] || !yd[0]) {
                        if (yd[0])
                            y.s = -y.s;
                        else if (xd[0])
                            y = new Ctor(x);
                        else
                            return new Ctor(rm === 3 ? -0 : 0);
                        return external ? finalise(y, pr, rm) : y;
                    }
                    e = mathfloor(y.e / LOG_BASE);
                    xe = mathfloor(x.e / LOG_BASE);
                    xd = xd.slice();
                    k = xe - e;
                    if (k) {
                        xLTy = k < 0;
                        if (xLTy) {
                            d = xd;
                            k = -k;
                            len = yd.length;
                        }
                        else {
                            d = yd;
                            e = xe;
                            len = xd.length;
                        }
                        i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
                        if (k > i) {
                            k = i;
                            d.length = 1;
                        }
                        d.reverse();
                        for (i = k; i--;)
                            d.push(0);
                        d.reverse();
                    }
                    else {
                        i = xd.length;
                        len = yd.length;
                        xLTy = i < len;
                        if (xLTy)
                            len = i;
                        for (i = 0; i < len; i++) {
                            if (xd[i] != yd[i]) {
                                xLTy = xd[i] < yd[i];
                                break;
                            }
                        }
                        k = 0;
                    }
                    if (xLTy) {
                        d = xd;
                        xd = yd;
                        yd = d;
                        y.s = -y.s;
                    }
                    len = xd.length;
                    for (i = yd.length - len; i > 0; --i)
                        xd[len++] = 0;
                    for (i = yd.length; i > k;) {
                        if (xd[--i] < yd[i]) {
                            for (j = i; j && xd[--j] === 0;)
                                xd[j] = BASE - 1;
                            --xd[j];
                            xd[i] += BASE;
                        }
                        xd[i] -= yd[i];
                    }
                    for (; xd[--len] === 0;)
                        xd.pop();
                    for (; xd[0] === 0; xd.shift())
                        --e;
                    if (!xd[0])
                        return new Ctor(rm === 3 ? -0 : 0);
                    y.d = xd;
                    y.e = getBase10Exponent(xd, e);
                    return external ? finalise(y, pr, rm) : y;
                };
                P.modulo = P.mod = function (y) {
                    let q;
                    const x = this;
                    const Ctor = x.constructor;
                    y = new Ctor(y);
                    if (!x.d || !y.s || y.d && !y.d[0])
                        return new Ctor(NaN);
                    if (!y.d || x.d && !x.d[0]) {
                        return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
                    }
                    external = false;
                    if (Ctor.modulo == 9) {
                        q = divide(x, y.abs(), 0, 3, 1);
                        q.s *= y.s;
                    }
                    else {
                        q = divide(x, y, 0, Ctor.modulo, 1);
                    }
                    q = q.times(y);
                    external = true;
                    return x.minus(q);
                };
                P.naturalExponential = P.exp = function () {
                    return naturalExponential(this);
                };
                P.naturalLogarithm = P.ln = function () {
                    return naturalLogarithm(this);
                };
                P.negated = P.neg = function () {
                    const x = new this.constructor(this);
                    x.s = -x.s;
                    return finalise(x);
                };
                P.plus = P.add = function (y) {
                    let carry;
                    let d;
                    let e;
                    let i;
                    let k;
                    let len;
                    let pr;
                    let rm;
                    let xd;
                    let yd;
                    const x = this;
                    const Ctor = x.constructor;
                    y = new Ctor(y);
                    if (!x.d || !y.d) {
                        if (!x.s || !y.s)
                            y = new Ctor(NaN);
                        else if (!x.d)
                            y = new Ctor(y.d || x.s === y.s ? x : NaN);
                        return y;
                    }
                    if (x.s != y.s) {
                        y.s = -y.s;
                        return x.minus(y);
                    }
                    xd = x.d;
                    yd = y.d;
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    if (!xd[0] || !yd[0]) {
                        if (!yd[0])
                            y = new Ctor(x);
                        return external ? finalise(y, pr, rm) : y;
                    }
                    k = mathfloor(x.e / LOG_BASE);
                    e = mathfloor(y.e / LOG_BASE);
                    xd = xd.slice();
                    i = k - e;
                    if (i) {
                        if (i < 0) {
                            d = xd;
                            i = -i;
                            len = yd.length;
                        }
                        else {
                            d = yd;
                            e = k;
                            len = xd.length;
                        }
                        k = Math.ceil(pr / LOG_BASE);
                        len = k > len ? k + 1 : len + 1;
                        if (i > len) {
                            i = len;
                            d.length = 1;
                        }
                        d.reverse();
                        for (; i--;)
                            d.push(0);
                        d.reverse();
                    }
                    len = xd.length;
                    i = yd.length;
                    if (len - i < 0) {
                        i = len;
                        d = yd;
                        yd = xd;
                        xd = d;
                    }
                    for (carry = 0; i;) {
                        carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
                        xd[i] %= BASE;
                    }
                    if (carry) {
                        xd.unshift(carry);
                        ++e;
                    }
                    for (len = xd.length; xd[--len] == 0;)
                        xd.pop();
                    y.d = xd;
                    y.e = getBase10Exponent(xd, e);
                    return external ? finalise(y, pr, rm) : y;
                };
                P.precision = P.sd = function (z) {
                    let k;
                    const x = this;
                    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0)
                        throw Error(invalidArgument + z);
                    if (x.d) {
                        k = getPrecision(x.d);
                        if (z && x.e + 1 > k)
                            k = x.e + 1;
                    }
                    else {
                        k = NaN;
                    }
                    return k;
                };
                P.round = function () {
                    const x = this;
                    const Ctor = x.constructor;
                    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
                };
                P.sine = P.sin = function () {
                    let pr;
                    let rm;
                    let x = this;
                    const Ctor = x.constructor;
                    if (!x.isFinite())
                        return new Ctor(NaN);
                    if (x.isZero())
                        return new Ctor(x);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
                    Ctor.rounding = 1;
                    x = sine(Ctor, toLessThanHalfPi(Ctor, x));
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
                };
                P.squareRoot = P.sqrt = function () {
                    let m;
                    let n;
                    let sd;
                    let r;
                    let rep;
                    let t;
                    const x = this;
                    const d = x.d;
                    let e = x.e;
                    let s = x.s;
                    const Ctor = x.constructor;
                    if (s !== 1 || !d || !d[0]) {
                        return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
                    }
                    external = false;
                    s = Math.sqrt(+x);
                    if (s == 0 || s == 1 / 0) {
                        n = digitsToString(d);
                        if ((n.length + e) % 2 == 0)
                            n += '0';
                        s = Math.sqrt(n);
                        e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);
                        if (s == 1 / 0) {
                            n = `1e${e}`;
                        }
                        else {
                            n = s.toExponential();
                            n = n.slice(0, n.indexOf('e') + 1) + e;
                        }
                        r = new Ctor(n);
                    }
                    else {
                        r = new Ctor(s.toString());
                    }
                    sd = (e = Ctor.precision) + 3;
                    for (; ;) {
                        t = r;
                        r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);
                        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
                            n = n.slice(sd - 3, sd + 1);
                            if (n == '9999' || !rep && n == '4999') {
                                if (!rep) {
                                    finalise(t, e + 1, 0);
                                    if (t.times(t).eq(x)) {
                                        r = t;
                                        break;
                                    }
                                }
                                sd += 4;
                                rep = 1;
                            }
                            else {
                                if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
                                    finalise(r, e + 1, 1);
                                    m = !r.times(r).eq(x);
                                }
                                break;
                            }
                        }
                    }
                    external = true;
                    return finalise(r, e, Ctor.rounding, m);
                };
                P.tangent = P.tan = function () {
                    let pr;
                    let rm;
                    let x = this;
                    const Ctor = x.constructor;
                    if (!x.isFinite())
                        return new Ctor(NaN);
                    if (x.isZero())
                        return new Ctor(x);
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    Ctor.precision = pr + 10;
                    Ctor.rounding = 1;
                    x = x.sin();
                    x.s = 1;
                    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);
                    Ctor.precision = pr;
                    Ctor.rounding = rm;
                    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
                };
                P.times = P.mul = function (y) {
                    let carry;
                    let e;
                    let i;
                    let k;
                    let r;
                    let rL;
                    let t;
                    let xdL;
                    let ydL;
                    const x = this;
                    const Ctor = x.constructor;
                    let xd = x.d;
                    let yd = (y = new Ctor(y)).d;
                    y.s *= x.s;
                    if (!xd || !xd[0] || !yd || !yd[0]) {
                        return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd
                            ? NaN
                            : !xd || !yd ? y.s / 0 : y.s * 0);
                    }
                    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
                    xdL = xd.length;
                    ydL = yd.length;
                    if (xdL < ydL) {
                        r = xd;
                        xd = yd;
                        yd = r;
                        rL = xdL;
                        xdL = ydL;
                        ydL = rL;
                    }
                    r = [];
                    rL = xdL + ydL;
                    for (i = rL; i--;)
                        r.push(0);
                    for (i = ydL; --i >= 0;) {
                        carry = 0;
                        for (k = xdL + i; k > i;) {
                            t = r[k] + yd[i] * xd[k - i - 1] + carry;
                            r[k--] = t % BASE | 0;
                            carry = t / BASE | 0;
                        }
                        r[k] = (r[k] + carry) % BASE | 0;
                    }
                    for (; !r[--rL];)
                        r.pop();
                    if (carry)
                        ++e;
                    else
                        r.shift();
                    y.d = r;
                    y.e = getBase10Exponent(r, e);
                    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
                };
                P.toBinary = function (sd, rm) {
                    return toStringBinary(this, 2, sd, rm);
                };
                P.toDecimalPlaces = P.toDP = function (dp, rm) {
                    let x = this;
                    const Ctor = x.constructor;
                    x = new Ctor(x);
                    if (dp === void 0)
                        return x;
                    checkInt32(dp, 0, MAX_DIGITS);
                    if (rm === void 0)
                        rm = Ctor.rounding;
                    else
                        checkInt32(rm, 0, 8);
                    return finalise(x, dp + x.e + 1, rm);
                };
                P.toExponential = function (dp, rm) {
                    let str;
                    let x = this;
                    const Ctor = x.constructor;
                    if (dp === void 0) {
                        str = finiteToString(x, true);
                    }
                    else {
                        checkInt32(dp, 0, MAX_DIGITS);
                        if (rm === void 0)
                            rm = Ctor.rounding;
                        else
                            checkInt32(rm, 0, 8);
                        x = finalise(new Ctor(x), dp + 1, rm);
                        str = finiteToString(x, true, dp + 1);
                    }
                    return x.isNeg() && !x.isZero() ? `-${str}` : str;
                };
                P.toFixed = function (dp, rm) {
                    let str;
                    let y;
                    const x = this;
                    const Ctor = x.constructor;
                    if (dp === void 0) {
                        str = finiteToString(x);
                    }
                    else {
                        checkInt32(dp, 0, MAX_DIGITS);
                        if (rm === void 0)
                            rm = Ctor.rounding;
                        else
                            checkInt32(rm, 0, 8);
                        y = finalise(new Ctor(x), dp + x.e + 1, rm);
                        str = finiteToString(y, false, dp + y.e + 1);
                    }
                    return x.isNeg() && !x.isZero() ? `-${str}` : str;
                };
                P.toFraction = function (maxD) {
                    let d;
                    let d0;
                    let d1;
                    let d2;
                    let e;
                    let k;
                    let n;
                    let n0;
                    let n1;
                    let pr;
                    let q;
                    let r;
                    const x = this;
                    const xd = x.d;
                    const Ctor = x.constructor;
                    if (!xd)
                        return new Ctor(x);
                    n1 = d0 = new Ctor(1);
                    d1 = n0 = new Ctor(0);
                    d = new Ctor(d1);
                    e = d.e = getPrecision(xd) - x.e - 1;
                    k = e % LOG_BASE;
                    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);
                    if (maxD == null) {
                        maxD = e > 0 ? d : n1;
                    }
                    else {
                        n = new Ctor(maxD);
                        if (!n.isInt() || n.lt(n1))
                            throw Error(invalidArgument + n);
                        maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
                    }
                    external = false;
                    n = new Ctor(digitsToString(xd));
                    pr = Ctor.precision;
                    Ctor.precision = e = xd.length * LOG_BASE * 2;
                    for (; ;) {
                        q = divide(n, d, 0, 1, 1);
                        d2 = d0.plus(q.times(d1));
                        if (d2.cmp(maxD) == 1)
                            break;
                        d0 = d1;
                        d1 = d2;
                        d2 = n1;
                        n1 = n0.plus(q.times(d2));
                        n0 = d2;
                        d2 = d;
                        d = n.minus(q.times(d2));
                        n = d2;
                    }
                    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
                    n0 = n0.plus(d2.times(n1));
                    d0 = d0.plus(d2.times(d1));
                    n0.s = n1.s = x.s;
                    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
                        ? [n1, d1] : [n0, d0];
                    Ctor.precision = pr;
                    external = true;
                    return r;
                };
                P.toHexadecimal = P.toHex = function (sd, rm) {
                    return toStringBinary(this, 16, sd, rm);
                };
                P.toNearest = function (y, rm) {
                    let x = this;
                    const Ctor = x.constructor;
                    x = new Ctor(x);
                    if (y == null) {
                        if (!x.d)
                            return x;
                        y = new Ctor(1);
                        rm = Ctor.rounding;
                    }
                    else {
                        y = new Ctor(y);
                        if (rm !== void 0)
                            checkInt32(rm, 0, 8);
                        if (!x.d)
                            return y.s ? x : y;
                        if (!y.d) {
                            if (y.s)
                                y.s = x.s;
                            return y;
                        }
                    }
                    if (y.d[0]) {
                        external = false;
                        if (rm < 4)
                            rm = [4, 5, 7, 8][rm];
                        x = divide(x, y, 0, rm, 1).times(y);
                        external = true;
                        finalise(x);
                    }
                    else {
                        y.s = x.s;
                        x = y;
                    }
                    return x;
                };
                P.toNumber = function () {
                    return +this;
                };
                P.toOctal = function (sd, rm) {
                    return toStringBinary(this, 8, sd, rm);
                };
                P.toPower = P.pow = function (y) {
                    let e;
                    let k;
                    let pr;
                    let r;
                    let rm;
                    let s;
                    let x = this;
                    const Ctor = x.constructor;
                    const yn = +(y = new Ctor(y));
                    if (!x.d || !y.d || !x.d[0] || !y.d[0])
                        return new Ctor(mathpow(+x, yn));
                    x = new Ctor(x);
                    if (x.eq(1))
                        return x;
                    pr = Ctor.precision;
                    rm = Ctor.rounding;
                    if (y.eq(1))
                        return finalise(x, pr, rm);
                    e = mathfloor(y.e / LOG_BASE);
                    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
                        r = intPow(Ctor, x, k, pr);
                        return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
                    }
                    s = x.s;
                    if (s < 0) {
                        if (e < y.d.length - 1)
                            return new Ctor(NaN);
                        if ((y.d[e] & 1) == 0)
                            s = 1;
                        if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
                            x.s = s;
                            return x;
                        }
                    }
                    k = mathpow(+x, yn);
                    e = k == 0 || !isFinite(k)
                        ? mathfloor(yn * (Math.log(`0.${digitsToString(x.d)}`) / Math.LN10 + x.e + 1))
                        : new Ctor(`${k}`).e;
                    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1)
                        return new Ctor(e > 0 ? s / 0 : 0);
                    external = false;
                    Ctor.rounding = x.s = 1;
                    k = Math.min(12, (`${e}`).length);
                    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);
                    if (r.d) {
                        r = finalise(r, pr + 5, 1);
                        if (checkRoundingDigits(r.d, pr, rm)) {
                            e = pr + 10;
                            r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);
                            if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
                                r = finalise(r, pr + 1, 0);
                            }
                        }
                    }
                    r.s = s;
                    external = true;
                    Ctor.rounding = rm;
                    return finalise(r, pr, rm);
                };
                P.toPrecision = function (sd, rm) {
                    let str;
                    let x = this;
                    const Ctor = x.constructor;
                    if (sd === void 0) {
                        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
                    }
                    else {
                        checkInt32(sd, 1, MAX_DIGITS);
                        if (rm === void 0)
                            rm = Ctor.rounding;
                        else
                            checkInt32(rm, 0, 8);
                        x = finalise(new Ctor(x), sd, rm);
                        str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
                    }
                    return x.isNeg() && !x.isZero() ? `-${str}` : str;
                };
                P.toSignificantDigits = P.toSD = function (sd, rm) {
                    const x = this;
                    const Ctor = x.constructor;
                    if (sd === void 0) {
                        sd = Ctor.precision;
                        rm = Ctor.rounding;
                    }
                    else {
                        checkInt32(sd, 1, MAX_DIGITS);
                        if (rm === void 0)
                            rm = Ctor.rounding;
                        else
                            checkInt32(rm, 0, 8);
                    }
                    return finalise(new Ctor(x), sd, rm);
                };
                P.toString = function () {
                    const x = this;
                    const Ctor = x.constructor;
                    const str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
                    return x.isNeg() && !x.isZero() ? `-${str}` : str;
                };
                P.truncated = P.trunc = function () {
                    return finalise(new this.constructor(this), this.e + 1, 1);
                };
                P.valueOf = P.toJSON = function () {
                    const x = this;
                    const Ctor = x.constructor;
                    const str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
                    return x.isNeg() ? `-${str}` : str;
                };
                function digitsToString(d) {
                    let i;
                    let k;
                    let ws;
                    const indexOfLastWord = d.length - 1;
                    let str = '';
                    let w = d[0];
                    if (indexOfLastWord > 0) {
                        str += w;
                        for (i = 1; i < indexOfLastWord; i++) {
                            ws = `${d[i]}`;
                            k = LOG_BASE - ws.length;
                            if (k)
                                str += getZeroString(k);
                            str += ws;
                        }
                        w = d[i];
                        ws = `${w}`;
                        k = LOG_BASE - ws.length;
                        if (k)
                            str += getZeroString(k);
                    }
                    else if (w === 0) {
                        return '0';
                    }
                    for (; w % 10 === 0;)
                        w /= 10;
                    return str + w;
                }
                function checkInt32(i, min, max) {
                    if (i !== ~~i || i < min || i > max) {
                        throw Error(invalidArgument + i);
                    }
                }
                function checkRoundingDigits(d, i, rm, repeating) {
                    let di;
                    let k;
                    let r;
                    let rd;
                    for (k = d[0]; k >= 10; k /= 10)
                        --i;
                    if (--i < 0) {
                        i += LOG_BASE;
                        di = 0;
                    }
                    else {
                        di = Math.ceil((i + 1) / LOG_BASE);
                        i %= LOG_BASE;
                    }
                    k = mathpow(10, LOG_BASE - i);
                    rd = d[di] % k | 0;
                    if (repeating == null) {
                        if (i < 3) {
                            if (i == 0)
                                rd = rd / 100 | 0;
                            else if (i == 1)
                                rd = rd / 10 | 0;
                            r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
                        }
                        else {
                            r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
                                (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
                                (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
                        }
                    }
                    else {
                        if (i < 4) {
                            if (i == 0)
                                rd = rd / 1000 | 0;
                            else if (i == 1)
                                rd = rd / 100 | 0;
                            else if (i == 2)
                                rd = rd / 10 | 0;
                            r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
                        }
                        else {
                            r = ((repeating || rm < 4) && rd + 1 == k ||
                                (!repeating && rm > 3) && rd + 1 == k / 2) &&
                                (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
                        }
                    }
                    return r;
                }
                function convertBase(str, baseIn, baseOut) {
                    let j;
                    const arr = [0];
                    let arrL;
                    let i = 0;
                    const strL = str.length;
                    for (; i < strL;) {
                        for (arrL = arr.length; arrL--;)
                            arr[arrL] *= baseIn;
                        arr[0] += NUMERALS.indexOf(str.charAt(i++));
                        for (j = 0; j < arr.length; j++) {
                            if (arr[j] > baseOut - 1) {
                                if (arr[j + 1] === void 0)
                                    arr[j + 1] = 0;
                                arr[j + 1] += arr[j] / baseOut | 0;
                                arr[j] %= baseOut;
                            }
                        }
                    }
                    return arr.reverse();
                }
                function cosine(Ctor, x) {
                    let k;
                    let y;
                    const len = x.d.length;
                    if (len < 32) {
                        k = Math.ceil(len / 3);
                        y = (4 ** -k).toString();
                    }
                    else {
                        k = 16;
                        y = '2.3283064365386962890625e-10';
                    }
                    Ctor.precision += k;
                    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));
                    for (let i = k; i--;) {
                        const cos2x = x.times(x);
                        x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
                    }
                    Ctor.precision -= k;
                    return x;
                }
                var divide = (() => {
                    function multiplyInteger(x, k, base) {
                        let temp;
                        let carry = 0;
                        let i = x.length;
                        for (x = x.slice(); i--;) {
                            temp = x[i] * k + carry;
                            x[i] = temp % base | 0;
                            carry = temp / base | 0;
                        }
                        if (carry)
                            x.unshift(carry);
                        return x;
                    }
                    function compare(a, b, aL, bL) {
                        let i;
                        let r;
                        if (aL != bL) {
                            r = aL > bL ? 1 : -1;
                        }
                        else {
                            for (i = r = 0; i < aL; i++) {
                                if (a[i] != b[i]) {
                                    r = a[i] > b[i] ? 1 : -1;
                                    break;
                                }
                            }
                        }
                        return r;
                    }
                    function subtract(a, b, aL, base) {
                        let i = 0;
                        for (; aL--;) {
                            a[aL] -= i;
                            i = a[aL] < b[aL] ? 1 : 0;
                            a[aL] = i * base + a[aL] - b[aL];
                        }
                        for (; !a[0] && a.length > 1;)
                            a.shift();
                    }
                    return (x, y, pr, rm, dp, base) => {
                        let cmp;
                        let e;
                        let i;
                        let k;
                        let logBase;
                        let more;
                        let prod;
                        let prodL;
                        let q;
                        let qd;
                        let rem;
                        let remL;
                        let rem0;
                        let sd;
                        let t;
                        let xi;
                        let xL;
                        let yd0;
                        let yL;
                        let yz;
                        const Ctor = x.constructor;
                        const sign = x.s == y.s ? 1 : -1;
                        let xd = x.d;
                        let yd = y.d;
                        if (!xd || !xd[0] || !yd || !yd[0]) {
                            return new Ctor(!x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :
                                xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
                        }
                        if (base) {
                            logBase = 1;
                            e = x.e - y.e;
                        }
                        else {
                            base = BASE;
                            logBase = LOG_BASE;
                            e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
                        }
                        yL = yd.length;
                        xL = xd.length;
                        q = new Ctor(sign);
                        qd = q.d = [];
                        for (i = 0; yd[i] == (xd[i] || 0); i++)
                            ;
                        if (yd[i] > (xd[i] || 0))
                            e--;
                        if (pr == null) {
                            sd = pr = Ctor.precision;
                            rm = Ctor.rounding;
                        }
                        else if (dp) {
                            sd = pr + (x.e - y.e) + 1;
                        }
                        else {
                            sd = pr;
                        }
                        if (sd < 0) {
                            qd.push(1);
                            more = true;
                        }
                        else {
                            sd = sd / logBase + 2 | 0;
                            i = 0;
                            if (yL == 1) {
                                k = 0;
                                yd = yd[0];
                                sd++;
                                for (; (i < xL || k) && sd--; i++) {
                                    t = k * base + (xd[i] || 0);
                                    qd[i] = t / yd | 0;
                                    k = t % yd | 0;
                                }
                                more = k || i < xL;
                            }
                            else {
                                k = base / (yd[0] + 1) | 0;
                                if (k > 1) {
                                    yd = multiplyInteger(yd, k, base);
                                    xd = multiplyInteger(xd, k, base);
                                    yL = yd.length;
                                    xL = xd.length;
                                }
                                xi = yL;
                                rem = xd.slice(0, yL);
                                remL = rem.length;
                                for (; remL < yL;)
                                    rem[remL++] = 0;
                                yz = yd.slice();
                                yz.unshift(0);
                                yd0 = yd[0];
                                if (yd[1] >= base / 2)
                                    ++yd0;
                                do {
                                    k = 0;
                                    cmp = compare(yd, rem, yL, remL);
                                    if (cmp < 0) {
                                        rem0 = rem[0];
                                        if (yL != remL)
                                            rem0 = rem0 * base + (rem[1] || 0);
                                        k = rem0 / yd0 | 0;
                                        if (k > 1) {
                                            if (k >= base)
                                                k = base - 1;
                                            prod = multiplyInteger(yd, k, base);
                                            prodL = prod.length;
                                            remL = rem.length;
                                            cmp = compare(prod, rem, prodL, remL);
                                            if (cmp == 1) {
                                                k--;
                                                subtract(prod, yL < prodL ? yz : yd, prodL, base);
                                            }
                                        }
                                        else {
                                            if (k == 0)
                                                cmp = k = 1;
                                            prod = yd.slice();
                                        }
                                        prodL = prod.length;
                                        if (prodL < remL)
                                            prod.unshift(0);
                                        subtract(rem, prod, remL, base);
                                        if (cmp == -1) {
                                            remL = rem.length;
                                            cmp = compare(yd, rem, yL, remL);
                                            if (cmp < 1) {
                                                k++;
                                                subtract(rem, yL < remL ? yz : yd, remL, base);
                                            }
                                        }
                                        remL = rem.length;
                                    }
                                    else if (cmp === 0) {
                                        k++;
                                        rem = [0];
                                    }
                                    qd[i++] = k;
                                    if (cmp && rem[0]) {
                                        rem[remL++] = xd[xi] || 0;
                                    }
                                    else {
                                        rem = [xd[xi]];
                                        remL = 1;
                                    }
                                } while ((xi++ < xL || rem[0] !== void 0) && sd--);
                                more = rem[0] !== void 0;
                            }
                            if (!qd[0])
                                qd.shift();
                        }
                        if (logBase == 1) {
                            q.e = e;
                            inexact = more;
                        }
                        else {
                            for (i = 1, k = qd[0]; k >= 10; k /= 10)
                                i++;
                            q.e = i + e * logBase - 1;
                            finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
                        }
                        return q;
                    };
                })();
                function finalise(x, sd, rm, isTruncated) {
                    let digits;
                    let i;
                    let j;
                    let k;
                    let rd;
                    let roundUp;
                    let w;
                    let xd;
                    let xdi;
                    const Ctor = x.constructor;
                    out: if (sd != null) {
                        xd = x.d;
                        if (!xd)
                            return x;
                        for (digits = 1, k = xd[0]; k >= 10; k /= 10)
                            digits++;
                        i = sd - digits;
                        if (i < 0) {
                            i += LOG_BASE;
                            j = sd;
                            w = xd[xdi = 0];
                            rd = w / mathpow(10, digits - j - 1) % 10 | 0;
                        }
                        else {
                            xdi = Math.ceil((i + 1) / LOG_BASE);
                            k = xd.length;
                            if (xdi >= k) {
                                if (isTruncated) {
                                    for (; k++ <= xdi;)
                                        xd.push(0);
                                    w = rd = 0;
                                    digits = 1;
                                    i %= LOG_BASE;
                                    j = i - LOG_BASE + 1;
                                }
                                else {
                                    break out;
                                }
                            }
                            else {
                                w = k = xd[xdi];
                                for (digits = 1; k >= 10; k /= 10)
                                    digits++;
                                i %= LOG_BASE;
                                j = i - LOG_BASE + digits;
                                rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
                            }
                        }
                        isTruncated = isTruncated || sd < 0 ||
                            xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));
                        roundUp = rm < 4
                            ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
                            : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&
                                ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
                                rm == (x.s < 0 ? 8 : 7));
                        if (sd < 1 || !xd[0]) {
                            xd.length = 0;
                            if (roundUp) {
                                sd -= x.e + 1;
                                xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
                                x.e = -sd || 0;
                            }
                            else {
                                xd[0] = x.e = 0;
                            }
                            return x;
                        }
                        if (i == 0) {
                            xd.length = xdi;
                            k = 1;
                            xdi--;
                        }
                        else {
                            xd.length = xdi + 1;
                            k = mathpow(10, LOG_BASE - i);
                            xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
                        }
                        if (roundUp) {
                            for (; ;) {
                                if (xdi == 0) {
                                    for (i = 1, j = xd[0]; j >= 10; j /= 10)
                                        i++;
                                    j = xd[0] += k;
                                    for (k = 1; j >= 10; j /= 10)
                                        k++;
                                    if (i != k) {
                                        x.e++;
                                        if (xd[0] == BASE)
                                            xd[0] = 1;
                                    }
                                    break;
                                }
                                else {
                                    xd[xdi] += k;
                                    if (xd[xdi] != BASE)
                                        break;
                                    xd[xdi--] = 0;
                                    k = 1;
                                }
                            }
                        }
                        for (i = xd.length; xd[--i] === 0;)
                            xd.pop();
                    }
                    if (external) {
                        if (x.e > Ctor.maxE) {
                            x.d = null;
                            x.e = NaN;
                        }
                        else if (x.e < Ctor.minE) {
                            x.e = 0;
                            x.d = [0];
                        }
                    }
                    return x;
                }
                function finiteToString(x, isExp, sd) {
                    if (!x.isFinite())
                        return nonFiniteToString(x);
                    let k;
                    const e = x.e;
                    let str = digitsToString(x.d);
                    const len = str.length;
                    if (isExp) {
                        if (sd && (k = sd - len) > 0) {
                            str = `${str.charAt(0)}.${str.slice(1)}${getZeroString(k)}`;
                        }
                        else if (len > 1) {
                            str = `${str.charAt(0)}.${str.slice(1)}`;
                        }
                        str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
                    }
                    else if (e < 0) {
                        str = `0.${getZeroString(-e - 1)}${str}`;
                        if (sd && (k = sd - len) > 0)
                            str += getZeroString(k);
                    }
                    else if (e >= len) {
                        str += getZeroString(e + 1 - len);
                        if (sd && (k = sd - e - 1) > 0)
                            str = `${str}.${getZeroString(k)}`;
                    }
                    else {
                        if ((k = e + 1) < len)
                            str = `${str.slice(0, k)}.${str.slice(k)}`;
                        if (sd && (k = sd - len) > 0) {
                            if (e + 1 === len)
                                str += '.';
                            str += getZeroString(k);
                        }
                    }
                    return str;
                }
                function getBase10Exponent(digits, e) {
                    let w = digits[0];
                    for (e *= LOG_BASE; w >= 10; w /= 10)
                        e++;
                    return e;
                }
                function getLn10(Ctor, sd, pr) {
                    if (sd > LN10_PRECISION) {
                        external = true;
                        if (pr)
                            Ctor.precision = pr;
                        throw Error(precisionLimitExceeded);
                    }
                    return finalise(new Ctor(LN10), sd, 1, true);
                }
                function getPi(Ctor, sd, rm) {
                    if (sd > PI_PRECISION)
                        throw Error(precisionLimitExceeded);
                    return finalise(new Ctor(PI), sd, rm, true);
                }
                function getPrecision(digits) {
                    let w = digits.length - 1;
                    let len = w * LOG_BASE + 1;
                    w = digits[w];
                    if (w) {
                        for (; w % 10 == 0; w /= 10)
                            len--;
                        for (w = digits[0]; w >= 10; w /= 10)
                            len++;
                    }
                    return len;
                }
                function getZeroString(k) {
                    let zs = '';
                    for (; k--;)
                        zs += '0';
                    return zs;
                }
                function intPow(Ctor, x, n, pr) {
                    let isTruncated;
                    let r = new Ctor(1);
                    const k = Math.ceil(pr / LOG_BASE + 4);
                    external = false;
                    for (; ;) {
                        if (n % 2) {
                            r = r.times(x);
                            if (truncate(r.d, k))
                                isTruncated = true;
                        }
                        n = mathfloor(n / 2);
                        if (n === 0) {
                            n = r.d.length - 1;
                            if (isTruncated && r.d[n] === 0)
                                ++r.d[n];
                            break;
                        }
                        x = x.times(x);
                        truncate(x.d, k);
                    }
                    external = true;
                    return r;
                }
                function isOdd({ d }) {
                    return d[d.length - 1] & 1;
                }
                function maxOrMin(Ctor, args, ltgt) {
                    let y;
                    let x = new Ctor(args[0]);
                    let i = 0;
                    for (; ++i < args.length;) {
                        y = new Ctor(args[i]);
                        if (!y.s) {
                            x = y;
                            break;
                        }
                        else if (x[ltgt](y)) {
                            x = y;
                        }
                    }
                    return x;
                }
                function naturalExponential(x, sd) {
                    let denominator;
                    let guard;
                    let j;
                    let pow;
                    let sum;
                    let t;
                    let wpr;
                    let rep = 0;
                    let i = 0;
                    let k = 0;
                    const Ctor = x.constructor;
                    const rm = Ctor.rounding;
                    const pr = Ctor.precision;
                    if (!x.d || !x.d[0] || x.e > 17) {
                        return new Ctor(x.d
                            ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
                            : x.s ? x.s < 0 ? 0 : x : 0 / 0);
                    }
                    if (sd == null) {
                        external = false;
                        wpr = pr;
                    }
                    else {
                        wpr = sd;
                    }
                    t = new Ctor(0.03125);
                    while (x.e > -2) {
                        x = x.times(t);
                        k += 5;
                    }
                    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
                    wpr += guard;
                    denominator = pow = sum = new Ctor(1);
                    Ctor.precision = wpr;
                    for (; ;) {
                        pow = finalise(pow.times(x), wpr, 1);
                        denominator = denominator.times(++i);
                        t = sum.plus(divide(pow, denominator, wpr, 1));
                        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
                            j = k;
                            while (j--)
                                sum = finalise(sum.times(sum), wpr, 1);
                            if (sd == null) {
                                if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
                                    Ctor.precision = wpr += 10;
                                    denominator = pow = t = new Ctor(1);
                                    i = 0;
                                    rep++;
                                }
                                else {
                                    return finalise(sum, Ctor.precision = pr, rm, external = true);
                                }
                            }
                            else {
                                Ctor.precision = pr;
                                return sum;
                            }
                        }
                        sum = t;
                    }
                }
                function naturalLogarithm(y, sd) {
                    let c;
                    let c0;
                    let denominator;
                    let e;
                    let numerator;
                    let rep;
                    let sum;
                    let t;
                    let wpr;
                    let x1;
                    let x2;
                    let n = 1;
                    const guard = 10;
                    let x = y;
                    const xd = x.d;
                    const Ctor = x.constructor;
                    const rm = Ctor.rounding;
                    const pr = Ctor.precision;
                    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
                        return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
                    }
                    if (sd == null) {
                        external = false;
                        wpr = pr;
                    }
                    else {
                        wpr = sd;
                    }
                    Ctor.precision = wpr += guard;
                    c = digitsToString(xd);
                    c0 = c.charAt(0);
                    if (Math.abs(e = x.e) < 1.5e15) {
                        while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
                            x = x.times(y);
                            c = digitsToString(x.d);
                            c0 = c.charAt(0);
                            n++;
                        }
                        e = x.e;
                        if (c0 > 1) {
                            x = new Ctor(`0.${c}`);
                            e++;
                        }
                        else {
                            x = new Ctor(`${c0}.${c.slice(1)}`);
                        }
                    }
                    else {
                        t = getLn10(Ctor, wpr + 2, pr).times(`${e}`);
                        x = naturalLogarithm(new Ctor(`${c0}.${c.slice(1)}`), wpr - guard).plus(t);
                        Ctor.precision = pr;
                        return sd == null ? finalise(x, pr, rm, external = true) : x;
                    }
                    x1 = x;
                    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
                    x2 = finalise(x.times(x), wpr, 1);
                    denominator = 3;
                    for (; ;) {
                        numerator = finalise(numerator.times(x2), wpr, 1);
                        t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));
                        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
                            sum = sum.times(2);
                            if (e !== 0)
                                sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(`${e}`));
                            sum = divide(sum, new Ctor(n), wpr, 1);
                            if (sd == null) {
                                if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
                                    Ctor.precision = wpr += guard;
                                    t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
                                    x2 = finalise(x.times(x), wpr, 1);
                                    denominator = rep = 1;
                                }
                                else {
                                    return finalise(sum, Ctor.precision = pr, rm, external = true);
                                }
                            }
                            else {
                                Ctor.precision = pr;
                                return sum;
                            }
                        }
                        sum = t;
                        denominator += 2;
                    }
                }
                function nonFiniteToString({ s }) {
                    return String(s * s / 0);
                }
                function parseDecimal(x, str) {
                    let e;
                    let i;
                    let len;
                    if ((e = str.indexOf('.')) > -1)
                        str = str.replace('.', '');
                    if ((i = str.search(/e/i)) > 0) {
                        if (e < 0)
                            e = i;
                        e += +str.slice(i + 1);
                        str = str.substring(0, i);
                    }
                    else if (e < 0) {
                        e = str.length;
                    }
                    for (i = 0; str.charCodeAt(i) === 48; i++)
                        ;
                    for (len = str.length; str.charCodeAt(len - 1) === 48; --len)
                        ;
                    str = str.slice(i, len);
                    if (str) {
                        len -= i;
                        x.e = e = e - i - 1;
                        x.d = [];
                        i = (e + 1) % LOG_BASE;
                        if (e < 0)
                            i += LOG_BASE;
                        if (i < len) {
                            if (i)
                                x.d.push(+str.slice(0, i));
                            for (len -= LOG_BASE; i < len;)
                                x.d.push(+str.slice(i, i += LOG_BASE));
                            str = str.slice(i);
                            i = LOG_BASE - str.length;
                        }
                        else {
                            i -= len;
                        }
                        for (; i--;)
                            str += '0';
                        x.d.push(+str);
                        if (external) {
                            if (x.e > x.constructor.maxE) {
                                x.d = null;
                                x.e = NaN;
                            }
                            else if (x.e < x.constructor.minE) {
                                x.e = 0;
                                x.d = [0];
                            }
                        }
                    }
                    else {
                        x.e = 0;
                        x.d = [0];
                    }
                    return x;
                }
                function parseOther(x, str) {
                    let base;
                    let Ctor;
                    let divisor;
                    let i;
                    let isFloat;
                    let len;
                    let p;
                    let xd;
                    let xe;
                    if (str === 'Infinity' || str === 'NaN') {
                        if (!+str)
                            x.s = NaN;
                        x.e = NaN;
                        x.d = null;
                        return x;
                    }
                    if (isHex.test(str)) {
                        base = 16;
                        str = str.toLowerCase();
                    }
                    else if (isBinary.test(str)) {
                        base = 2;
                    }
                    else if (isOctal.test(str)) {
                        base = 8;
                    }
                    else {
                        throw Error(invalidArgument + str);
                    }
                    i = str.search(/p/i);
                    if (i > 0) {
                        p = +str.slice(i + 1);
                        str = str.substring(2, i);
                    }
                    else {
                        str = str.slice(2);
                    }
                    i = str.indexOf('.');
                    isFloat = i >= 0;
                    Ctor = x.constructor;
                    if (isFloat) {
                        str = str.replace('.', '');
                        len = str.length;
                        i = len - i;
                        divisor = intPow(Ctor, new Ctor(base), i, i * 2);
                    }
                    xd = convertBase(str, base, BASE);
                    xe = xd.length - 1;
                    for (i = xe; xd[i] === 0; --i)
                        xd.pop();
                    if (i < 0)
                        return new Ctor(x.s * 0);
                    x.e = getBase10Exponent(xd, xe);
                    x.d = xd;
                    external = false;
                    if (isFloat)
                        x = divide(x, divisor, len * 4);
                    if (p)
                        x = x.times(Math.abs(p) < 54 ? 2 ** p : Decimal.pow(2, p));
                    external = true;
                    return x;
                }
                function sine(Ctor, x) {
                    let k;
                    const len = x.d.length;
                    if (len < 3)
                        return taylorSeries(Ctor, 2, x, x);
                    k = 1.4 * Math.sqrt(len);
                    k = k > 16 ? 16 : k | 0;
                    x = x.times(5 ** -k);
                    x = taylorSeries(Ctor, 2, x, x);
                    let sin2_x;
                    const d5 = new Ctor(5);
                    const d16 = new Ctor(16);
                    const d20 = new Ctor(20);
                    for (; k--;) {
                        sin2_x = x.times(x);
                        x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
                    }
                    return x;
                }
                function taylorSeries(Ctor, n, x, y, isHyperbolic) {
                    let j;
                    let t;
                    let u;
                    let x2;
                    let i = 1;
                    const pr = Ctor.precision;
                    const k = Math.ceil(pr / LOG_BASE);
                    external = false;
                    x2 = x.times(x);
                    u = new Ctor(y);
                    for (; ;) {
                        t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
                        u = isHyperbolic ? y.plus(t) : y.minus(t);
                        y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
                        t = u.plus(y);
                        if (t.d[k] !== void 0) {
                            for (j = k; t.d[j] === u.d[j] && j--;)
                                ;
                            if (j == -1)
                                break;
                        }
                        j = u;
                        u = y;
                        y = t;
                        t = j;
                        i++;
                    }
                    external = true;
                    t.d.length = k + 1;
                    return t;
                }
                function toLessThanHalfPi(Ctor, x) {
                    let t;
                    const isNeg = x.s < 0;
                    const pi = getPi(Ctor, Ctor.precision, 1);
                    const halfPi = pi.times(0.5);
                    x = x.abs();
                    if (x.lte(halfPi)) {
                        quadrant = isNeg ? 4 : 1;
                        return x;
                    }
                    t = x.divToInt(pi);
                    if (t.isZero()) {
                        quadrant = isNeg ? 3 : 2;
                    }
                    else {
                        x = x.minus(t.times(pi));
                        if (x.lte(halfPi)) {
                            quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
                            return x;
                        }
                        quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
                    }
                    return x.minus(pi).abs();
                }
                function toStringBinary(x, baseOut, sd, rm) {
                    let base;
                    let e;
                    let i;
                    let k;
                    let len;
                    let roundUp;
                    let str;
                    let xd;
                    let y;
                    const Ctor = x.constructor;
                    const isExp = sd !== void 0;
                    if (isExp) {
                        checkInt32(sd, 1, MAX_DIGITS);
                        if (rm === void 0)
                            rm = Ctor.rounding;
                        else
                            checkInt32(rm, 0, 8);
                    }
                    else {
                        sd = Ctor.precision;
                        rm = Ctor.rounding;
                    }
                    if (!x.isFinite()) {
                        str = nonFiniteToString(x);
                    }
                    else {
                        str = finiteToString(x);
                        i = str.indexOf('.');
                        if (isExp) {
                            base = 2;
                            if (baseOut == 16) {
                                sd = sd * 4 - 3;
                            }
                            else if (baseOut == 8) {
                                sd = sd * 3 - 2;
                            }
                        }
                        else {
                            base = baseOut;
                        }
                        if (i >= 0) {
                            str = str.replace('.', '');
                            y = new Ctor(1);
                            y.e = str.length - i;
                            y.d = convertBase(finiteToString(y), 10, base);
                            y.e = y.d.length;
                        }
                        xd = convertBase(str, 10, base);
                        e = len = xd.length;
                        for (; xd[--len] == 0;)
                            xd.pop();
                        if (!xd[0]) {
                            str = isExp ? '0p+0' : '0';
                        }
                        else {
                            if (i < 0) {
                                e--;
                            }
                            else {
                                x = new Ctor(x);
                                x.d = xd;
                                x.e = e;
                                x = divide(x, y, sd, rm, 0, base);
                                xd = x.d;
                                e = x.e;
                                roundUp = inexact;
                            }
                            i = xd[sd];
                            k = base / 2;
                            roundUp = roundUp || xd[sd + 1] !== void 0;
                            roundUp = rm < 4
                                ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
                                : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
                                    rm === (x.s < 0 ? 8 : 7));
                            xd.length = sd;
                            if (roundUp) {
                                for (; ++xd[--sd] > base - 1;) {
                                    xd[sd] = 0;
                                    if (!sd) {
                                        ++e;
                                        xd.unshift(1);
                                    }
                                }
                            }
                            for (len = xd.length; !xd[len - 1]; --len)
                                ;
                            for (i = 0, str = ''; i < len; i++)
                                str += NUMERALS.charAt(xd[i]);
                            if (isExp) {
                                if (len > 1) {
                                    if (baseOut == 16 || baseOut == 8) {
                                        i = baseOut == 16 ? 4 : 3;
                                        for (--len; len % i; len++)
                                            str += '0';
                                        xd = convertBase(str, base, baseOut);
                                        for (len = xd.length; !xd[len - 1]; --len)
                                            ;
                                        for (i = 1, str = '1.'; i < len; i++)
                                            str += NUMERALS.charAt(xd[i]);
                                    }
                                    else {
                                        str = `${str.charAt(0)}.${str.slice(1)}`;
                                    }
                                }
                                str = str + (e < 0 ? 'p' : 'p+') + e;
                            }
                            else if (e < 0) {
                                for (; ++e;)
                                    str = `0${str}`;
                                str = `0.${str}`;
                            }
                            else {
                                if (++e > len)
                                    for (e -= len; e--;)
                                        str += '0';
                                else if (e < len)
                                    str = `${str.slice(0, e)}.${str.slice(e)}`;
                            }
                        }
                        str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
                    }
                    return x.s < 0 ? `-${str}` : str;
                }
                function truncate(arr, len) {
                    if (arr.length > len) {
                        arr.length = len;
                        return true;
                    }
                }
                function abs(x) {
                    return new this(x).abs();
                }
                function acos(x) {
                    return new this(x).acos();
                }
                function acosh(x) {
                    return new this(x).acosh();
                }
                function add(x, y) {
                    return new this(x).plus(y);
                }
                function asin(x) {
                    return new this(x).asin();
                }
                function asinh(x) {
                    return new this(x).asinh();
                }
                function atan(x) {
                    return new this(x).atan();
                }
                function atanh(x) {
                    return new this(x).atanh();
                }
                function atan2(y, x) {
                    y = new this(y);
                    x = new this(x);
                    let r;
                    const pr = this.precision;
                    const rm = this.rounding;
                    const wpr = pr + 4;
                    if (!y.s || !x.s) {
                        r = new this(NaN);
                    }
                    else if (!y.d && !x.d) {
                        r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
                        r.s = y.s;
                    }
                    else if (!x.d || y.isZero()) {
                        r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
                        r.s = y.s;
                    }
                    else if (!y.d || x.isZero()) {
                        r = getPi(this, wpr, 1).times(0.5);
                        r.s = y.s;
                    }
                    else if (x.s < 0) {
                        this.precision = wpr;
                        this.rounding = 1;
                        r = this.atan(divide(y, x, wpr, 1));
                        x = getPi(this, wpr, 1);
                        this.precision = pr;
                        this.rounding = rm;
                        r = y.s < 0 ? r.minus(x) : r.plus(x);
                    }
                    else {
                        r = this.atan(divide(y, x, wpr, 1));
                    }
                    return r;
                }
                function cbrt(x) {
                    return new this(x).cbrt();
                }
                function ceil(x) {
                    return finalise(x = new this(x), x.e + 1, 2);
                }
                function config(obj) {
                    if (!obj || typeof obj !== 'object')
                        throw Error(`${decimalError}Object expected`);
                    let i;
                    let p;
                    let v;

                    const ps = [
                        'precision', 1, MAX_DIGITS,
                        'rounding', 0, 8,
                        'toExpNeg', -EXP_LIMIT, 0,
                        'toExpPos', 0, EXP_LIMIT,
                        'maxE', 0, EXP_LIMIT,
                        'minE', -EXP_LIMIT, 0,
                        'modulo', 0, 9
                    ];

                    for (i = 0; i < ps.length; i += 3) {
                        if ((v = obj[p = ps[i]]) !== void 0) {
                            if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2])
                                this[p] = v;
                            else
                                throw Error(`${invalidArgument + p}: ${v}`);
                        }
                    }
                    if ((v = obj[p = 'crypto']) !== void 0) {
                        if (v === true || v === false || v === 0 || v === 1) {
                            if (v) {
                                if (typeof crypto != 'undefined' && crypto &&
                                    (crypto.getRandomValues || crypto.randomBytes)) {
                                    this[p] = true;
                                }
                                else {
                                    throw Error(cryptoUnavailable);
                                }
                            }
                            else {
                                this[p] = false;
                            }
                        }
                        else {
                            throw Error(`${invalidArgument + p}: ${v}`);
                        }
                    }
                    return this;
                }
                function cos(x) {
                    return new this(x).cos();
                }
                function cosh(x) {
                    return new this(x).cosh();
                }
                function clone(obj) {
                    let i;
                    let p;
                    let ps;
                    function Decimal(v) {
                        let e;
                        let i;
                        let t;
                        const x = this;
                        if (!(x instanceof Decimal))
                            return new Decimal(v);
                        x.constructor = Decimal;
                        if (v instanceof Decimal) {
                            x.s = v.s;
                            x.e = v.e;
                            x.d = (v = v.d) ? v.slice() : v;
                            return;
                        }
                        t = typeof v;
                        if (t === 'number') {
                            if (v === 0) {
                                x.s = 1 / v < 0 ? -1 : 1;
                                x.e = 0;
                                x.d = [0];
                                return;
                            }
                            if (v < 0) {
                                v = -v;
                                x.s = -1;
                            }
                            else {
                                x.s = 1;
                            }
                            if (v === ~~v && v < 1e7) {
                                for (e = 0, i = v; i >= 10; i /= 10)
                                    e++;
                                x.e = e;
                                x.d = [v];
                                return;
                            }
                            else if (v * 0 !== 0) {
                                if (!v)
                                    x.s = NaN;
                                x.e = NaN;
                                x.d = null;
                                return;
                            }
                            return parseDecimal(x, v.toString());
                        }
                        else if (t !== 'string') {
                            throw Error(invalidArgument + v);
                        }
                        if (v.charCodeAt(0) === 45) {
                            v = v.slice(1);
                            x.s = -1;
                        }
                        else {
                            x.s = 1;
                        }
                        return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
                    }
                    Decimal.prototype = P;
                    Decimal.ROUND_UP = 0;
                    Decimal.ROUND_DOWN = 1;
                    Decimal.ROUND_CEIL = 2;
                    Decimal.ROUND_FLOOR = 3;
                    Decimal.ROUND_HALF_UP = 4;
                    Decimal.ROUND_HALF_DOWN = 5;
                    Decimal.ROUND_HALF_EVEN = 6;
                    Decimal.ROUND_HALF_CEIL = 7;
                    Decimal.ROUND_HALF_FLOOR = 8;
                    Decimal.EUCLID = 9;
                    Decimal.config = Decimal.set = config;
                    Decimal.clone = clone;
                    Decimal.abs = abs;
                    Decimal.acos = acos;
                    Decimal.acosh = acosh;
                    Decimal.add = add;
                    Decimal.asin = asin;
                    Decimal.asinh = asinh;
                    Decimal.atan = atan;
                    Decimal.atanh = atanh;
                    Decimal.atan2 = atan2;
                    Decimal.cbrt = cbrt;
                    Decimal.ceil = ceil;
                    Decimal.cos = cos;
                    Decimal.cosh = cosh;
                    Decimal.div = div;
                    Decimal.exp = exp;
                    Decimal.floor = floor;
                    Decimal.hypot = hypot;
                    Decimal.ln = ln;
                    Decimal.log = log;
                    Decimal.log10 = log10;
                    Decimal.log2 = log2;
                    Decimal.max = max;
                    Decimal.min = min;
                    Decimal.mod = mod;
                    Decimal.mul = mul;
                    Decimal.pow = pow;
                    Decimal.random = random;
                    Decimal.round = round;
                    Decimal.sign = sign;
                    Decimal.sin = sin;
                    Decimal.sinh = sinh;
                    Decimal.sqrt = sqrt;
                    Decimal.sub = sub;
                    Decimal.tan = tan;
                    Decimal.tanh = tanh;
                    Decimal.trunc = trunc;
                    if (obj === void 0)
                        obj = {};
                    if (obj) {
                        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
                        for (i = 0; i < ps.length;)
                            if (!obj.hasOwnProperty(p = ps[i++]))
                                obj[p] = this[p];
                    }
                    Decimal.config(obj);
                    return Decimal;
                }
                function div(x, y) {
                    return new this(x).div(y);
                }
                function exp(x) {
                    return new this(x).exp();
                }
                function floor(x) {
                    return finalise(x = new this(x), x.e + 1, 3);
                }
                function hypot(...args) {
                    let i;
                    let n;
                    let t = new this(0);
                    external = false;
                    for (i = 0; i < args.length;) {
                        n = new this(args[i++]);
                        if (!n.d) {
                            if (n.s) {
                                external = true;
                                return new this(1 / 0);
                            }
                            t = n;
                        }
                        else if (t.d) {
                            t = t.plus(n.times(n));
                        }
                    }
                    external = true;
                    return t.sqrt();
                }
                function ln(x) {
                    return new this(x).ln();
                }
                function log(x, y) {
                    return new this(x).log(y);
                }
                function log2(x) {
                    return new this(x).log(2);
                }
                function log10(x) {
                    return new this(x).log(10);
                }
                function max(...args) {
                    return maxOrMin(this, args, 'lt');
                }
                function min(...args) {
                    return maxOrMin(this, args, 'gt');
                }
                function mod(x, y) {
                    return new this(x).mod(y);
                }
                function mul(x, y) {
                    return new this(x).mul(y);
                }
                function pow(x, y) {
                    return new this(x).pow(y);
                }
                function random(sd) {
                    let d;
                    let e;
                    let k;
                    let n;
                    let i = 0;
                    const r = new this(1);
                    let rd = [];
                    if (sd === void 0)
                        sd = this.precision;
                    else
                        checkInt32(sd, 1, MAX_DIGITS);
                    k = Math.ceil(sd / LOG_BASE);
                    if (!this.crypto) {
                        for (; i < k;)
                            rd[i++] = Math.random() * 1e7 | 0;
                    }
                    else if (crypto.getRandomValues) {
                        d = crypto.getRandomValues(new Uint32Array(k));
                        for (; i < k;) {
                            n = d[i];
                            if (n >= 4.29e9) {
                                d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
                            }
                            else {
                                rd[i++] = n % 1e7;
                            }
                        }
                    }
                    else if (crypto.randomBytes) {
                        d = crypto.randomBytes(k *= 4);
                        for (; i < k;) {
                            n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);
                            if (n >= 2.14e9) {
                                crypto.randomBytes(4).copy(d, i);
                            }
                            else {
                                rd.push(n % 1e7);
                                i += 4;
                            }
                        }
                        i = k / 4;
                    }
                    else {
                        throw Error(cryptoUnavailable);
                    }
                    k = rd[--i];
                    sd %= LOG_BASE;
                    if (k && sd) {
                        n = mathpow(10, LOG_BASE - sd);
                        rd[i] = (k / n | 0) * n;
                    }
                    for (; rd[i] === 0; i--)
                        rd.pop();
                    if (i < 0) {
                        e = 0;
                        rd = [0];
                    }
                    else {
                        e = -1;
                        for (; rd[0] === 0; e -= LOG_BASE)
                            rd.shift();
                        for (k = 1, n = rd[0]; n >= 10; n /= 10)
                            k++;
                        if (k < LOG_BASE)
                            e -= LOG_BASE - k;
                    }
                    r.e = e;
                    r.d = rd;
                    return r;
                }
                function round(x) {
                    return finalise(x = new this(x), x.e + 1, this.rounding);
                }
                function sign(x) {
                    x = new this(x);
                    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
                }
                function sin(x) {
                    return new this(x).sin();
                }
                function sinh(x) {
                    return new this(x).sinh();
                }
                function sqrt(x) {
                    return new this(x).sqrt();
                }
                function sub(x, y) {
                    return new this(x).sub(y);
                }
                function tan(x) {
                    return new this(x).tan();
                }
                function tanh(x) {
                    return new this(x).tanh();
                }
                function trunc(x) {
                    return finalise(x = new this(x), x.e + 1, 1);
                }
                Decimal = clone(Decimal);
                Decimal['default'] = Decimal.Decimal = Decimal;
                LN10 = new Decimal(LN10);
                PI = new Decimal(PI);
                if (typeof define == 'function' && define.amd) {
                    define(() => {
                        return Decimal;
                    });
                }
                else if (typeof module != 'undefined' && module.exports) {
                    module.exports = Decimal;
                }
                else {
                    if (!globalScope) {
                        globalScope = typeof self != 'undefined' && self && self.self == self
                            ? self : Function('return this')();
                    }
                    noConflict = globalScope.Decimal;
                    Decimal.noConflict = () => {
                        globalScope.Decimal = noConflict;
                        return Decimal;
                    };
                    globalScope.Decimal = Decimal;
                }
            })(this);
        }, {}], 2: [(require, module, exports) => {
            const PS = {};
            ($PS => {
                $PS["Control.Alt"] = $PS["Control.Alt"] || {};
                const exports = $PS["Control.Alt"];
                const Alt = function (Functor0, alt) {
                    this.Functor0 = Functor0;
                    this.alt = alt;
                };
                const alt = dict => {
                    return dict.alt;
                };
                exports["Alt"] = Alt;
                exports["alt"] = alt;
            })(PS);
            ($PS => {
                $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
                const exports = $PS["Control.Alternative"];
                const Alternative = function (Applicative0, Plus1) {
                    this.Applicative0 = Applicative0;
                    this.Plus1 = Plus1;
                };
                exports["Alternative"] = Alternative;
            })(PS);
            (exports => {
                exports.unit = {};
            })(PS["Data.Unit"] = PS["Data.Unit"] || {});
            ($PS => {
                $PS["Data.Unit"] = $PS["Data.Unit"] || {};
                const exports = $PS["Data.Unit"];
                const $foreign = $PS["Data.Unit"];
                exports["unit"] = $foreign.unit;
            })(PS);
            ($PS => {
                $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
                const exports = $PS["Control.Applicative"];
                const Data_Unit = $PS["Data.Unit"];
                const Applicative = function (Apply0, pure) {
                    this.Apply0 = Apply0;
                    this.pure = pure;
                };
                const pure = dict => {
                    return dict.pure;
                };
                const unless = dictApplicative => {
                    return v => {
                        return v1 => {
                            if (!v) {
                                return v1;
                            }
                            ;
                            if (v) {
                                return pure(dictApplicative)(Data_Unit.unit);
                            }
                            ;
                            throw new Error(`Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): ${[v.constructor.name, v1.constructor.name]}`);
                        };
                    };
                };
                const when = dictApplicative => {
                    return v => {
                        return v1 => {
                            if (v) {
                                return v1;
                            }
                            ;
                            if (!v) {
                                return pure(dictApplicative)(Data_Unit.unit);
                            }
                            ;
                            throw new Error(`Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): ${[v.constructor.name, v1.constructor.name]}`);
                        };
                    };
                };
                exports["Applicative"] = Applicative;
                exports["pure"] = pure;
                exports["unless"] = unless;
                exports["when"] = when;
            })(PS);
            (exports => {
                exports.arrayApply = fs => {
                    return xs => {
                        const l = fs.length;
                        const k = xs.length;
                        const result = new Array(l * k);
                        let n = 0;
                        for (let i = 0; i < l; i++) {
                            const f = fs[i];
                            for (let j = 0; j < k; j++) {
                                result[n++] = f(xs[j]);
                            }
                        }
                        return result;
                    };
                };
            })(PS["Control.Apply"] = PS["Control.Apply"] || {});
            ($PS => {
                $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
                const exports = $PS["Control.Semigroupoid"];
                const Semigroupoid = function (compose) {
                    this.compose = compose;
                };
                const semigroupoidFn = new Semigroupoid(f => {
                    return g => {
                        return x => {
                            return f(g(x));
                        };
                    };
                });
                const compose = dict => {
                    return dict.compose;
                };
                exports["compose"] = compose;
                exports["semigroupoidFn"] = semigroupoidFn;
            })(PS);
            ($PS => {
                $PS["Control.Category"] = $PS["Control.Category"] || {};
                const exports = $PS["Control.Category"];
                const Control_Semigroupoid = $PS["Control.Semigroupoid"];
                const Category = function (Semigroupoid0, identity) {
                    this.Semigroupoid0 = Semigroupoid0;
                    this.identity = identity;
                };
                const identity = dict => {
                    return dict.identity;
                };
                const categoryFn = new Category(() => {
                    return Control_Semigroupoid.semigroupoidFn;
                }, x => {
                    return x;
                });
                exports["identity"] = identity;
                exports["categoryFn"] = categoryFn;
            })(PS);
            ($PS => {
                $PS["Data.Function"] = $PS["Data.Function"] || {};
                const exports = $PS["Data.Function"];
                const on = f => {
                    return g => {
                        return x => {
                            return y => {
                                return f(g(x))(g(y));
                            };
                        };
                    };
                };
                const flip = f => {
                    return b => {
                        return a => {
                            return f(a)(b);
                        };
                    };
                };
                const $$const = a => {
                    return v => {
                        return a;
                    };
                };
                exports["flip"] = flip;
                exports["const"] = $$const;
                exports["on"] = on;
            })(PS);
            (exports => {
                exports.arrayMap = f => {
                    return arr => {
                        const l = arr.length;
                        const result = new Array(l);
                        for (let i = 0; i < l; i++) {
                            result[i] = f(arr[i]);
                        }
                        return result;
                    };
                };
            })(PS["Data.Functor"] = PS["Data.Functor"] || {});
            ($PS => {
                $PS["Data.Functor"] = $PS["Data.Functor"] || {};
                const exports = $PS["Data.Functor"];
                const $foreign = $PS["Data.Functor"];
                const Control_Semigroupoid = $PS["Control.Semigroupoid"];
                const Data_Function = $PS["Data.Function"];
                const Data_Unit = $PS["Data.Unit"];
                const Functor = function (map) {
                    this.map = map;
                };
                const map = dict => {
                    return dict.map;
                };
                const $$void = dictFunctor => {
                    return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
                };
                const voidLeft = dictFunctor => {
                    return f => {
                        return x => {
                            return map(dictFunctor)(Data_Function["const"](x))(f);
                        };
                    };
                };
                const functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
                const functorArray = new Functor($foreign.arrayMap);
                exports["Functor"] = Functor;
                exports["map"] = map;
                exports["void"] = $$void;
                exports["voidLeft"] = voidLeft;
                exports["functorFn"] = functorFn;
                exports["functorArray"] = functorArray;
            })(PS);
            ($PS => {
                $PS["Control.Apply"] = $PS["Control.Apply"] || {};
                const exports = $PS["Control.Apply"];
                const $foreign = $PS["Control.Apply"];
                const Control_Category = $PS["Control.Category"];
                const Data_Function = $PS["Data.Function"];
                const Data_Functor = $PS["Data.Functor"];
                const Apply = function (Functor0, apply) {
                    this.Functor0 = Functor0;
                    this.apply = apply;
                };
                const applyArray = new Apply(() => {
                    return Data_Functor.functorArray;
                }, $foreign.arrayApply);
                const apply = dict => {
                    return dict.apply;
                };
                const applyFirst = dictApply => {
                    return a => {
                        return b => {
                            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
                        };
                    };
                };
                const applySecond = dictApply => {
                    return a => {
                        return b => {
                            return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
                        };
                    };
                };
                const lift2 = dictApply => {
                    return f => {
                        return a => {
                            return b => {
                                return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
                            };
                        };
                    };
                };
                exports["Apply"] = Apply;
                exports["apply"] = apply;
                exports["applyFirst"] = applyFirst;
                exports["applySecond"] = applySecond;
                exports["lift2"] = lift2;
                exports["applyArray"] = applyArray;
            })(PS);
            (exports => {
                exports.arrayBind = arr => {
                    return f => {
                        const result = [];
                        for (let i = 0, l = arr.length; i < l; i++) {
                            Array.prototype.push.apply(result, f(arr[i]));
                        }
                        return result;
                    };
                };
            })(PS["Control.Bind"] = PS["Control.Bind"] || {});
            ($PS => {
                $PS["Control.Bind"] = $PS["Control.Bind"] || {};
                const exports = $PS["Control.Bind"];
                const $foreign = $PS["Control.Bind"];
                const Control_Apply = $PS["Control.Apply"];
                const Data_Function = $PS["Data.Function"];
                const Discard = function (discard) {
                    this.discard = discard;
                };
                const Bind = function (Apply0, bind) {
                    this.Apply0 = Apply0;
                    this.bind = bind;
                };
                const discard = dict => {
                    return dict.discard;
                };
                const bindArray = new Bind(() => {
                    return Control_Apply.applyArray;
                }, $foreign.arrayBind);
                const bind = dict => {
                    return dict.bind;
                };
                const bindFlipped = dictBind => {
                    return Data_Function.flip(bind(dictBind));
                };
                const composeKleisli = dictBind => {
                    return f => {
                        return g => {
                            return a => {
                                return bind(dictBind)(f(a))(g);
                            };
                        };
                    };
                };
                const discardUnit = new Discard(dictBind => {
                    return bind(dictBind);
                });
                exports["Bind"] = Bind;
                exports["bind"] = bind;
                exports["bindFlipped"] = bindFlipped;
                exports["discard"] = discard;
                exports["composeKleisli"] = composeKleisli;
                exports["bindArray"] = bindArray;
                exports["discardUnit"] = discardUnit;
            })(PS);
            ($PS => {
                $PS["Control.Lazy"] = $PS["Control.Lazy"] || {};
                const exports = $PS["Control.Lazy"];
                const Lazy = function (defer) {
                    this.defer = defer;
                };
                const defer = dict => {
                    return dict.defer;
                };
                const fix = dictLazy => {
                    return f => {
                        const go = defer(dictLazy)(v => {
                            return f(go);
                        });
                        return go;
                    };
                };
                exports["defer"] = defer;
                exports["Lazy"] = Lazy;
                exports["fix"] = fix;
            })(PS);
            ($PS => {
                $PS["Control.Monad"] = $PS["Control.Monad"] || {};
                const exports = $PS["Control.Monad"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Bind = $PS["Control.Bind"];
                const Monad = function (Applicative0, Bind1) {
                    this.Applicative0 = Applicative0;
                    this.Bind1 = Bind1;
                };
                const ap = dictMonad => {
                    return f => {
                        return a => {
                            return Control_Bind.bind(dictMonad.Bind1())(f)(f$prime => {
                                return Control_Bind.bind(dictMonad.Bind1())(a)(a$prime => {
                                    return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                                });
                            });
                        };
                    };
                };
                exports["Monad"] = Monad;
                exports["ap"] = ap;
            })(PS);
            ($PS => {
                $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
                const exports = $PS["Control.Monad.Error.Class"];
                const MonadThrow = function (Monad0, throwError) {
                    this.Monad0 = Monad0;
                    this.throwError = throwError;
                };
                const throwError = dict => {
                    return dict.throwError;
                };
                exports["throwError"] = throwError;
                exports["MonadThrow"] = MonadThrow;
            })(PS);
            ($PS => {
                $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
                const exports = $PS["Data.Tuple"];
                const Tuple = (() => {
                    function Tuple(value0, value1) {
                        this.value0 = value0;
                        this.value1 = value1;
                    }
                    ;
                    Tuple.create = value0 => {
                        return value1 => {
                            return new Tuple(value0, value1);
                        };
                    };
                    return Tuple;
                })();
                const snd = ({ value1 }) => {
                    return value1;
                };
                const fst = ({ value0 }) => {
                    return value0;
                };
                exports["Tuple"] = Tuple;
                exports["fst"] = fst;
                exports["snd"] = snd;
            })(PS);
            ($PS => {
                $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
                const exports = $PS["Control.Monad.State.Class"];
                const Data_Tuple = $PS["Data.Tuple"];
                const Data_Unit = $PS["Data.Unit"];
                const MonadState = function (Monad0, state) {
                    this.Monad0 = Monad0;
                    this.state = state;
                };
                const state = dict => {
                    return dict.state;
                };
                const modify_ = dictMonadState => {
                    return f => {
                        return state(dictMonadState)(s => {
                            return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
                        });
                    };
                };
                const gets = dictMonadState => {
                    return f => {
                        return state(dictMonadState)(s => {
                            return new Data_Tuple.Tuple(f(s), s);
                        });
                    };
                };
                exports["state"] = state;
                exports["MonadState"] = MonadState;
                exports["gets"] = gets;
                exports["modify_"] = modify_;
            })(PS);
            ($PS => {
                $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
                const exports = $PS["Control.Monad.Trans.Class"];
                const MonadTrans = function (lift) {
                    this.lift = lift;
                };
                const lift = dict => {
                    return dict.lift;
                };
                exports["lift"] = lift;
                exports["MonadTrans"] = MonadTrans;
            })(PS);
            ($PS => {
                $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
                const exports = $PS["Data.Bifunctor"];
                const Control_Category = $PS["Control.Category"];
                const Bifunctor = function (bimap) {
                    this.bimap = bimap;
                };
                const bimap = dict => {
                    return dict.bimap;
                };
                const lmap = dictBifunctor => {
                    return f => {
                        return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
                    };
                };
                exports["Bifunctor"] = Bifunctor;
                exports["lmap"] = lmap;
            })(PS);
            ($PS => {
                $PS["Data.Either"] = $PS["Data.Either"] || {};
                const exports = $PS["Data.Either"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Apply = $PS["Control.Apply"];
                const Control_Bind = $PS["Control.Bind"];
                const Control_Monad = $PS["Control.Monad"];
                const Data_Bifunctor = $PS["Data.Bifunctor"];
                const Data_Function = $PS["Data.Function"];
                const Data_Functor = $PS["Data.Functor"];
                const Left = (() => {
                    function Left(value0) {
                        this.value0 = value0;
                    }
                    ;
                    Left.create = value0 => {
                        return new Left(value0);
                    };
                    return Left;
                })();
                const Right = (() => {
                    function Right(value0) {
                        this.value0 = value0;
                    }
                    ;
                    Right.create = value0 => {
                        return new Right(value0);
                    };
                    return Right;
                })();
                const functorEither = new Data_Functor.Functor(f => {
                    return m => {
                        if (m instanceof Left) {
                            return new Left(m.value0);
                        }
                        ;
                        if (m instanceof Right) {
                            return new Right(f(m.value0));
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): ${[m.constructor.name]}`);
                    };
                });
                const either = v => {
                    return v1 => {
                        return v2 => {
                            if (v2 instanceof Left) {
                                return v(v2.value0);
                            }
                            ;
                            if (v2 instanceof Right) {
                                return v1(v2.value0);
                            }
                            ;
                            throw new Error(`Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): ${[v.constructor.name, v1.constructor.name, v2.constructor.name]}`);
                        };
                    };
                };
                const isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
                const bifunctorEither = new Data_Bifunctor.Bifunctor(v => {
                    return v1 => {
                        return v2 => {
                            if (v2 instanceof Left) {
                                return new Left(v(v2.value0));
                            }
                            ;
                            if (v2 instanceof Right) {
                                return new Right(v1(v2.value0));
                            }
                            ;
                            throw new Error(`Failed pattern match at Data.Either (line 46, column 1 - line 48, column 36): ${[v.constructor.name, v1.constructor.name, v2.constructor.name]}`);
                        };
                    };
                });
                const applyEither = new Control_Apply.Apply(() => {
                    return functorEither;
                }, v => {
                    return v1 => {
                        if (v instanceof Left) {
                            return new Left(v.value0);
                        }
                        ;
                        if (v instanceof Right) {
                            return Data_Functor.map(functorEither)(v.value0)(v1);
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.Either (line 82, column 1 - line 84, column 30): ${[v.constructor.name, v1.constructor.name]}`);
                    };
                });
                const bindEither = new Control_Bind.Bind(() => {
                    return applyEither;
                }, either(e => {
                    return v => {
                        return new Left(e);
                    };
                })(a => {
                    return f => {
                        return f(a);
                    };
                }));
                const applicativeEither = new Control_Applicative.Applicative(() => {
                    return applyEither;
                }, Right.create);
                const monadEither = new Control_Monad.Monad(() => {
                    return applicativeEither;
                }, () => {
                    return bindEither;
                });
                exports["Left"] = Left;
                exports["Right"] = Right;
                exports["either"] = either;
                exports["isRight"] = isRight;
                exports["functorEither"] = functorEither;
                exports["bifunctorEither"] = bifunctorEither;
                exports["applicativeEither"] = applicativeEither;
                exports["bindEither"] = bindEither;
                exports["monadEither"] = monadEither;
            })(PS);
            ($PS => {
                $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
                const exports = $PS["Control.Monad.Except.Trans"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Apply = $PS["Control.Apply"];
                const Control_Bind = $PS["Control.Bind"];
                const Control_Monad = $PS["Control.Monad"];
                const Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
                const Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
                const Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
                const Data_Either = $PS["Data.Either"];
                const Data_Functor = $PS["Data.Functor"];
                const ExceptT = x => {
                    return x;
                };
                const runExceptT = v => {
                    return v;
                };
                const monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(dictMonad => {
                    return m => {
                        return Control_Bind.bind(dictMonad.Bind1())(m)(a => {
                            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(a));
                        });
                    };
                });
                const mapExceptT = f => {
                    return v => {
                        return f(v);
                    };
                };
                const functorExceptT = dictFunctor => {
                    return new Data_Functor.Functor(f => {
                        return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
                    });
                };
                const monadExceptT = dictMonad => {
                    return new Control_Monad.Monad(() => {
                        return applicativeExceptT(dictMonad);
                    }, () => {
                        return bindExceptT(dictMonad);
                    });
                };
                var bindExceptT = dictMonad => {
                    return new Control_Bind.Bind(() => {
                        return applyExceptT(dictMonad);
                    }, v => {
                        return k => {
                            return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either((() => {
                                const $90 = Control_Applicative.pure(dictMonad.Applicative0());
                                return $91 => {
                                    return $90(Data_Either.Left.create($91));
                                };
                            })())(a => {
                                const v1 = k(a);
                                return v1;
                            }));
                        };
                    });
                };
                var applyExceptT = dictMonad => {
                    return new Control_Apply.Apply(() => {
                        return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
                    }, Control_Monad.ap(monadExceptT(dictMonad)));
                };
                var applicativeExceptT = dictMonad => {
                    return new Control_Applicative.Applicative(() => {
                        return applyExceptT(dictMonad);
                    }, (() => {
                        const $92 = Control_Applicative.pure(dictMonad.Applicative0());
                        return $93 => {
                            return ExceptT($92(Data_Either.Right.create($93)));
                        };
                    })());
                };
                const monadStateExceptT = dictMonadState => {
                    return new Control_Monad_State_Class.MonadState(() => {
                        return monadExceptT(dictMonadState.Monad0());
                    }, f => {
                        return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
                    });
                };
                const monadThrowExceptT = dictMonad => {
                    return new Control_Monad_Error_Class.MonadThrow(() => {
                        return monadExceptT(dictMonad);
                    }, (() => {
                        const $102 = Control_Applicative.pure(dictMonad.Applicative0());
                        return $103 => {
                            return ExceptT($102(Data_Either.Left.create($103)));
                        };
                    })());
                };
                exports["ExceptT"] = ExceptT;
                exports["runExceptT"] = runExceptT;
                exports["functorExceptT"] = functorExceptT;
                exports["applyExceptT"] = applyExceptT;
                exports["applicativeExceptT"] = applicativeExceptT;
                exports["bindExceptT"] = bindExceptT;
                exports["monadThrowExceptT"] = monadThrowExceptT;
                exports["monadStateExceptT"] = monadStateExceptT;
            })(PS);
            ($PS => {
                $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
                const exports = $PS["Control.Monad.State.Trans"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Apply = $PS["Control.Apply"];
                const Control_Bind = $PS["Control.Bind"];
                const Control_Lazy = $PS["Control.Lazy"];
                const Control_Monad = $PS["Control.Monad"];
                const Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_Tuple = $PS["Data.Tuple"];
                const Data_Unit = $PS["Data.Unit"];
                const StateT = x => {
                    return x;
                };
                const runStateT = v => {
                    return v;
                };
                const lazyStateT = new Control_Lazy.Lazy(f => {
                    return s => {
                        const v = f(Data_Unit.unit);
                        return v(s);
                    };
                });
                const functorStateT = dictFunctor => {
                    return new Data_Functor.Functor(f => {
                        return v => {
                            return s => {
                                return Data_Functor.map(dictFunctor)(({ value0, value1 }) => {
                                    return new Data_Tuple.Tuple(f(value0), value1);
                                })(v(s));
                            };
                        };
                    });
                };
                const evalStateT = dictFunctor => {
                    return v => {
                        return s => {
                            return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
                        };
                    };
                };
                const monadStateT = dictMonad => {
                    return new Control_Monad.Monad(() => {
                        return applicativeStateT(dictMonad);
                    }, () => {
                        return bindStateT(dictMonad);
                    });
                };
                var bindStateT = dictMonad => {
                    return new Control_Bind.Bind(() => {
                        return applyStateT(dictMonad);
                    }, v => {
                        return f => {
                            return s => {
                                return Control_Bind.bind(dictMonad.Bind1())(v(s))(({ value0, value1 }) => {
                                    const v3 = f(value0);
                                    return v3(value1);
                                });
                            };
                        };
                    });
                };
                var applyStateT = dictMonad => {
                    return new Control_Apply.Apply(() => {
                        return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
                    }, Control_Monad.ap(monadStateT(dictMonad)));
                };
                var applicativeStateT = dictMonad => {
                    return new Control_Applicative.Applicative(() => {
                        return applyStateT(dictMonad);
                    }, a => {
                        return s => {
                            return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
                        };
                    });
                };
                const monadStateStateT = dictMonad => {
                    return new Control_Monad_State_Class.MonadState(() => {
                        return monadStateT(dictMonad);
                    }, f => {
                        return StateT((() => {
                            const $112 = Control_Applicative.pure(dictMonad.Applicative0());
                            return $113 => {
                                return $112(f($113));
                            };
                        })());
                    });
                };
                exports["StateT"] = StateT;
                exports["runStateT"] = runStateT;
                exports["evalStateT"] = evalStateT;
                exports["functorStateT"] = functorStateT;
                exports["monadStateT"] = monadStateT;
                exports["lazyStateT"] = lazyStateT;
                exports["monadStateStateT"] = monadStateStateT;
            })(PS);
            ($PS => {
                $PS["Control.Plus"] = $PS["Control.Plus"] || {};
                const exports = $PS["Control.Plus"];
                const Plus = function (Alt0, empty) {
                    this.Alt0 = Alt0;
                    this.empty = empty;
                };
                const empty = dict => {
                    return dict.empty;
                };
                exports["Plus"] = Plus;
                exports["empty"] = empty;
            })(PS);
            (exports => {
                exports.fromFoldableImpl = (() => {
                    function Cons(head, tail) {
                        this.head = head;
                        this.tail = tail;
                    }
                    const emptyList = {};
                    function curryCons(head) {
                        return tail => {
                            return new Cons(head, tail);
                        };
                    }
                    function listToArray(list) {
                        const result = [];
                        let count = 0;
                        let xs = list;
                        while (xs !== emptyList) {
                            result[count++] = xs.head;
                            xs = xs.tail;
                        }
                        return result;
                    }
                    return foldr => {
                        return xs => {
                            return listToArray(foldr(curryCons)(emptyList)(xs));
                        };
                    };
                })();
                exports.length = ({ length }) => {
                    return length;
                };
                exports.cons = e => {
                    return l => {
                        return [e].concat(l);
                    };
                };
                exports["uncons'"] = empty => {
                    return next => {
                        return xs => {
                            return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
                        };
                    };
                };
                exports.findIndexImpl = just => {
                    return nothing => {
                        return f => {
                            return xs => {
                                for (let i = 0, l = xs.length; i < l; i++) {
                                    if (f(xs[i]))
                                        return just(i);
                                }
                                return nothing;
                            };
                        };
                    };
                };
                exports.sortImpl = f => {
                    return l => {
                        return l.slice().sort((x, y) => {
                            return f(x)(y);
                        });
                    };
                };
                exports.zipWith = f => {
                    return xs => {
                        return ys => {
                            const l = xs.length < ys.length ? xs.length : ys.length;
                            const result = new Array(l);
                            for (let i = 0; i < l; i++) {
                                result[i] = f(xs[i])(ys[i]);
                            }
                            return result;
                        };
                    };
                };
            })(PS["Data.Array"] = PS["Data.Array"] || {});
            (exports => {
                const refEq = r1 => {
                    return r2 => {
                        return r1 === r2;
                    };
                };
                exports.eqBooleanImpl = refEq;
                exports.eqIntImpl = refEq;
                exports.eqNumberImpl = refEq;
                exports.eqCharImpl = refEq;
                exports.eqStringImpl = refEq;
            })(PS["Data.Eq"] = PS["Data.Eq"] || {});
            ($PS => {
                $PS["Data.Eq"] = $PS["Data.Eq"] || {};
                const exports = $PS["Data.Eq"];
                const $foreign = $PS["Data.Eq"];
                const Eq1 = function (eq1) {
                    this.eq1 = eq1;
                };
                const Eq = function (eq) {
                    this.eq = eq;
                };
                const eqString = new Eq($foreign.eqStringImpl);
                const eqNumber = new Eq($foreign.eqNumberImpl);
                const eqInt = new Eq($foreign.eqIntImpl);
                const eqChar = new Eq($foreign.eqCharImpl);
                const eqBoolean = new Eq($foreign.eqBooleanImpl);
                const eq1 = dict => {
                    return dict.eq1;
                };
                const eq = dict => {
                    return dict.eq;
                };
                const notEq = dictEq => {
                    return x => {
                        return y => {
                            return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
                        };
                    };
                };
                exports["Eq"] = Eq;
                exports["eq"] = eq;
                exports["notEq"] = notEq;
                exports["Eq1"] = Eq1;
                exports["eq1"] = eq1;
                exports["eqBoolean"] = eqBoolean;
                exports["eqInt"] = eqInt;
                exports["eqNumber"] = eqNumber;
                exports["eqChar"] = eqChar;
                exports["eqString"] = eqString;
            })(PS);
            (exports => {
                exports.foldrArray = f => {
                    return init => {
                        return xs => {
                            let acc = init;
                            const len = xs.length;
                            for (let i = len - 1; i >= 0; i--) {
                                acc = f(xs[i])(acc);
                            }
                            return acc;
                        };
                    };
                };
                exports.foldlArray = f => {
                    return init => {
                        return xs => {
                            let acc = init;
                            const len = xs.length;
                            for (let i = 0; i < len; i++) {
                                acc = f(acc)(xs[i]);
                            }
                            return acc;
                        };
                    };
                };
            })(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
            (exports => {
                exports.boolConj = b1 => {
                    return b2 => {
                        return b1 && b2;
                    };
                };
                exports.boolDisj = b1 => {
                    return b2 => {
                        return b1 || b2;
                    };
                };
                exports.boolNot = b => {
                    return !b;
                };
            })(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
            ($PS => {
                $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
                const exports = $PS["Data.HeytingAlgebra"];
                const $foreign = $PS["Data.HeytingAlgebra"];
                const HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
                    this.conj = conj;
                    this.disj = disj;
                    this.ff = ff;
                    this.implies = implies;
                    this.not = not;
                    this.tt = tt;
                };
                const not = dict => {
                    return dict.not;
                };
                const ff = dict => {
                    return dict.ff;
                };
                const disj = dict => {
                    return dict.disj;
                };
                const heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, a => {
                    return b => {
                        return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
                    };
                }, $foreign.boolNot, true);
                exports["ff"] = ff;
                exports["disj"] = disj;
                exports["not"] = not;
                exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
            })(PS);
            (exports => {
                exports.concatString = s1 => {
                    return s2 => {
                        return s1 + s2;
                    };
                };
                exports.concatArray = xs => {
                    return ys => {
                        if (xs.length === 0)
                            return ys;
                        if (ys.length === 0)
                            return xs;
                        return xs.concat(ys);
                    };
                };
            })(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
            ($PS => {
                $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
                const exports = $PS["Data.Semigroup"];
                const $foreign = $PS["Data.Semigroup"];
                const Semigroup = function (append) {
                    this.append = append;
                };
                const semigroupString = new Semigroup($foreign.concatString);
                const semigroupArray = new Semigroup($foreign.concatArray);
                const append = dict => {
                    return dict.append;
                };
                exports["Semigroup"] = Semigroup;
                exports["append"] = append;
                exports["semigroupString"] = semigroupString;
                exports["semigroupArray"] = semigroupArray;
            })(PS);
            ($PS => {
                $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
                const exports = $PS["Data.Monoid"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Monoid = function (Semigroup0, mempty) {
                    this.Semigroup0 = Semigroup0;
                    this.mempty = mempty;
                };
                const monoidString = new Monoid(() => {
                    return Data_Semigroup.semigroupString;
                }, "");
                const monoidArray = new Monoid(() => {
                    return Data_Semigroup.semigroupArray;
                }, []);
                const mempty = dict => {
                    return dict.mempty;
                };
                exports["Monoid"] = Monoid;
                exports["mempty"] = mempty;
                exports["monoidString"] = monoidString;
                exports["monoidArray"] = monoidArray;
            })(PS);
            ($PS => {
                $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
                const exports = $PS["Data.Monoid.Disj"];
                const Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
                const Data_Monoid = $PS["Data.Monoid"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Disj = x => {
                    return x;
                };
                const semigroupDisj = dictHeytingAlgebra => {
                    return new Data_Semigroup.Semigroup(v => {
                        return v1 => {
                            return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
                        };
                    });
                };
                const monoidDisj = dictHeytingAlgebra => {
                    return new Data_Monoid.Monoid(() => {
                        return semigroupDisj(dictHeytingAlgebra);
                    }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
                };
                exports["Disj"] = Disj;
                exports["monoidDisj"] = monoidDisj;
            })(PS);
            (exports => {
                exports.intAdd = x => {
                    return y => {
                        return x + y | 0;
                    };
                };
                exports.intMul = x => {
                    return y => {
                        return x * y | 0;
                    };
                };
                exports.numAdd = n1 => {
                    return n2 => {
                        return n1 + n2;
                    };
                };
                exports.numMul = n1 => {
                    return n2 => {
                        return n1 * n2;
                    };
                };
            })(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
            ($PS => {
                $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
                const exports = $PS["Data.Semiring"];
                const $foreign = $PS["Data.Semiring"];
                const Semiring = function (add, mul, one, zero) {
                    this.add = add;
                    this.mul = mul;
                    this.one = one;
                    this.zero = zero;
                };
                const zero = dict => {
                    return dict.zero;
                };
                const semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
                const semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
                const one = dict => {
                    return dict.one;
                };
                const mul = dict => {
                    return dict.mul;
                };
                const add = dict => {
                    return dict.add;
                };
                exports["Semiring"] = Semiring;
                exports["add"] = add;
                exports["zero"] = zero;
                exports["mul"] = mul;
                exports["one"] = one;
                exports["semiringInt"] = semiringInt;
                exports["semiringNumber"] = semiringNumber;
            })(PS);
            ($PS => {
                $PS["Data.Monoid.Additive"] = $PS["Data.Monoid.Additive"] || {};
                const exports = $PS["Data.Monoid.Additive"];
                const Data_Monoid = $PS["Data.Monoid"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Data_Semiring = $PS["Data.Semiring"];
                const Additive = x => {
                    return x;
                };
                const semigroupAdditive = dictSemiring => {
                    return new Data_Semigroup.Semigroup(v => {
                        return v1 => {
                            return Data_Semiring.add(dictSemiring)(v)(v1);
                        };
                    });
                };
                const monoidAdditive = dictSemiring => {
                    return new Data_Monoid.Monoid(() => {
                        return semigroupAdditive(dictSemiring);
                    }, Data_Semiring.zero(dictSemiring));
                };
                exports["Additive"] = Additive;
                exports["monoidAdditive"] = monoidAdditive;
            })(PS);
            ($PS => {
                $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
                const exports = $PS["Data.Newtype"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_Monoid_Additive = $PS["Data.Monoid.Additive"];
                const Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
                const Newtype = function (unwrap, wrap) {
                    this.unwrap = unwrap;
                    this.wrap = wrap;
                };
                const wrap = dict => {
                    return dict.wrap;
                };
                const unwrap = dict => {
                    return dict.unwrap;
                };
                const un = dictNewtype => {
                    return v => {
                        return unwrap(dictNewtype);
                    };
                };
                const newtypeDisj = new Newtype(v => {
                    return v;
                }, Data_Monoid_Disj.Disj);
                const newtypeAdditive = new Newtype(v => {
                    return v;
                }, Data_Monoid_Additive.Additive);
                const alaF = dictFunctor => {
                    return dictFunctor1 => {
                        return dictNewtype => {
                            return dictNewtype1 => {
                                return v => {
                                    return f => {
                                        const $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                                        const $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                                        return $98 => {
                                            return $96(f($97($98)));
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
                exports["unwrap"] = unwrap;
                exports["wrap"] = wrap;
                exports["Newtype"] = Newtype;
                exports["un"] = un;
                exports["alaF"] = alaF;
                exports["newtypeAdditive"] = newtypeAdditive;
                exports["newtypeDisj"] = newtypeDisj;
            })(PS);
            ($PS => {
                $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
                const exports = $PS["Data.Foldable"];
                const $foreign = $PS["Data.Foldable"];
                const Control_Alt = $PS["Control.Alt"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Apply = $PS["Control.Apply"];
                const Control_Bind = $PS["Control.Bind"];
                const Control_Category = $PS["Control.Category"];
                const Control_Plus = $PS["Control.Plus"];
                const Data_Eq = $PS["Data.Eq"];
                const Data_Function = $PS["Data.Function"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
                const Data_Monoid = $PS["Data.Monoid"];
                const Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
                const Data_Newtype = $PS["Data.Newtype"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Data_Semiring = $PS["Data.Semiring"];
                const Data_Unit = $PS["Data.Unit"];
                const Foldable = function (foldMap, foldl, foldr) {
                    this.foldMap = foldMap;
                    this.foldl = foldl;
                    this.foldr = foldr;
                };
                const foldr = dict => {
                    return dict.foldr;
                };
                const oneOf = dictFoldable => {
                    return dictPlus => {
                        return foldr(dictFoldable)(Control_Alt.alt(dictPlus.Alt0()))(Control_Plus.empty(dictPlus));
                    };
                };
                const traverse_ = dictApplicative => {
                    return dictFoldable => {
                        return f => {
                            return foldr(dictFoldable)((() => {
                                const $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                                return $198 => {
                                    return $197(f($198));
                                };
                            })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
                        };
                    };
                };
                const foldl = dict => {
                    return dict.foldl;
                };
                const intercalate = dictFoldable => {
                    return dictMonoid => {
                        return sep => {
                            return xs => {
                                const go = ({ init, acc }) => {
                                    return x => {
                                        if (init) {
                                            return {
                                                init: false,
                                                acc: x
                                            };
                                        }
                                        ;
                                        return {
                                            init: false,
                                            acc: Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                                        };
                                    };
                                };
                                return (foldl(dictFoldable)(go)({
                                    init: true,
                                    acc: Data_Monoid.mempty(dictMonoid)
                                })(xs)).acc;
                            };
                        };
                    };
                };
                const product = dictFoldable => {
                    return dictSemiring => {
                        return foldl(dictFoldable)(Data_Semiring.mul(dictSemiring))(Data_Semiring.one(dictSemiring));
                    };
                };
                const sum = dictFoldable => {
                    return dictSemiring => {
                        return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
                    };
                };
                const foldMapDefaultR = dictFoldable => {
                    return dictMonoid => {
                        return f => {
                            return foldr(dictFoldable)(x => {
                                return acc => {
                                    return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                                };
                            })(Data_Monoid.mempty(dictMonoid));
                        };
                    };
                };
                const foldableArray = new Foldable(dictMonoid => {
                    return foldMapDefaultR(foldableArray)(dictMonoid);
                }, $foreign.foldlArray, $foreign.foldrArray);
                const foldMap = dict => {
                    return dict.foldMap;
                };
                const foldM = dictFoldable => {
                    return dictMonad => {
                        return f => {
                            return a0 => {
                                return foldl(dictFoldable)(ma => {
                                    return b => {
                                        return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f)(b));
                                    };
                                })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
                            };
                        };
                    };
                };
                const fold = dictFoldable => {
                    return dictMonoid => {
                        return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
                    };
                };
                const any = dictFoldable => {
                    return dictHeytingAlgebra => {
                        return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
                    };
                };
                const elem = dictFoldable => {
                    return dictEq => {
                        const $204 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
                        const $205 = Data_Eq.eq(dictEq);
                        return $206 => {
                            return $204($205($206));
                        };
                    };
                };
                const notElem = dictFoldable => {
                    return dictEq => {
                        return x => {
                            const $207 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                            const $208 = elem(dictFoldable)(dictEq)(x);
                            return $209 => {
                                return $207($208($209));
                            };
                        };
                    };
                };
                exports["Foldable"] = Foldable;
                exports["foldr"] = foldr;
                exports["foldl"] = foldl;
                exports["foldMap"] = foldMap;
                exports["fold"] = fold;
                exports["foldM"] = foldM;
                exports["traverse_"] = traverse_;
                exports["oneOf"] = oneOf;
                exports["intercalate"] = intercalate;
                exports["sum"] = sum;
                exports["product"] = product;
                exports["elem"] = elem;
                exports["notElem"] = notElem;
                exports["foldableArray"] = foldableArray;
            })(PS);
            ($PS => {
                $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
                const exports = $PS["Data.Maybe"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Apply = $PS["Control.Apply"];
                const Control_Bind = $PS["Control.Bind"];
                const Control_Category = $PS["Control.Category"];
                const Data_Function = $PS["Data.Function"];
                const Data_Functor = $PS["Data.Functor"];
                const Nothing = (() => {
                    function Nothing() {
                    }
                    ;
                    Nothing.value = new Nothing();
                    return Nothing;
                })();
                const Just = (() => {
                    function Just(value0) {
                        this.value0 = value0;
                    }
                    ;
                    Just.create = value0 => {
                        return new Just(value0);
                    };
                    return Just;
                })();
                const maybe = v => {
                    return v1 => {
                        return v2 => {
                            if (v2 instanceof Nothing) {
                                return v;
                            }
                            ;
                            if (v2 instanceof Just) {
                                return v1(v2.value0);
                            }
                            ;
                            throw new Error(`Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): ${[v.constructor.name, v1.constructor.name, v2.constructor.name]}`);
                        };
                    };
                };
                const isNothing = maybe(true)(Data_Function["const"](false));
                const isJust = maybe(false)(Data_Function["const"](true));
                const functorMaybe = new Data_Functor.Functor(v => {
                    return v1 => {
                        if (v1 instanceof Just) {
                            return new Just(v(v1.value0));
                        }
                        ;
                        return Nothing.value;
                    };
                });
                const fromMaybe = a => {
                    return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
                };
                const fromJust = dictPartial => {
                    return v => {
                        if (v instanceof Just) {
                            return v.value0;
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): ${[v.constructor.name]}`);
                    };
                };
                const applyMaybe = new Control_Apply.Apply(() => {
                    return functorMaybe;
                }, v => {
                    return v1 => {
                        if (v instanceof Just) {
                            return Data_Functor.map(functorMaybe)(v.value0)(v1);
                        }
                        ;
                        if (v instanceof Nothing) {
                            return Nothing.value;
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): ${[v.constructor.name, v1.constructor.name]}`);
                    };
                });
                const bindMaybe = new Control_Bind.Bind(() => {
                    return applyMaybe;
                }, v => {
                    return v1 => {
                        if (v instanceof Just) {
                            return v1(v.value0);
                        }
                        ;
                        if (v instanceof Nothing) {
                            return Nothing.value;
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): ${[v.constructor.name, v1.constructor.name]}`);
                    };
                });
                const applicativeMaybe = new Control_Applicative.Applicative(() => {
                    return applyMaybe;
                }, Just.create);
                exports["Nothing"] = Nothing;
                exports["Just"] = Just;
                exports["maybe"] = maybe;
                exports["fromMaybe"] = fromMaybe;
                exports["isJust"] = isJust;
                exports["isNothing"] = isNothing;
                exports["fromJust"] = fromJust;
                exports["functorMaybe"] = functorMaybe;
                exports["applicativeMaybe"] = applicativeMaybe;
                exports["bindMaybe"] = bindMaybe;
            })(PS);
            (exports => {
                const unsafeCompareImpl = lt => {
                    return eq => {
                        return gt => {
                            return x => {
                                return y => {
                                    return x < y ? lt : x === y ? eq : gt;
                                };
                            };
                        };
                    };
                };
                exports.ordBooleanImpl = unsafeCompareImpl;
                exports.ordIntImpl = unsafeCompareImpl;
                exports.ordNumberImpl = unsafeCompareImpl;
                exports.ordStringImpl = unsafeCompareImpl;
                exports.ordCharImpl = unsafeCompareImpl;
            })(PS["Data.Ord"] = PS["Data.Ord"] || {});
            ($PS => {
                $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
                const exports = $PS["Data.Ordering"];
                const Data_Eq = $PS["Data.Eq"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const LT = (() => {
                    function LT() {
                    }
                    ;
                    LT.value = new LT();
                    return LT;
                })();
                const GT = (() => {
                    function GT() {
                    }
                    ;
                    GT.value = new GT();
                    return GT;
                })();
                const EQ = (() => {
                    function EQ() {
                    }
                    ;
                    EQ.value = new EQ();
                    return EQ;
                })();
                const semigroupOrdering = new Data_Semigroup.Semigroup(v => {
                    return v1 => {
                        if (v instanceof LT) {
                            return LT.value;
                        }
                        ;
                        if (v instanceof GT) {
                            return GT.value;
                        }
                        ;
                        if (v instanceof EQ) {
                            return v1;
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.Ordering (line 21, column 1 - line 24, column 18): ${[v.constructor.name, v1.constructor.name]}`);
                    };
                });
                const eqOrdering = new Data_Eq.Eq(v => {
                    return v1 => {
                        if (v instanceof LT && v1 instanceof LT) {
                            return true;
                        }
                        ;
                        if (v instanceof GT && v1 instanceof GT) {
                            return true;
                        }
                        ;
                        if (v instanceof EQ && v1 instanceof EQ) {
                            return true;
                        }
                        ;
                        return false;
                    };
                });
                exports["LT"] = LT;
                exports["GT"] = GT;
                exports["EQ"] = EQ;
                exports["eqOrdering"] = eqOrdering;
                exports["semigroupOrdering"] = semigroupOrdering;
            })(PS);
            ($PS => {
                $PS["Data.Ord"] = $PS["Data.Ord"] || {};
                const exports = $PS["Data.Ord"];
                const $foreign = $PS["Data.Ord"];
                const Data_Eq = $PS["Data.Eq"];
                const Data_Ordering = $PS["Data.Ordering"];
                const Ord = function (Eq0, compare) {
                    this.Eq0 = Eq0;
                    this.compare = compare;
                };
                const ordString = new Ord(() => {
                    return Data_Eq.eqString;
                }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
                const ordNumber = new Ord(() => {
                    return Data_Eq.eqNumber;
                }, $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
                const ordInt = new Ord(() => {
                    return Data_Eq.eqInt;
                }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
                const ordChar = new Ord(() => {
                    return Data_Eq.eqChar;
                }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
                const ordBoolean = new Ord(() => {
                    return Data_Eq.eqBoolean;
                }, $foreign.ordBooleanImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
                const compare = dict => {
                    return dict.compare;
                };
                const comparing = dictOrd => {
                    return f => {
                        return x => {
                            return y => {
                                return compare(dictOrd)(f(x))(f(y));
                            };
                        };
                    };
                };
                const lessThan = dictOrd => {
                    return a1 => {
                        return a2 => {
                            const v = compare(dictOrd)(a1)(a2);
                            if (v instanceof Data_Ordering.LT) {
                                return true;
                            }
                            ;
                            return false;
                        };
                    };
                };
                exports["Ord"] = Ord;
                exports["compare"] = compare;
                exports["lessThan"] = lessThan;
                exports["comparing"] = comparing;
                exports["ordBoolean"] = ordBoolean;
                exports["ordInt"] = ordInt;
                exports["ordNumber"] = ordNumber;
                exports["ordString"] = ordString;
                exports["ordChar"] = ordChar;
            })(PS);
            ($PS => {
                $PS["Data.Array"] = $PS["Data.Array"] || {};
                const exports = $PS["Data.Array"];
                const $foreign = $PS["Data.Array"];
                const Control_Alt = $PS["Control.Alt"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Apply = $PS["Control.Apply"];
                const Control_Lazy = $PS["Control.Lazy"];
                const Data_Eq = $PS["Data.Eq"];
                const Data_Foldable = $PS["Data.Foldable"];
                const Data_Function = $PS["Data.Function"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_Maybe = $PS["Data.Maybe"];
                const Data_Ord = $PS["Data.Ord"];
                const Data_Ordering = $PS["Data.Ordering"];
                const Data_Tuple = $PS["Data.Tuple"];
                const zip = $foreign.zipWith(Data_Tuple.Tuple.create);
                const uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(x => {
                    return xs => {
                        return new Data_Maybe.Just({
                            head: x,
                            tail: xs
                        });
                    };
                });
                const sortBy = comp => {
                    return xs => {
                        const comp$prime = x => {
                            return y => {
                                const v = comp(x)(y);
                                if (v instanceof Data_Ordering.GT) {
                                    return 1;
                                }
                                ;
                                if (v instanceof Data_Ordering.EQ) {
                                    return 0;
                                }
                                ;
                                if (v instanceof Data_Ordering.LT) {
                                    return -1 | 0;
                                }
                                ;
                                throw new Error(`Failed pattern match at Data.Array (line 702, column 15 - line 705, column 13): ${[v.constructor.name]}`);
                            };
                        };
                        return $foreign.sortImpl(comp$prime)(xs);
                    };
                };
                const sort = dictOrd => {
                    return xs => {
                        return sortBy(Data_Ord.compare(dictOrd))(xs);
                    };
                };
                const singleton = a => {
                    return [a];
                };
                const some = dictAlternative => {
                    return dictLazy => {
                        return v => {
                            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(v1 => {
                                return many(dictAlternative)(dictLazy)(v);
                            }));
                        };
                    };
                };
                var many = dictAlternative => {
                    return dictLazy => {
                        return v => {
                            return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([]));
                        };
                    };
                };
                const fromFoldable = dictFoldable => {
                    return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
                };
                const findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
                const elemIndex = dictEq => {
                    return x => {
                        return findIndex(v => {
                            return Data_Eq.eq(dictEq)(v)(x);
                        });
                    };
                };
                exports["fromFoldable"] = fromFoldable;
                exports["singleton"] = singleton;
                exports["some"] = some;
                exports["many"] = many;
                exports["uncons"] = uncons;
                exports["elemIndex"] = elemIndex;
                exports["sort"] = sort;
                exports["zip"] = zip;
                exports["length"] = $foreign.length;
                exports["cons"] = $foreign.cons;
            })(PS);
            ($PS => {
                $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
                const exports = $PS["Data.Boolean"];
                const otherwise = true;
                exports["otherwise"] = otherwise;
            })(PS);
            (exports => {
                exports.topInt = 2147483647;
                exports.bottomInt = -2147483648;
                exports.topChar = String.fromCharCode(65535);
                exports.bottomChar = String.fromCharCode(0);
            })(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
            ($PS => {
                $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
                const exports = $PS["Data.Bounded"];
                const $foreign = $PS["Data.Bounded"];
                const Data_Ord = $PS["Data.Ord"];
                const Bounded = function (Ord0, bottom, top) {
                    this.Ord0 = Ord0;
                    this.bottom = bottom;
                    this.top = top;
                };
                const top = dict => {
                    return dict.top;
                };
                const boundedInt = new Bounded(() => {
                    return Data_Ord.ordInt;
                }, $foreign.bottomInt, $foreign.topInt);
                const boundedChar = new Bounded(() => {
                    return Data_Ord.ordChar;
                }, $foreign.bottomChar, $foreign.topChar);
                const bottom = dict => {
                    return dict.bottom;
                };
                exports["bottom"] = bottom;
                exports["top"] = top;
                exports["boundedInt"] = boundedInt;
                exports["boundedChar"] = boundedChar;
            })(PS);
            (exports => {
                exports.toCharCode = c => {
                    return c.charCodeAt(0);
                };
                exports.fromCharCode = c => {
                    return String.fromCharCode(c);
                };
            })(PS["Data.Enum"] = PS["Data.Enum"] || {});
            ($PS => {
                $PS["Data.Enum"] = $PS["Data.Enum"] || {};
                const exports = $PS["Data.Enum"];
                const $foreign = $PS["Data.Enum"];
                const Data_Bounded = $PS["Data.Bounded"];
                const Data_Maybe = $PS["Data.Maybe"];
                const Data_Ord = $PS["Data.Ord"];
                const Enum = function (Ord0, pred, succ) {
                    this.Ord0 = Ord0;
                    this.pred = pred;
                    this.succ = succ;
                };
                const BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
                    this.Bounded0 = Bounded0;
                    this.Enum1 = Enum1;
                    this.cardinality = cardinality;
                    this.fromEnum = fromEnum;
                    this.toEnum = toEnum;
                };
                const toEnum = dict => {
                    return dict.toEnum;
                };
                const fromEnum = dict => {
                    return dict.fromEnum;
                };
                const toEnumWithDefaults = dictBoundedEnum => {
                    return low => {
                        return high => {
                            return x => {
                                const v = toEnum(dictBoundedEnum)(x);
                                if (v instanceof Data_Maybe.Just) {
                                    return v.value0;
                                }
                                ;
                                if (v instanceof Data_Maybe.Nothing) {
                                    const $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                                    if ($54) {
                                        return low;
                                    }
                                    ;
                                    return high;
                                }
                                ;
                                throw new Error(`Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): ${[v.constructor.name]}`);
                            };
                        };
                    };
                };
                const defaultSucc = toEnum$prime => {
                    return fromEnum$prime => {
                        return a => {
                            return toEnum$prime(fromEnum$prime(a) + 1 | 0);
                        };
                    };
                };
                const defaultPred = toEnum$prime => {
                    return fromEnum$prime => {
                        return a => {
                            return toEnum$prime(fromEnum$prime(a) - 1 | 0);
                        };
                    };
                };
                const charToEnum = v => {
                    if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
                        return new Data_Maybe.Just($foreign.fromCharCode(v));
                    }
                    ;
                    return Data_Maybe.Nothing.value;
                };
                const enumChar = new Enum(() => {
                    return Data_Ord.ordChar;
                }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
                const boundedEnumChar = new BoundedEnum(() => {
                    return Data_Bounded.boundedChar;
                }, () => {
                    return enumChar;
                }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
                exports["toEnum"] = toEnum;
                exports["fromEnum"] = fromEnum;
                exports["toEnumWithDefaults"] = toEnumWithDefaults;
                exports["boundedEnumChar"] = boundedEnumChar;
            })(PS);
            ($PS => {
                $PS["Data.Char"] = $PS["Data.Char"] || {};
                const exports = $PS["Data.Char"];
                const Data_Enum = $PS["Data.Enum"];
                const toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
                const fromCharCode = Data_Enum.toEnum(Data_Enum.boundedEnumChar);
                exports["toCharCode"] = toCharCode;
                exports["fromCharCode"] = fromCharCode;
            })(PS);
            (exports => {
                exports.withCharCode = f => {
                    return c => {
                        return String.fromCharCode(f(c.charCodeAt()));
                    };
                };
            })(PS["Data.Char.Unicode"] = PS["Data.Char.Unicode"] || {});
            (exports => {
                exports.fromNumberImpl = just => {
                    return nothing => {
                        return n => {
                            return (n | 0) === n ? just(n) : nothing;
                        };
                    };
                };
                exports.toNumber = n => {
                    return n;
                };
            })(PS["Data.Int"] = PS["Data.Int"] || {});
            (exports => {
                exports.infinity = Infinity;
            })(PS["Global"] = PS["Global"] || {});
            ($PS => {
                $PS["Global"] = $PS["Global"] || {};
                const exports = $PS["Global"];
                const $foreign = $PS["Global"];
                exports["infinity"] = $foreign.infinity;
            })(PS);
            (exports => {
                exports.floor = Math.floor;
                exports.pow = n => {
                    return p => {
                        return n ** p;
                    };
                };
                exports.round = Math.round;
                exports.pi = Math.PI;
            })(PS["Math"] = PS["Math"] || {});
            ($PS => {
                $PS["Math"] = $PS["Math"] || {};
                const exports = $PS["Math"];
                const $foreign = $PS["Math"];
                exports["floor"] = $foreign.floor;
                exports["pow"] = $foreign.pow;
                exports["round"] = $foreign.round;
                exports["pi"] = $foreign.pi;
            })(PS);
            ($PS => {
                $PS["Data.Int"] = $PS["Data.Int"] || {};
                const exports = $PS["Data.Int"];
                const $foreign = $PS["Data.Int"];
                const Data_Boolean = $PS["Data.Boolean"];
                const Data_Bounded = $PS["Data.Bounded"];
                const Data_Maybe = $PS["Data.Maybe"];
                const Global = $PS["Global"];
                const $$Math = $PS["Math"];
                const fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
                const unsafeClamp = x => {
                    if (x === Global.infinity) {
                        return 0;
                    }
                    ;
                    if (x === -Global.infinity) {
                        return 0;
                    }
                    ;
                    if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
                        return Data_Bounded.top(Data_Bounded.boundedInt);
                    }
                    ;
                    if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
                        return Data_Bounded.bottom(Data_Bounded.boundedInt);
                    }
                    ;
                    if (Data_Boolean.otherwise) {
                        return Data_Maybe.fromMaybe(0)(fromNumber(x));
                    }
                    ;
                    throw new Error(`Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): ${[x.constructor.name]}`);
                };
                const round = $23 => {
                    return unsafeClamp($$Math.round($23));
                };
                const floor = $24 => {
                    return unsafeClamp($$Math.floor($24));
                };
                exports["floor"] = floor;
                exports["round"] = round;
                exports["toNumber"] = $foreign.toNumber;
            })(PS);
            ($PS => {
                $PS["Data.Char.Unicode.Internal"] = $PS["Data.Char.Unicode.Internal"] || {};
                const exports = $PS["Data.Char.Unicode.Internal"];
                const Data_Array = $PS["Data.Array"];
                const Data_Boolean = $PS["Data.Boolean"];
                const Data_Eq = $PS["Data.Eq"];
                const Data_Int = $PS["Data.Int"];
                const Data_Maybe = $PS["Data.Maybe"];
                const Data_Ordering = $PS["Data.Ordering"];
                const NUMCAT_LU = (() => {
                    function NUMCAT_LU() {
                    }
                    ;
                    NUMCAT_LU.value = new NUMCAT_LU();
                    return NUMCAT_LU;
                })();
                const NUMCAT_LL = (() => {
                    function NUMCAT_LL() {
                    }
                    ;
                    NUMCAT_LL.value = new NUMCAT_LL();
                    return NUMCAT_LL;
                })();
                const NUMCAT_LT = (() => {
                    function NUMCAT_LT() {
                    }
                    ;
                    NUMCAT_LT.value = new NUMCAT_LT();
                    return NUMCAT_LT;
                })();
                const NUMCAT_LM = (() => {
                    function NUMCAT_LM() {
                    }
                    ;
                    NUMCAT_LM.value = new NUMCAT_LM();
                    return NUMCAT_LM;
                })();
                const NUMCAT_LO = (() => {
                    function NUMCAT_LO() {
                    }
                    ;
                    NUMCAT_LO.value = new NUMCAT_LO();
                    return NUMCAT_LO;
                })();
                const NUMCAT_MN = (() => {
                    function NUMCAT_MN() {
                    }
                    ;
                    NUMCAT_MN.value = new NUMCAT_MN();
                    return NUMCAT_MN;
                })();
                const NUMCAT_MC = (() => {
                    function NUMCAT_MC() {
                    }
                    ;
                    NUMCAT_MC.value = new NUMCAT_MC();
                    return NUMCAT_MC;
                })();
                const NUMCAT_ME = (() => {
                    function NUMCAT_ME() {
                    }
                    ;
                    NUMCAT_ME.value = new NUMCAT_ME();
                    return NUMCAT_ME;
                })();
                const NUMCAT_ND = (() => {
                    function NUMCAT_ND() {
                    }
                    ;
                    NUMCAT_ND.value = new NUMCAT_ND();
                    return NUMCAT_ND;
                })();
                const NUMCAT_NL = (() => {
                    function NUMCAT_NL() {
                    }
                    ;
                    NUMCAT_NL.value = new NUMCAT_NL();
                    return NUMCAT_NL;
                })();
                const NUMCAT_NO = (() => {
                    function NUMCAT_NO() {
                    }
                    ;
                    NUMCAT_NO.value = new NUMCAT_NO();
                    return NUMCAT_NO;
                })();
                const NUMCAT_PC = (() => {
                    function NUMCAT_PC() {
                    }
                    ;
                    NUMCAT_PC.value = new NUMCAT_PC();
                    return NUMCAT_PC;
                })();
                const NUMCAT_PD = (() => {
                    function NUMCAT_PD() {
                    }
                    ;
                    NUMCAT_PD.value = new NUMCAT_PD();
                    return NUMCAT_PD;
                })();
                const NUMCAT_PS = (() => {
                    function NUMCAT_PS() {
                    }
                    ;
                    NUMCAT_PS.value = new NUMCAT_PS();
                    return NUMCAT_PS;
                })();
                const NUMCAT_PE = (() => {
                    function NUMCAT_PE() {
                    }
                    ;
                    NUMCAT_PE.value = new NUMCAT_PE();
                    return NUMCAT_PE;
                })();
                const NUMCAT_PI = (() => {
                    function NUMCAT_PI() {
                    }
                    ;
                    NUMCAT_PI.value = new NUMCAT_PI();
                    return NUMCAT_PI;
                })();
                const NUMCAT_PF = (() => {
                    function NUMCAT_PF() {
                    }
                    ;
                    NUMCAT_PF.value = new NUMCAT_PF();
                    return NUMCAT_PF;
                })();
                const NUMCAT_PO = (() => {
                    function NUMCAT_PO() {
                    }
                    ;
                    NUMCAT_PO.value = new NUMCAT_PO();
                    return NUMCAT_PO;
                })();
                const NUMCAT_SM = (() => {
                    function NUMCAT_SM() {
                    }
                    ;
                    NUMCAT_SM.value = new NUMCAT_SM();
                    return NUMCAT_SM;
                })();
                const NUMCAT_SC = (() => {
                    function NUMCAT_SC() {
                    }
                    ;
                    NUMCAT_SC.value = new NUMCAT_SC();
                    return NUMCAT_SC;
                })();
                const NUMCAT_SK = (() => {
                    function NUMCAT_SK() {
                    }
                    ;
                    NUMCAT_SK.value = new NUMCAT_SK();
                    return NUMCAT_SK;
                })();
                const NUMCAT_SO = (() => {
                    function NUMCAT_SO() {
                    }
                    ;
                    NUMCAT_SO.value = new NUMCAT_SO();
                    return NUMCAT_SO;
                })();
                const NUMCAT_ZS = (() => {
                    function NUMCAT_ZS() {
                    }
                    ;
                    NUMCAT_ZS.value = new NUMCAT_ZS();
                    return NUMCAT_ZS;
                })();
                const NUMCAT_ZL = (() => {
                    function NUMCAT_ZL() {
                    }
                    ;
                    NUMCAT_ZL.value = new NUMCAT_ZL();
                    return NUMCAT_ZL;
                })();
                const NUMCAT_ZP = (() => {
                    function NUMCAT_ZP() {
                    }
                    ;
                    NUMCAT_ZP.value = new NUMCAT_ZP();
                    return NUMCAT_ZP;
                })();
                const NUMCAT_CC = (() => {
                    function NUMCAT_CC() {
                    }
                    ;
                    NUMCAT_CC.value = new NUMCAT_CC();
                    return NUMCAT_CC;
                })();
                const NUMCAT_CF = (() => {
                    function NUMCAT_CF() {
                    }
                    ;
                    NUMCAT_CF.value = new NUMCAT_CF();
                    return NUMCAT_CF;
                })();
                const NUMCAT_CS = (() => {
                    function NUMCAT_CS() {
                    }
                    ;
                    NUMCAT_CS.value = new NUMCAT_CS();
                    return NUMCAT_CS;
                })();
                const NUMCAT_CO = (() => {
                    function NUMCAT_CO() {
                    }
                    ;
                    NUMCAT_CO.value = new NUMCAT_CO();
                    return NUMCAT_CO;
                })();
                const NUMCAT_CN = (() => {
                    function NUMCAT_CN() {
                    }
                    ;
                    NUMCAT_CN.value = new NUMCAT_CN();
                    return NUMCAT_CN;
                })();
                const numSpaceBlocks = 8;
                const numLat1Blocks = 63;
                const numConvBlocks = 1230;
                const numBlocks = 2783;
                const gencatZS = 2;
                const rule1 = {
                    category: gencatZS,
                    unicodeCat: NUMCAT_ZS.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const spacechars = [{
                    start: 32,
                    length: 1,
                    convRule: rule1
                }, {
                    start: 160,
                    length: 1,
                    convRule: rule1
                }, {
                    start: 5760,
                    length: 1,
                    convRule: rule1
                }, {
                    start: 6158,
                    length: 1,
                    convRule: rule1
                }, {
                    start: 8192,
                    length: 11,
                    convRule: rule1
                }, {
                    start: 8239,
                    length: 1,
                    convRule: rule1
                }, {
                    start: 8287,
                    length: 1,
                    convRule: rule1
                }, {
                    start: 12288,
                    length: 1,
                    convRule: rule1
                }];
                const gencatZP = 67108864;
                const rule140 = {
                    category: gencatZP,
                    unicodeCat: NUMCAT_ZP.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatZL = 33554432;
                const rule139 = {
                    category: gencatZL,
                    unicodeCat: NUMCAT_ZL.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatSO = 8192;
                const rule13 = {
                    category: gencatSO,
                    unicodeCat: NUMCAT_SO.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const rule148 = {
                    category: gencatSO,
                    unicodeCat: NUMCAT_SO.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 26,
                    titledist: 0
                };
                const rule149 = {
                    category: gencatSO,
                    unicodeCat: NUMCAT_SO.value,
                    possible: 1,
                    updist: -26 | 0,
                    lowdist: 0,
                    titledist: -26 | 0
                };
                const gencatSM = 64;
                const rule6 = {
                    category: gencatSM,
                    unicodeCat: NUMCAT_SM.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatSK = 1024;
                const rule10 = {
                    category: gencatSK,
                    unicodeCat: NUMCAT_SK.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatSC = 8;
                const rule3 = {
                    category: gencatSC,
                    unicodeCat: NUMCAT_SC.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatPS = 16;
                const rule4 = {
                    category: gencatPS,
                    unicodeCat: NUMCAT_PS.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatPO = 4;
                const rule2 = {
                    category: gencatPO,
                    unicodeCat: NUMCAT_PO.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatPI = 16384;
                const rule15 = {
                    category: gencatPI,
                    unicodeCat: NUMCAT_PI.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatPF = 131072;
                const rule19 = {
                    category: gencatPF,
                    unicodeCat: NUMCAT_PF.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatPE = 32;
                const rule5 = {
                    category: gencatPE,
                    unicodeCat: NUMCAT_PE.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatPD = 128;
                const rule7 = {
                    category: gencatPD,
                    unicodeCat: NUMCAT_PD.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatPC = 2048;
                const rule11 = {
                    category: gencatPC,
                    unicodeCat: NUMCAT_PC.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatNO = 65536;
                const rule17 = {
                    category: gencatNO,
                    unicodeCat: NUMCAT_NO.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatNL = 16777216;
                const rule116 = {
                    category: gencatNL,
                    unicodeCat: NUMCAT_NL.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const rule146 = {
                    category: gencatNL,
                    unicodeCat: NUMCAT_NL.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 16,
                    titledist: 0
                };
                const rule147 = {
                    category: gencatNL,
                    unicodeCat: NUMCAT_NL.value,
                    possible: 1,
                    updist: -16 | 0,
                    lowdist: 0,
                    titledist: -16 | 0
                };
                const gencatND = 256;
                const rule8 = {
                    category: gencatND,
                    unicodeCat: NUMCAT_ND.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatMN = 2097152;
                const rule84 = {
                    category: gencatMN,
                    unicodeCat: NUMCAT_MN.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const rule85 = {
                    category: gencatMN,
                    unicodeCat: NUMCAT_MN.value,
                    possible: 1,
                    updist: 84,
                    lowdist: 0,
                    titledist: 84
                };
                const gencatME = 4194304;
                const rule109 = {
                    category: gencatME,
                    unicodeCat: NUMCAT_ME.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatMC = 8388608;
                const rule114 = {
                    category: gencatMC,
                    unicodeCat: NUMCAT_MC.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatLU = 512;
                const nullrule = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_CN.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const rule105 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -60 | 0,
                    titledist: 0
                };
                const rule107 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -7 | 0,
                    titledist: 0
                };
                const rule108 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 80,
                    titledist: 0
                };
                const rule110 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 15,
                    titledist: 0
                };
                const rule112 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 48,
                    titledist: 0
                };
                const rule115 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 7264,
                    titledist: 0
                };
                const rule120 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -7615 | 0,
                    titledist: 0
                };
                const rule122 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -8 | 0,
                    titledist: 0
                };
                const rule131 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -74 | 0,
                    titledist: 0
                };
                const rule134 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -86 | 0,
                    titledist: 0
                };
                const rule135 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -100 | 0,
                    titledist: 0
                };
                const rule136 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -112 | 0,
                    titledist: 0
                };
                const rule137 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -128 | 0,
                    titledist: 0
                };
                const rule138 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -126 | 0,
                    titledist: 0
                };
                const rule141 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -7517 | 0,
                    titledist: 0
                };
                const rule142 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -8383 | 0,
                    titledist: 0
                };
                const rule143 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -8262 | 0,
                    titledist: 0
                };
                const rule144 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 28,
                    titledist: 0
                };
                const rule150 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -10743 | 0,
                    titledist: 0
                };
                const rule151 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -3814 | 0,
                    titledist: 0
                };
                const rule152 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -10727 | 0,
                    titledist: 0
                };
                const rule155 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -10780 | 0,
                    titledist: 0
                };
                const rule156 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -10749 | 0,
                    titledist: 0
                };
                const rule157 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -10783 | 0,
                    titledist: 0
                };
                const rule158 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -10782 | 0,
                    titledist: 0
                };
                const rule159 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -10815 | 0,
                    titledist: 0
                };
                const rule161 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -35332 | 0,
                    titledist: 0
                };
                const rule162 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -42280 | 0,
                    titledist: 0
                };
                const rule165 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 40,
                    titledist: 0
                };
                const rule21 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 1,
                    titledist: 0
                };
                const rule23 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -199 | 0,
                    titledist: 0
                };
                const rule25 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -121 | 0,
                    titledist: 0
                };
                const rule28 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 210,
                    titledist: 0
                };
                const rule29 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 206,
                    titledist: 0
                };
                const rule30 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 205,
                    titledist: 0
                };
                const rule31 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 79,
                    titledist: 0
                };
                const rule32 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 202,
                    titledist: 0
                };
                const rule33 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 203,
                    titledist: 0
                };
                const rule34 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 207,
                    titledist: 0
                };
                const rule36 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 211,
                    titledist: 0
                };
                const rule37 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 209,
                    titledist: 0
                };
                const rule39 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 213,
                    titledist: 0
                };
                const rule41 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 214,
                    titledist: 0
                };
                const rule42 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 218,
                    titledist: 0
                };
                const rule43 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 217,
                    titledist: 0
                };
                const rule44 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 219,
                    titledist: 0
                };
                const rule47 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 2,
                    titledist: 1
                };
                const rule51 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -97 | 0,
                    titledist: 0
                };
                const rule52 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -56 | 0,
                    titledist: 0
                };
                const rule53 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -130 | 0,
                    titledist: 0
                };
                const rule54 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 10795,
                    titledist: 0
                };
                const rule55 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -163 | 0,
                    titledist: 0
                };
                const rule56 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 10792,
                    titledist: 0
                };
                const rule58 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -195 | 0,
                    titledist: 0
                };
                const rule59 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 69,
                    titledist: 0
                };
                const rule60 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 71,
                    titledist: 0
                };
                const rule86 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 38,
                    titledist: 0
                };
                const rule87 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 37,
                    titledist: 0
                };
                const rule88 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 64,
                    titledist: 0
                };
                const rule89 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 63,
                    titledist: 0
                };
                const rule9 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 32,
                    titledist: 0
                };
                const rule95 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 1,
                    updist: 0,
                    lowdist: 8,
                    titledist: 0
                };
                const rule98 = {
                    category: gencatLU,
                    unicodeCat: NUMCAT_LU.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatLT = 524288;
                const rule129 = {
                    category: gencatLT,
                    unicodeCat: NUMCAT_LT.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -8 | 0,
                    titledist: 0
                };
                const rule132 = {
                    category: gencatLT,
                    unicodeCat: NUMCAT_LT.value,
                    possible: 1,
                    updist: 0,
                    lowdist: -9 | 0,
                    titledist: 0
                };
                const rule48 = {
                    category: gencatLT,
                    unicodeCat: NUMCAT_LT.value,
                    possible: 1,
                    updist: -1 | 0,
                    lowdist: 1,
                    titledist: 0
                };
                const gencatLO = 262144;
                const rule45 = {
                    category: gencatLO,
                    unicodeCat: NUMCAT_LO.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatLM = 1048576;
                const rule83 = {
                    category: gencatLM,
                    unicodeCat: NUMCAT_LM.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatLL = 4096;
                const rule100 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -54 | 0,
                    lowdist: 0,
                    titledist: -54 | 0
                };
                const rule101 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -8 | 0,
                    lowdist: 0,
                    titledist: -8 | 0
                };
                const rule102 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -86 | 0,
                    lowdist: 0,
                    titledist: -86 | 0
                };
                const rule103 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -80 | 0,
                    lowdist: 0,
                    titledist: -80 | 0
                };
                const rule104 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 7,
                    lowdist: 0,
                    titledist: 7
                };
                const rule106 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -96 | 0,
                    lowdist: 0,
                    titledist: -96 | 0
                };
                const rule111 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -15 | 0,
                    lowdist: 0,
                    titledist: -15 | 0
                };
                const rule113 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -48 | 0,
                    lowdist: 0,
                    titledist: -48 | 0
                };
                const rule117 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 35332,
                    lowdist: 0,
                    titledist: 35332
                };
                const rule118 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 3814,
                    lowdist: 0,
                    titledist: 3814
                };
                const rule119 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -59 | 0,
                    lowdist: 0,
                    titledist: -59 | 0
                };
                const rule12 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -32 | 0,
                    lowdist: 0,
                    titledist: -32 | 0
                };
                const rule121 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 8,
                    lowdist: 0,
                    titledist: 8
                };
                const rule123 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 74,
                    lowdist: 0,
                    titledist: 74
                };
                const rule124 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 86,
                    lowdist: 0,
                    titledist: 86
                };
                const rule125 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 100,
                    lowdist: 0,
                    titledist: 100
                };
                const rule126 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 128,
                    lowdist: 0,
                    titledist: 128
                };
                const rule127 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 112,
                    lowdist: 0,
                    titledist: 112
                };
                const rule128 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 126,
                    lowdist: 0,
                    titledist: 126
                };
                const rule130 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 9,
                    lowdist: 0,
                    titledist: 9
                };
                const rule133 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -7205 | 0,
                    lowdist: 0,
                    titledist: -7205 | 0
                };
                const rule14 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const rule145 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -28 | 0,
                    lowdist: 0,
                    titledist: -28 | 0
                };
                const rule153 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -10795 | 0,
                    lowdist: 0,
                    titledist: -10795 | 0
                };
                const rule154 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -10792 | 0,
                    lowdist: 0,
                    titledist: -10792 | 0
                };
                const rule160 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -7264 | 0,
                    lowdist: 0,
                    titledist: -7264 | 0
                };
                const rule166 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -40 | 0,
                    lowdist: 0,
                    titledist: -40 | 0
                };
                const rule18 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 743,
                    lowdist: 0,
                    titledist: 743
                };
                const rule20 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 121,
                    lowdist: 0,
                    titledist: 121
                };
                const rule22 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -1 | 0,
                    lowdist: 0,
                    titledist: -1 | 0
                };
                const rule24 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -232 | 0,
                    lowdist: 0,
                    titledist: -232 | 0
                };
                const rule26 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -300 | 0,
                    lowdist: 0,
                    titledist: -300 | 0
                };
                const rule27 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 195,
                    lowdist: 0,
                    titledist: 195
                };
                const rule35 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 97,
                    lowdist: 0,
                    titledist: 97
                };
                const rule38 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 163,
                    lowdist: 0,
                    titledist: 163
                };
                const rule40 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 130,
                    lowdist: 0,
                    titledist: 130
                };
                const rule46 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 56,
                    lowdist: 0,
                    titledist: 56
                };
                const rule49 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -2 | 0,
                    lowdist: 0,
                    titledist: -1 | 0
                };
                const rule50 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -79 | 0,
                    lowdist: 0,
                    titledist: -79 | 0
                };
                const rule57 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 10815,
                    lowdist: 0,
                    titledist: 10815
                };
                const rule61 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 10783,
                    lowdist: 0,
                    titledist: 10783
                };
                const rule62 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 10780,
                    lowdist: 0,
                    titledist: 10780
                };
                const rule63 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 10782,
                    lowdist: 0,
                    titledist: 10782
                };
                const rule64 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -210 | 0,
                    lowdist: 0,
                    titledist: -210 | 0
                };
                const rule65 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -206 | 0,
                    lowdist: 0,
                    titledist: -206 | 0
                };
                const rule66 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -205 | 0,
                    lowdist: 0,
                    titledist: -205 | 0
                };
                const rule67 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -202 | 0,
                    lowdist: 0,
                    titledist: -202 | 0
                };
                const rule68 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -203 | 0,
                    lowdist: 0,
                    titledist: -203 | 0
                };
                const rule69 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -207 | 0,
                    lowdist: 0,
                    titledist: -207 | 0
                };
                const rule70 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 42280,
                    lowdist: 0,
                    titledist: 42280
                };
                const rule71 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -209 | 0,
                    lowdist: 0,
                    titledist: -209 | 0
                };
                const rule72 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -211 | 0,
                    lowdist: 0,
                    titledist: -211 | 0
                };
                const rule73 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 10743,
                    lowdist: 0,
                    titledist: 10743
                };
                const rule74 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 10749,
                    lowdist: 0,
                    titledist: 10749
                };
                const rule75 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -213 | 0,
                    lowdist: 0,
                    titledist: -213 | 0
                };
                const rule76 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -214 | 0,
                    lowdist: 0,
                    titledist: -214 | 0
                };
                const rule77 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: 10727,
                    lowdist: 0,
                    titledist: 10727
                };
                const rule78 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -218 | 0,
                    lowdist: 0,
                    titledist: -218 | 0
                };
                const rule79 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -69 | 0,
                    lowdist: 0,
                    titledist: -69 | 0
                };
                const rule80 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -217 | 0,
                    lowdist: 0,
                    titledist: -217 | 0
                };
                const rule81 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -71 | 0,
                    lowdist: 0,
                    titledist: -71 | 0
                };
                const rule82 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -219 | 0,
                    lowdist: 0,
                    titledist: -219 | 0
                };
                const rule90 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -38 | 0,
                    lowdist: 0,
                    titledist: -38 | 0
                };
                const rule91 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -37 | 0,
                    lowdist: 0,
                    titledist: -37 | 0
                };
                const rule92 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -31 | 0,
                    lowdist: 0,
                    titledist: -31 | 0
                };
                const rule93 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -64 | 0,
                    lowdist: 0,
                    titledist: -64 | 0
                };
                const rule94 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -63 | 0,
                    lowdist: 0,
                    titledist: -63 | 0
                };
                const rule96 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -62 | 0,
                    lowdist: 0,
                    titledist: -62 | 0
                };
                const rule97 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -57 | 0,
                    lowdist: 0,
                    titledist: -57 | 0
                };
                const rule99 = {
                    category: gencatLL,
                    unicodeCat: NUMCAT_LL.value,
                    possible: 1,
                    updist: -47 | 0,
                    lowdist: 0,
                    titledist: -47 | 0
                };
                const gencatCS = 134217728;
                const rule163 = {
                    category: gencatCS,
                    unicodeCat: NUMCAT_CS.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatCO = 268435456;
                const rule164 = {
                    category: gencatCO,
                    unicodeCat: NUMCAT_CO.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatCF = 32768;
                const rule16 = {
                    category: gencatCF,
                    unicodeCat: NUMCAT_CF.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const gencatCC = 1;
                const rule0 = {
                    category: gencatCC,
                    unicodeCat: NUMCAT_CC.value,
                    possible: 0,
                    updist: 0,
                    lowdist: 0,
                    titledist: 0
                };
                const convchars = [{
                    start: 65,
                    length: 26,
                    convRule: rule9
                }, {
                    start: 97,
                    length: 26,
                    convRule: rule12
                }, {
                    start: 181,
                    length: 1,
                    convRule: rule18
                }, {
                    start: 192,
                    length: 23,
                    convRule: rule9
                }, {
                    start: 216,
                    length: 7,
                    convRule: rule9
                }, {
                    start: 224,
                    length: 23,
                    convRule: rule12
                }, {
                    start: 248,
                    length: 7,
                    convRule: rule12
                }, {
                    start: 255,
                    length: 1,
                    convRule: rule20
                }, {
                    start: 256,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 257,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 258,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 259,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 260,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 261,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 262,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 263,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 264,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 265,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 266,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 267,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 268,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 269,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 270,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 271,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 272,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 273,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 274,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 275,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 276,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 277,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 278,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 279,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 280,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 281,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 282,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 283,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 284,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 285,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 286,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 287,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 288,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 289,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 290,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 291,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 292,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 293,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 294,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 295,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 296,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 297,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 298,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 299,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 300,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 301,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 302,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 303,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 304,
                    length: 1,
                    convRule: rule23
                }, {
                    start: 305,
                    length: 1,
                    convRule: rule24
                }, {
                    start: 306,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 307,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 308,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 309,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 310,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 311,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 313,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 314,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 315,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 316,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 317,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 318,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 319,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 320,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 321,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 322,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 323,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 324,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 325,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 326,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 327,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 328,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 330,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 331,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 332,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 333,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 334,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 335,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 336,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 337,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 338,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 339,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 340,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 341,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 342,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 343,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 344,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 345,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 346,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 347,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 348,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 349,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 350,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 351,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 352,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 353,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 354,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 355,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 356,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 357,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 358,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 359,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 360,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 361,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 362,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 363,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 364,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 365,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 366,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 367,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 368,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 369,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 370,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 371,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 372,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 373,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 374,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 375,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 376,
                    length: 1,
                    convRule: rule25
                }, {
                    start: 377,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 378,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 379,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 380,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 381,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 382,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 383,
                    length: 1,
                    convRule: rule26
                }, {
                    start: 384,
                    length: 1,
                    convRule: rule27
                }, {
                    start: 385,
                    length: 1,
                    convRule: rule28
                }, {
                    start: 386,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 387,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 388,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 389,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 390,
                    length: 1,
                    convRule: rule29
                }, {
                    start: 391,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 392,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 393,
                    length: 2,
                    convRule: rule30
                }, {
                    start: 395,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 396,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 398,
                    length: 1,
                    convRule: rule31
                }, {
                    start: 399,
                    length: 1,
                    convRule: rule32
                }, {
                    start: 400,
                    length: 1,
                    convRule: rule33
                }, {
                    start: 401,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 402,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 403,
                    length: 1,
                    convRule: rule30
                }, {
                    start: 404,
                    length: 1,
                    convRule: rule34
                }, {
                    start: 405,
                    length: 1,
                    convRule: rule35
                }, {
                    start: 406,
                    length: 1,
                    convRule: rule36
                }, {
                    start: 407,
                    length: 1,
                    convRule: rule37
                }, {
                    start: 408,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 409,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 410,
                    length: 1,
                    convRule: rule38
                }, {
                    start: 412,
                    length: 1,
                    convRule: rule36
                }, {
                    start: 413,
                    length: 1,
                    convRule: rule39
                }, {
                    start: 414,
                    length: 1,
                    convRule: rule40
                }, {
                    start: 415,
                    length: 1,
                    convRule: rule41
                }, {
                    start: 416,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 417,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 418,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 419,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 420,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 421,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 422,
                    length: 1,
                    convRule: rule42
                }, {
                    start: 423,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 424,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 425,
                    length: 1,
                    convRule: rule42
                }, {
                    start: 428,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 429,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 430,
                    length: 1,
                    convRule: rule42
                }, {
                    start: 431,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 432,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 433,
                    length: 2,
                    convRule: rule43
                }, {
                    start: 435,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 436,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 437,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 438,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 439,
                    length: 1,
                    convRule: rule44
                }, {
                    start: 440,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 441,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 444,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 445,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 447,
                    length: 1,
                    convRule: rule46
                }, {
                    start: 452,
                    length: 1,
                    convRule: rule47
                }, {
                    start: 453,
                    length: 1,
                    convRule: rule48
                }, {
                    start: 454,
                    length: 1,
                    convRule: rule49
                }, {
                    start: 455,
                    length: 1,
                    convRule: rule47
                }, {
                    start: 456,
                    length: 1,
                    convRule: rule48
                }, {
                    start: 457,
                    length: 1,
                    convRule: rule49
                }, {
                    start: 458,
                    length: 1,
                    convRule: rule47
                }, {
                    start: 459,
                    length: 1,
                    convRule: rule48
                }, {
                    start: 460,
                    length: 1,
                    convRule: rule49
                }, {
                    start: 461,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 462,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 463,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 464,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 465,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 466,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 467,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 468,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 469,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 470,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 471,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 472,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 473,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 474,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 475,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 476,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 477,
                    length: 1,
                    convRule: rule50
                }, {
                    start: 478,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 479,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 480,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 481,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 482,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 483,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 484,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 485,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 486,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 487,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 488,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 489,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 490,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 491,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 492,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 493,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 494,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 495,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 497,
                    length: 1,
                    convRule: rule47
                }, {
                    start: 498,
                    length: 1,
                    convRule: rule48
                }, {
                    start: 499,
                    length: 1,
                    convRule: rule49
                }, {
                    start: 500,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 501,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 502,
                    length: 1,
                    convRule: rule51
                }, {
                    start: 503,
                    length: 1,
                    convRule: rule52
                }, {
                    start: 504,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 505,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 506,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 507,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 508,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 509,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 510,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 511,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 512,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 513,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 514,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 515,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 516,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 517,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 518,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 519,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 520,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 521,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 522,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 523,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 524,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 525,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 526,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 527,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 528,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 529,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 530,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 531,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 532,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 533,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 534,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 535,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 536,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 537,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 538,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 539,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 540,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 541,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 542,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 543,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 544,
                    length: 1,
                    convRule: rule53
                }, {
                    start: 546,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 547,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 548,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 549,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 550,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 551,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 552,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 553,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 554,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 555,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 556,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 557,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 558,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 559,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 560,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 561,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 562,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 563,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 570,
                    length: 1,
                    convRule: rule54
                }, {
                    start: 571,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 572,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 573,
                    length: 1,
                    convRule: rule55
                }, {
                    start: 574,
                    length: 1,
                    convRule: rule56
                }, {
                    start: 575,
                    length: 2,
                    convRule: rule57
                }, {
                    start: 577,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 578,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 579,
                    length: 1,
                    convRule: rule58
                }, {
                    start: 580,
                    length: 1,
                    convRule: rule59
                }, {
                    start: 581,
                    length: 1,
                    convRule: rule60
                }, {
                    start: 582,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 583,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 584,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 585,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 586,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 587,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 588,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 589,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 590,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 591,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 592,
                    length: 1,
                    convRule: rule61
                }, {
                    start: 593,
                    length: 1,
                    convRule: rule62
                }, {
                    start: 594,
                    length: 1,
                    convRule: rule63
                }, {
                    start: 595,
                    length: 1,
                    convRule: rule64
                }, {
                    start: 596,
                    length: 1,
                    convRule: rule65
                }, {
                    start: 598,
                    length: 2,
                    convRule: rule66
                }, {
                    start: 601,
                    length: 1,
                    convRule: rule67
                }, {
                    start: 603,
                    length: 1,
                    convRule: rule68
                }, {
                    start: 608,
                    length: 1,
                    convRule: rule66
                }, {
                    start: 611,
                    length: 1,
                    convRule: rule69
                }, {
                    start: 613,
                    length: 1,
                    convRule: rule70
                }, {
                    start: 616,
                    length: 1,
                    convRule: rule71
                }, {
                    start: 617,
                    length: 1,
                    convRule: rule72
                }, {
                    start: 619,
                    length: 1,
                    convRule: rule73
                }, {
                    start: 623,
                    length: 1,
                    convRule: rule72
                }, {
                    start: 625,
                    length: 1,
                    convRule: rule74
                }, {
                    start: 626,
                    length: 1,
                    convRule: rule75
                }, {
                    start: 629,
                    length: 1,
                    convRule: rule76
                }, {
                    start: 637,
                    length: 1,
                    convRule: rule77
                }, {
                    start: 640,
                    length: 1,
                    convRule: rule78
                }, {
                    start: 643,
                    length: 1,
                    convRule: rule78
                }, {
                    start: 648,
                    length: 1,
                    convRule: rule78
                }, {
                    start: 649,
                    length: 1,
                    convRule: rule79
                }, {
                    start: 650,
                    length: 2,
                    convRule: rule80
                }, {
                    start: 652,
                    length: 1,
                    convRule: rule81
                }, {
                    start: 658,
                    length: 1,
                    convRule: rule82
                }, {
                    start: 837,
                    length: 1,
                    convRule: rule85
                }, {
                    start: 880,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 881,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 882,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 883,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 886,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 887,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 891,
                    length: 3,
                    convRule: rule40
                }, {
                    start: 902,
                    length: 1,
                    convRule: rule86
                }, {
                    start: 904,
                    length: 3,
                    convRule: rule87
                }, {
                    start: 908,
                    length: 1,
                    convRule: rule88
                }, {
                    start: 910,
                    length: 2,
                    convRule: rule89
                }, {
                    start: 913,
                    length: 17,
                    convRule: rule9
                }, {
                    start: 931,
                    length: 9,
                    convRule: rule9
                }, {
                    start: 940,
                    length: 1,
                    convRule: rule90
                }, {
                    start: 941,
                    length: 3,
                    convRule: rule91
                }, {
                    start: 945,
                    length: 17,
                    convRule: rule12
                }, {
                    start: 962,
                    length: 1,
                    convRule: rule92
                }, {
                    start: 963,
                    length: 9,
                    convRule: rule12
                }, {
                    start: 972,
                    length: 1,
                    convRule: rule93
                }, {
                    start: 973,
                    length: 2,
                    convRule: rule94
                }, {
                    start: 975,
                    length: 1,
                    convRule: rule95
                }, {
                    start: 976,
                    length: 1,
                    convRule: rule96
                }, {
                    start: 977,
                    length: 1,
                    convRule: rule97
                }, {
                    start: 981,
                    length: 1,
                    convRule: rule99
                }, {
                    start: 982,
                    length: 1,
                    convRule: rule100
                }, {
                    start: 983,
                    length: 1,
                    convRule: rule101
                }, {
                    start: 984,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 985,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 986,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 987,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 988,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 989,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 990,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 991,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 992,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 993,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 994,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 995,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 996,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 997,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 998,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 999,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1000,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1001,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1002,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1003,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1004,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1005,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1006,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1007,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1008,
                    length: 1,
                    convRule: rule102
                }, {
                    start: 1009,
                    length: 1,
                    convRule: rule103
                }, {
                    start: 1010,
                    length: 1,
                    convRule: rule104
                }, {
                    start: 1012,
                    length: 1,
                    convRule: rule105
                }, {
                    start: 1013,
                    length: 1,
                    convRule: rule106
                }, {
                    start: 1015,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1016,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1017,
                    length: 1,
                    convRule: rule107
                }, {
                    start: 1018,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1019,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1021,
                    length: 3,
                    convRule: rule53
                }, {
                    start: 1024,
                    length: 16,
                    convRule: rule108
                }, {
                    start: 1040,
                    length: 32,
                    convRule: rule9
                }, {
                    start: 1072,
                    length: 32,
                    convRule: rule12
                }, {
                    start: 1104,
                    length: 16,
                    convRule: rule103
                }, {
                    start: 1120,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1121,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1122,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1123,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1124,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1125,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1126,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1127,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1128,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1129,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1130,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1131,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1132,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1133,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1134,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1135,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1136,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1137,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1138,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1139,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1140,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1141,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1142,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1143,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1144,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1145,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1146,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1147,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1148,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1149,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1150,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1151,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1152,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1153,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1162,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1163,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1164,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1165,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1166,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1167,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1168,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1169,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1170,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1171,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1172,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1173,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1174,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1175,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1176,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1177,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1178,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1179,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1180,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1181,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1182,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1183,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1184,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1185,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1186,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1187,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1188,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1189,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1190,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1191,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1192,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1193,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1194,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1195,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1196,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1197,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1198,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1199,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1200,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1201,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1202,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1203,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1204,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1205,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1206,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1207,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1208,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1209,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1210,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1211,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1212,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1213,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1214,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1215,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1216,
                    length: 1,
                    convRule: rule110
                }, {
                    start: 1217,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1218,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1219,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1220,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1221,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1222,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1223,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1224,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1225,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1226,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1227,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1228,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1229,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1230,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1231,
                    length: 1,
                    convRule: rule111
                }, {
                    start: 1232,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1233,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1234,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1235,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1236,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1237,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1238,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1239,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1240,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1241,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1242,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1243,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1244,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1245,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1246,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1247,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1248,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1249,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1250,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1251,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1252,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1253,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1254,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1255,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1256,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1257,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1258,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1259,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1260,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1261,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1262,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1263,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1264,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1265,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1266,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1267,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1268,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1269,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1270,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1271,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1272,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1273,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1274,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1275,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1276,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1277,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1278,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1279,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1280,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1281,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1282,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1283,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1284,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1285,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1286,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1287,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1288,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1289,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1290,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1291,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1292,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1293,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1294,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1295,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1296,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1297,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1298,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1299,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1300,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1301,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1302,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1303,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1304,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1305,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1306,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1307,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1308,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1309,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1310,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1311,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1312,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1313,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1314,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1315,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1316,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1317,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1318,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1319,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1329,
                    length: 38,
                    convRule: rule112
                }, {
                    start: 1377,
                    length: 38,
                    convRule: rule113
                }, {
                    start: 4256,
                    length: 38,
                    convRule: rule115
                }, {
                    start: 7545,
                    length: 1,
                    convRule: rule117
                }, {
                    start: 7549,
                    length: 1,
                    convRule: rule118
                }, {
                    start: 7680,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7681,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7682,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7683,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7684,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7685,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7686,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7687,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7688,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7689,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7690,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7691,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7692,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7693,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7694,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7695,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7696,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7697,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7698,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7699,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7700,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7701,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7702,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7703,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7704,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7705,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7706,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7707,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7708,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7709,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7710,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7711,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7712,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7713,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7714,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7715,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7716,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7717,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7718,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7719,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7720,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7721,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7722,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7723,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7724,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7725,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7726,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7727,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7728,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7729,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7730,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7731,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7732,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7733,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7734,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7735,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7736,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7737,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7738,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7739,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7740,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7741,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7742,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7743,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7744,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7745,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7746,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7747,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7748,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7749,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7750,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7751,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7752,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7753,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7754,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7755,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7756,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7757,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7758,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7759,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7760,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7761,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7762,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7763,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7764,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7765,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7766,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7767,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7768,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7769,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7770,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7771,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7772,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7773,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7774,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7775,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7776,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7777,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7778,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7779,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7780,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7781,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7782,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7783,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7784,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7785,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7786,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7787,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7788,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7789,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7790,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7791,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7792,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7793,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7794,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7795,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7796,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7797,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7798,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7799,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7800,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7801,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7802,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7803,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7804,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7805,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7806,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7807,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7808,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7809,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7810,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7811,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7812,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7813,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7814,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7815,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7816,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7817,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7818,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7819,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7820,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7821,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7822,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7823,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7824,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7825,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7826,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7827,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7828,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7829,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7835,
                    length: 1,
                    convRule: rule119
                }, {
                    start: 7838,
                    length: 1,
                    convRule: rule120
                }, {
                    start: 7840,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7841,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7842,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7843,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7844,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7845,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7846,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7847,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7848,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7849,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7850,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7851,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7852,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7853,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7854,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7855,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7856,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7857,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7858,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7859,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7860,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7861,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7862,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7863,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7864,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7865,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7866,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7867,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7868,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7869,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7870,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7871,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7872,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7873,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7874,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7875,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7876,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7877,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7878,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7879,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7880,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7881,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7882,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7883,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7884,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7885,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7886,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7887,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7888,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7889,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7890,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7891,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7892,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7893,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7894,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7895,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7896,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7897,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7898,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7899,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7900,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7901,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7902,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7903,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7904,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7905,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7906,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7907,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7908,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7909,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7910,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7911,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7912,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7913,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7914,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7915,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7916,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7917,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7918,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7919,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7920,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7921,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7922,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7923,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7924,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7925,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7926,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7927,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7928,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7929,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7930,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7931,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7932,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7933,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7934,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7935,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7936,
                    length: 8,
                    convRule: rule121
                }, {
                    start: 7944,
                    length: 8,
                    convRule: rule122
                }, {
                    start: 7952,
                    length: 6,
                    convRule: rule121
                }, {
                    start: 7960,
                    length: 6,
                    convRule: rule122
                }, {
                    start: 7968,
                    length: 8,
                    convRule: rule121
                }, {
                    start: 7976,
                    length: 8,
                    convRule: rule122
                }, {
                    start: 7984,
                    length: 8,
                    convRule: rule121
                }, {
                    start: 7992,
                    length: 8,
                    convRule: rule122
                }, {
                    start: 8000,
                    length: 6,
                    convRule: rule121
                }, {
                    start: 8008,
                    length: 6,
                    convRule: rule122
                }, {
                    start: 8017,
                    length: 1,
                    convRule: rule121
                }, {
                    start: 8019,
                    length: 1,
                    convRule: rule121
                }, {
                    start: 8021,
                    length: 1,
                    convRule: rule121
                }, {
                    start: 8023,
                    length: 1,
                    convRule: rule121
                }, {
                    start: 8025,
                    length: 1,
                    convRule: rule122
                }, {
                    start: 8027,
                    length: 1,
                    convRule: rule122
                }, {
                    start: 8029,
                    length: 1,
                    convRule: rule122
                }, {
                    start: 8031,
                    length: 1,
                    convRule: rule122
                }, {
                    start: 8032,
                    length: 8,
                    convRule: rule121
                }, {
                    start: 8040,
                    length: 8,
                    convRule: rule122
                }, {
                    start: 8048,
                    length: 2,
                    convRule: rule123
                }, {
                    start: 8050,
                    length: 4,
                    convRule: rule124
                }, {
                    start: 8054,
                    length: 2,
                    convRule: rule125
                }, {
                    start: 8056,
                    length: 2,
                    convRule: rule126
                }, {
                    start: 8058,
                    length: 2,
                    convRule: rule127
                }, {
                    start: 8060,
                    length: 2,
                    convRule: rule128
                }, {
                    start: 8064,
                    length: 8,
                    convRule: rule121
                }, {
                    start: 8072,
                    length: 8,
                    convRule: rule129
                }, {
                    start: 8080,
                    length: 8,
                    convRule: rule121
                }, {
                    start: 8088,
                    length: 8,
                    convRule: rule129
                }, {
                    start: 8096,
                    length: 8,
                    convRule: rule121
                }, {
                    start: 8104,
                    length: 8,
                    convRule: rule129
                }, {
                    start: 8112,
                    length: 2,
                    convRule: rule121
                }, {
                    start: 8115,
                    length: 1,
                    convRule: rule130
                }, {
                    start: 8120,
                    length: 2,
                    convRule: rule122
                }, {
                    start: 8122,
                    length: 2,
                    convRule: rule131
                }, {
                    start: 8124,
                    length: 1,
                    convRule: rule132
                }, {
                    start: 8126,
                    length: 1,
                    convRule: rule133
                }, {
                    start: 8131,
                    length: 1,
                    convRule: rule130
                }, {
                    start: 8136,
                    length: 4,
                    convRule: rule134
                }, {
                    start: 8140,
                    length: 1,
                    convRule: rule132
                }, {
                    start: 8144,
                    length: 2,
                    convRule: rule121
                }, {
                    start: 8152,
                    length: 2,
                    convRule: rule122
                }, {
                    start: 8154,
                    length: 2,
                    convRule: rule135
                }, {
                    start: 8160,
                    length: 2,
                    convRule: rule121
                }, {
                    start: 8165,
                    length: 1,
                    convRule: rule104
                }, {
                    start: 8168,
                    length: 2,
                    convRule: rule122
                }, {
                    start: 8170,
                    length: 2,
                    convRule: rule136
                }, {
                    start: 8172,
                    length: 1,
                    convRule: rule107
                }, {
                    start: 8179,
                    length: 1,
                    convRule: rule130
                }, {
                    start: 8184,
                    length: 2,
                    convRule: rule137
                }, {
                    start: 8186,
                    length: 2,
                    convRule: rule138
                }, {
                    start: 8188,
                    length: 1,
                    convRule: rule132
                }, {
                    start: 8486,
                    length: 1,
                    convRule: rule141
                }, {
                    start: 8490,
                    length: 1,
                    convRule: rule142
                }, {
                    start: 8491,
                    length: 1,
                    convRule: rule143
                }, {
                    start: 8498,
                    length: 1,
                    convRule: rule144
                }, {
                    start: 8526,
                    length: 1,
                    convRule: rule145
                }, {
                    start: 8544,
                    length: 16,
                    convRule: rule146
                }, {
                    start: 8560,
                    length: 16,
                    convRule: rule147
                }, {
                    start: 8579,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 8580,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 9398,
                    length: 26,
                    convRule: rule148
                }, {
                    start: 9424,
                    length: 26,
                    convRule: rule149
                }, {
                    start: 11264,
                    length: 47,
                    convRule: rule112
                }, {
                    start: 11312,
                    length: 47,
                    convRule: rule113
                }, {
                    start: 11360,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11361,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11362,
                    length: 1,
                    convRule: rule150
                }, {
                    start: 11363,
                    length: 1,
                    convRule: rule151
                }, {
                    start: 11364,
                    length: 1,
                    convRule: rule152
                }, {
                    start: 11365,
                    length: 1,
                    convRule: rule153
                }, {
                    start: 11366,
                    length: 1,
                    convRule: rule154
                }, {
                    start: 11367,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11368,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11369,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11370,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11371,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11372,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11373,
                    length: 1,
                    convRule: rule155
                }, {
                    start: 11374,
                    length: 1,
                    convRule: rule156
                }, {
                    start: 11375,
                    length: 1,
                    convRule: rule157
                }, {
                    start: 11376,
                    length: 1,
                    convRule: rule158
                }, {
                    start: 11378,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11379,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11381,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11382,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11390,
                    length: 2,
                    convRule: rule159
                }, {
                    start: 11392,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11393,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11394,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11395,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11396,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11397,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11398,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11399,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11400,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11401,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11402,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11403,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11404,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11405,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11406,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11407,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11408,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11409,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11410,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11411,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11412,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11413,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11414,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11415,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11416,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11417,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11418,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11419,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11420,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11421,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11422,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11423,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11424,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11425,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11426,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11427,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11428,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11429,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11430,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11431,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11432,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11433,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11434,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11435,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11436,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11437,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11438,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11439,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11440,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11441,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11442,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11443,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11444,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11445,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11446,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11447,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11448,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11449,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11450,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11451,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11452,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11453,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11454,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11455,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11456,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11457,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11458,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11459,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11460,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11461,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11462,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11463,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11464,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11465,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11466,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11467,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11468,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11469,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11470,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11471,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11472,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11473,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11474,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11475,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11476,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11477,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11478,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11479,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11480,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11481,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11482,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11483,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11484,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11485,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11486,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11487,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11488,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11489,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11490,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11491,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11499,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11500,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11501,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11502,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11520,
                    length: 38,
                    convRule: rule160
                }, {
                    start: 42560,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42561,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42562,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42563,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42564,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42565,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42566,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42567,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42568,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42569,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42570,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42571,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42572,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42573,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42574,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42575,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42576,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42577,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42578,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42579,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42580,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42581,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42582,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42583,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42584,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42585,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42586,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42587,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42588,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42589,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42590,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42591,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42592,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42593,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42594,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42595,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42596,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42597,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42598,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42599,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42600,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42601,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42602,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42603,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42604,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42605,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42624,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42625,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42626,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42627,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42628,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42629,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42630,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42631,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42632,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42633,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42634,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42635,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42636,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42637,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42638,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42639,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42640,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42641,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42642,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42643,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42644,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42645,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42646,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42647,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42786,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42787,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42788,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42789,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42790,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42791,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42792,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42793,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42794,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42795,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42796,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42797,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42798,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42799,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42802,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42803,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42804,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42805,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42806,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42807,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42808,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42809,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42810,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42811,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42812,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42813,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42814,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42815,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42816,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42817,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42818,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42819,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42820,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42821,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42822,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42823,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42824,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42825,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42826,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42827,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42828,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42829,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42830,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42831,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42832,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42833,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42834,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42835,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42836,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42837,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42838,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42839,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42840,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42841,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42842,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42843,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42844,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42845,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42846,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42847,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42848,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42849,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42850,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42851,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42852,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42853,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42854,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42855,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42856,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42857,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42858,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42859,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42860,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42861,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42862,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42863,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42873,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42874,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42875,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42876,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42877,
                    length: 1,
                    convRule: rule161
                }, {
                    start: 42878,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42879,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42880,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42881,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42882,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42883,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42884,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42885,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42886,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42887,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42891,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42892,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42893,
                    length: 1,
                    convRule: rule162
                }, {
                    start: 42896,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42897,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42912,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42913,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42914,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42915,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42916,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42917,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42918,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42919,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42920,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42921,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 65313,
                    length: 26,
                    convRule: rule9
                }, {
                    start: 65345,
                    length: 26,
                    convRule: rule12
                }, {
                    start: 66560,
                    length: 40,
                    convRule: rule165
                }, {
                    start: 66600,
                    length: 40,
                    convRule: rule166
                }];
                const bsearch = a => {
                    return array => {
                        return size => {
                            return compare => {
                                const go = $copy_i => {
                                    return $copy_k => {
                                        let $tco_var_i = $copy_i;
                                        let $tco_done = false;
                                        let $tco_result;
                                        function $tco_loop(i, k) {
                                            if (i > k) {
                                                $tco_done = true;
                                                return Data_Maybe.Nothing.value;
                                            }
                                            ;
                                            if (Data_Boolean.otherwise) {
                                                const j = Data_Int.floor(Data_Int.toNumber(i + k | 0) / 2.0);
                                                const v = compare(a)(array[j]);
                                                if (v instanceof Data_Ordering.EQ) {
                                                    $tco_done = true;
                                                    return new Data_Maybe.Just(array[j]);
                                                }
                                                ;
                                                if (v instanceof Data_Ordering.GT) {
                                                    $tco_var_i = j + 1 | 0;
                                                    $copy_k = k;
                                                    return;
                                                }
                                                ;
                                                $tco_var_i = i;
                                                $copy_k = j - 1 | 0;
                                                return;
                                            }
                                            ;
                                            throw new Error(`Failed pattern match at Data.Char.Unicode.Internal (line 4783, column 5 - line 4789, column 49): ${[i.constructor.name, k.constructor.name]}`);
                                        }
                                        ;
                                        while (!$tco_done) {
                                            $tco_result = $tco_loop($tco_var_i, $copy_k);
                                        }
                                        ;
                                        return $tco_result;
                                    };
                                };
                                return go(0)(size);
                            };
                        };
                    };
                };
                const blkCmp = ({ start, constructor }) => {
                    return ({ start, length, constructor }) => {
                        if (start >= start && start < (start + length | 0)) {
                            return Data_Ordering.EQ.value;
                        }
                        ;
                        if (start > start) {
                            return Data_Ordering.GT.value;
                        }
                        ;
                        if (Data_Boolean.otherwise) {
                            return Data_Ordering.LT.value;
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.Char.Unicode.Internal (line 4760, column 1 - line 4760, column 45): ${[constructor.name, constructor.name]}`);
                    };
                };
                const getRule = blocks => {
                    return unichar => {
                        return size => {
                            const key = {
                                start: unichar,
                                length: 1,
                                convRule: nullrule
                            };
                            const maybeCharBlock = bsearch(key)(blocks)(size)(blkCmp);
                            if (maybeCharBlock instanceof Data_Maybe.Nothing) {
                                return Data_Maybe.Nothing.value;
                            }
                            ;
                            if (maybeCharBlock instanceof Data_Maybe.Just) {
                                return new Data_Maybe.Just(maybeCharBlock.value0.convRule);
                            }
                            ;
                            throw new Error(`Failed pattern match at Data.Char.Unicode.Internal (line 4773, column 8 - line 4775, column 62): ${[maybeCharBlock.constructor.name]}`);
                        };
                    };
                };
                const caseConv = f => {
                    return $$char => {
                        const maybeConversionRule = getRule(convchars)($$char)(numConvBlocks);
                        if (maybeConversionRule instanceof Data_Maybe.Nothing) {
                            return $$char;
                        }
                        ;
                        if (maybeConversionRule instanceof Data_Maybe.Just) {
                            return $$char + f(maybeConversionRule.value0) | 0;
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.Char.Unicode.Internal (line 4850, column 8 - line 4852, column 55): ${[maybeConversionRule.constructor.name]}`);
                    };
                };
                const uTowlower = caseConv(({ lowdist }) => {
                    return lowdist;
                });
                const uTowupper = caseConv(({ updist }) => {
                    return updist;
                });
                const checkAttrS = categories => {
                    return $$char => {
                        const maybeConversionRule = getRule(spacechars)($$char)(numSpaceBlocks);
                        if (maybeConversionRule instanceof Data_Maybe.Nothing) {
                            return false;
                        }
                        ;
                        if (maybeConversionRule instanceof Data_Maybe.Just) {
                            return Data_Maybe.isJust(Data_Array.elemIndex(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories));
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.Char.Unicode.Internal (line 4807, column 8 - line 4809, column 92): ${[maybeConversionRule.constructor.name]}`);
                    };
                };
                const uIswspace = checkAttrS([gencatZS]);
                const allchars = [{
                    start: 0,
                    length: 32,
                    convRule: rule0
                }, {
                    start: 32,
                    length: 1,
                    convRule: rule1
                }, {
                    start: 33,
                    length: 3,
                    convRule: rule2
                }, {
                    start: 36,
                    length: 1,
                    convRule: rule3
                }, {
                    start: 37,
                    length: 3,
                    convRule: rule2
                }, {
                    start: 40,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 41,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 42,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 43,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 44,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 45,
                    length: 1,
                    convRule: rule7
                }, {
                    start: 46,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 48,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 58,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 60,
                    length: 3,
                    convRule: rule6
                }, {
                    start: 63,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 65,
                    length: 26,
                    convRule: rule9
                }, {
                    start: 91,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 92,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 93,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 94,
                    length: 1,
                    convRule: rule10
                }, {
                    start: 95,
                    length: 1,
                    convRule: rule11
                }, {
                    start: 96,
                    length: 1,
                    convRule: rule10
                }, {
                    start: 97,
                    length: 26,
                    convRule: rule12
                }, {
                    start: 123,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 124,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 125,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 126,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 127,
                    length: 33,
                    convRule: rule0
                }, {
                    start: 160,
                    length: 1,
                    convRule: rule1
                }, {
                    start: 161,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 162,
                    length: 4,
                    convRule: rule3
                }, {
                    start: 166,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 168,
                    length: 1,
                    convRule: rule10
                }, {
                    start: 169,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 170,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 171,
                    length: 1,
                    convRule: rule15
                }, {
                    start: 172,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 173,
                    length: 1,
                    convRule: rule16
                }, {
                    start: 174,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 175,
                    length: 1,
                    convRule: rule10
                }, {
                    start: 176,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 177,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 178,
                    length: 2,
                    convRule: rule17
                }, {
                    start: 180,
                    length: 1,
                    convRule: rule10
                }, {
                    start: 181,
                    length: 1,
                    convRule: rule18
                }, {
                    start: 182,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 183,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 184,
                    length: 1,
                    convRule: rule10
                }, {
                    start: 185,
                    length: 1,
                    convRule: rule17
                }, {
                    start: 186,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 187,
                    length: 1,
                    convRule: rule19
                }, {
                    start: 188,
                    length: 3,
                    convRule: rule17
                }, {
                    start: 191,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 192,
                    length: 23,
                    convRule: rule9
                }, {
                    start: 215,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 216,
                    length: 7,
                    convRule: rule9
                }, {
                    start: 223,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 224,
                    length: 23,
                    convRule: rule12
                }, {
                    start: 247,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 248,
                    length: 7,
                    convRule: rule12
                }, {
                    start: 255,
                    length: 1,
                    convRule: rule20
                }, {
                    start: 256,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 257,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 258,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 259,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 260,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 261,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 262,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 263,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 264,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 265,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 266,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 267,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 268,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 269,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 270,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 271,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 272,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 273,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 274,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 275,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 276,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 277,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 278,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 279,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 280,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 281,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 282,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 283,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 284,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 285,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 286,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 287,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 288,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 289,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 290,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 291,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 292,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 293,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 294,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 295,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 296,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 297,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 298,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 299,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 300,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 301,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 302,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 303,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 304,
                    length: 1,
                    convRule: rule23
                }, {
                    start: 305,
                    length: 1,
                    convRule: rule24
                }, {
                    start: 306,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 307,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 308,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 309,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 310,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 311,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 312,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 313,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 314,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 315,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 316,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 317,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 318,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 319,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 320,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 321,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 322,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 323,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 324,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 325,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 326,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 327,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 328,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 329,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 330,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 331,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 332,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 333,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 334,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 335,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 336,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 337,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 338,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 339,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 340,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 341,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 342,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 343,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 344,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 345,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 346,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 347,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 348,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 349,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 350,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 351,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 352,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 353,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 354,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 355,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 356,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 357,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 358,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 359,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 360,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 361,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 362,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 363,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 364,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 365,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 366,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 367,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 368,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 369,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 370,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 371,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 372,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 373,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 374,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 375,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 376,
                    length: 1,
                    convRule: rule25
                }, {
                    start: 377,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 378,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 379,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 380,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 381,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 382,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 383,
                    length: 1,
                    convRule: rule26
                }, {
                    start: 384,
                    length: 1,
                    convRule: rule27
                }, {
                    start: 385,
                    length: 1,
                    convRule: rule28
                }, {
                    start: 386,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 387,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 388,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 389,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 390,
                    length: 1,
                    convRule: rule29
                }, {
                    start: 391,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 392,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 393,
                    length: 2,
                    convRule: rule30
                }, {
                    start: 395,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 396,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 397,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 398,
                    length: 1,
                    convRule: rule31
                }, {
                    start: 399,
                    length: 1,
                    convRule: rule32
                }, {
                    start: 400,
                    length: 1,
                    convRule: rule33
                }, {
                    start: 401,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 402,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 403,
                    length: 1,
                    convRule: rule30
                }, {
                    start: 404,
                    length: 1,
                    convRule: rule34
                }, {
                    start: 405,
                    length: 1,
                    convRule: rule35
                }, {
                    start: 406,
                    length: 1,
                    convRule: rule36
                }, {
                    start: 407,
                    length: 1,
                    convRule: rule37
                }, {
                    start: 408,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 409,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 410,
                    length: 1,
                    convRule: rule38
                }, {
                    start: 411,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 412,
                    length: 1,
                    convRule: rule36
                }, {
                    start: 413,
                    length: 1,
                    convRule: rule39
                }, {
                    start: 414,
                    length: 1,
                    convRule: rule40
                }, {
                    start: 415,
                    length: 1,
                    convRule: rule41
                }, {
                    start: 416,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 417,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 418,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 419,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 420,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 421,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 422,
                    length: 1,
                    convRule: rule42
                }, {
                    start: 423,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 424,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 425,
                    length: 1,
                    convRule: rule42
                }, {
                    start: 426,
                    length: 2,
                    convRule: rule14
                }, {
                    start: 428,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 429,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 430,
                    length: 1,
                    convRule: rule42
                }, {
                    start: 431,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 432,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 433,
                    length: 2,
                    convRule: rule43
                }, {
                    start: 435,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 436,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 437,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 438,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 439,
                    length: 1,
                    convRule: rule44
                }, {
                    start: 440,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 441,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 442,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 443,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 444,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 445,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 446,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 447,
                    length: 1,
                    convRule: rule46
                }, {
                    start: 448,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 452,
                    length: 1,
                    convRule: rule47
                }, {
                    start: 453,
                    length: 1,
                    convRule: rule48
                }, {
                    start: 454,
                    length: 1,
                    convRule: rule49
                }, {
                    start: 455,
                    length: 1,
                    convRule: rule47
                }, {
                    start: 456,
                    length: 1,
                    convRule: rule48
                }, {
                    start: 457,
                    length: 1,
                    convRule: rule49
                }, {
                    start: 458,
                    length: 1,
                    convRule: rule47
                }, {
                    start: 459,
                    length: 1,
                    convRule: rule48
                }, {
                    start: 460,
                    length: 1,
                    convRule: rule49
                }, {
                    start: 461,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 462,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 463,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 464,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 465,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 466,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 467,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 468,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 469,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 470,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 471,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 472,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 473,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 474,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 475,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 476,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 477,
                    length: 1,
                    convRule: rule50
                }, {
                    start: 478,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 479,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 480,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 481,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 482,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 483,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 484,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 485,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 486,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 487,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 488,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 489,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 490,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 491,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 492,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 493,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 494,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 495,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 496,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 497,
                    length: 1,
                    convRule: rule47
                }, {
                    start: 498,
                    length: 1,
                    convRule: rule48
                }, {
                    start: 499,
                    length: 1,
                    convRule: rule49
                }, {
                    start: 500,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 501,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 502,
                    length: 1,
                    convRule: rule51
                }, {
                    start: 503,
                    length: 1,
                    convRule: rule52
                }, {
                    start: 504,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 505,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 506,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 507,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 508,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 509,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 510,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 511,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 512,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 513,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 514,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 515,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 516,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 517,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 518,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 519,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 520,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 521,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 522,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 523,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 524,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 525,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 526,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 527,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 528,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 529,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 530,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 531,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 532,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 533,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 534,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 535,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 536,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 537,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 538,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 539,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 540,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 541,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 542,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 543,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 544,
                    length: 1,
                    convRule: rule53
                }, {
                    start: 545,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 546,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 547,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 548,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 549,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 550,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 551,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 552,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 553,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 554,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 555,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 556,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 557,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 558,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 559,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 560,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 561,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 562,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 563,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 564,
                    length: 6,
                    convRule: rule14
                }, {
                    start: 570,
                    length: 1,
                    convRule: rule54
                }, {
                    start: 571,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 572,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 573,
                    length: 1,
                    convRule: rule55
                }, {
                    start: 574,
                    length: 1,
                    convRule: rule56
                }, {
                    start: 575,
                    length: 2,
                    convRule: rule57
                }, {
                    start: 577,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 578,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 579,
                    length: 1,
                    convRule: rule58
                }, {
                    start: 580,
                    length: 1,
                    convRule: rule59
                }, {
                    start: 581,
                    length: 1,
                    convRule: rule60
                }, {
                    start: 582,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 583,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 584,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 585,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 586,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 587,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 588,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 589,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 590,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 591,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 592,
                    length: 1,
                    convRule: rule61
                }, {
                    start: 593,
                    length: 1,
                    convRule: rule62
                }, {
                    start: 594,
                    length: 1,
                    convRule: rule63
                }, {
                    start: 595,
                    length: 1,
                    convRule: rule64
                }, {
                    start: 596,
                    length: 1,
                    convRule: rule65
                }, {
                    start: 597,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 598,
                    length: 2,
                    convRule: rule66
                }, {
                    start: 600,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 601,
                    length: 1,
                    convRule: rule67
                }, {
                    start: 602,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 603,
                    length: 1,
                    convRule: rule68
                }, {
                    start: 604,
                    length: 4,
                    convRule: rule14
                }, {
                    start: 608,
                    length: 1,
                    convRule: rule66
                }, {
                    start: 609,
                    length: 2,
                    convRule: rule14
                }, {
                    start: 611,
                    length: 1,
                    convRule: rule69
                }, {
                    start: 612,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 613,
                    length: 1,
                    convRule: rule70
                }, {
                    start: 614,
                    length: 2,
                    convRule: rule14
                }, {
                    start: 616,
                    length: 1,
                    convRule: rule71
                }, {
                    start: 617,
                    length: 1,
                    convRule: rule72
                }, {
                    start: 618,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 619,
                    length: 1,
                    convRule: rule73
                }, {
                    start: 620,
                    length: 3,
                    convRule: rule14
                }, {
                    start: 623,
                    length: 1,
                    convRule: rule72
                }, {
                    start: 624,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 625,
                    length: 1,
                    convRule: rule74
                }, {
                    start: 626,
                    length: 1,
                    convRule: rule75
                }, {
                    start: 627,
                    length: 2,
                    convRule: rule14
                }, {
                    start: 629,
                    length: 1,
                    convRule: rule76
                }, {
                    start: 630,
                    length: 7,
                    convRule: rule14
                }, {
                    start: 637,
                    length: 1,
                    convRule: rule77
                }, {
                    start: 638,
                    length: 2,
                    convRule: rule14
                }, {
                    start: 640,
                    length: 1,
                    convRule: rule78
                }, {
                    start: 641,
                    length: 2,
                    convRule: rule14
                }, {
                    start: 643,
                    length: 1,
                    convRule: rule78
                }, {
                    start: 644,
                    length: 4,
                    convRule: rule14
                }, {
                    start: 648,
                    length: 1,
                    convRule: rule78
                }, {
                    start: 649,
                    length: 1,
                    convRule: rule79
                }, {
                    start: 650,
                    length: 2,
                    convRule: rule80
                }, {
                    start: 652,
                    length: 1,
                    convRule: rule81
                }, {
                    start: 653,
                    length: 5,
                    convRule: rule14
                }, {
                    start: 658,
                    length: 1,
                    convRule: rule82
                }, {
                    start: 659,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 660,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 661,
                    length: 27,
                    convRule: rule14
                }, {
                    start: 688,
                    length: 18,
                    convRule: rule83
                }, {
                    start: 706,
                    length: 4,
                    convRule: rule10
                }, {
                    start: 710,
                    length: 12,
                    convRule: rule83
                }, {
                    start: 722,
                    length: 14,
                    convRule: rule10
                }, {
                    start: 736,
                    length: 5,
                    convRule: rule83
                }, {
                    start: 741,
                    length: 7,
                    convRule: rule10
                }, {
                    start: 748,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 749,
                    length: 1,
                    convRule: rule10
                }, {
                    start: 750,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 751,
                    length: 17,
                    convRule: rule10
                }, {
                    start: 768,
                    length: 69,
                    convRule: rule84
                }, {
                    start: 837,
                    length: 1,
                    convRule: rule85
                }, {
                    start: 838,
                    length: 42,
                    convRule: rule84
                }, {
                    start: 880,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 881,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 882,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 883,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 884,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 885,
                    length: 1,
                    convRule: rule10
                }, {
                    start: 886,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 887,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 890,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 891,
                    length: 3,
                    convRule: rule40
                }, {
                    start: 894,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 900,
                    length: 2,
                    convRule: rule10
                }, {
                    start: 902,
                    length: 1,
                    convRule: rule86
                }, {
                    start: 903,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 904,
                    length: 3,
                    convRule: rule87
                }, {
                    start: 908,
                    length: 1,
                    convRule: rule88
                }, {
                    start: 910,
                    length: 2,
                    convRule: rule89
                }, {
                    start: 912,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 913,
                    length: 17,
                    convRule: rule9
                }, {
                    start: 931,
                    length: 9,
                    convRule: rule9
                }, {
                    start: 940,
                    length: 1,
                    convRule: rule90
                }, {
                    start: 941,
                    length: 3,
                    convRule: rule91
                }, {
                    start: 944,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 945,
                    length: 17,
                    convRule: rule12
                }, {
                    start: 962,
                    length: 1,
                    convRule: rule92
                }, {
                    start: 963,
                    length: 9,
                    convRule: rule12
                }, {
                    start: 972,
                    length: 1,
                    convRule: rule93
                }, {
                    start: 973,
                    length: 2,
                    convRule: rule94
                }, {
                    start: 975,
                    length: 1,
                    convRule: rule95
                }, {
                    start: 976,
                    length: 1,
                    convRule: rule96
                }, {
                    start: 977,
                    length: 1,
                    convRule: rule97
                }, {
                    start: 978,
                    length: 3,
                    convRule: rule98
                }, {
                    start: 981,
                    length: 1,
                    convRule: rule99
                }, {
                    start: 982,
                    length: 1,
                    convRule: rule100
                }, {
                    start: 983,
                    length: 1,
                    convRule: rule101
                }, {
                    start: 984,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 985,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 986,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 987,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 988,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 989,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 990,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 991,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 992,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 993,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 994,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 995,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 996,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 997,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 998,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 999,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1000,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1001,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1002,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1003,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1004,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1005,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1006,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1007,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1008,
                    length: 1,
                    convRule: rule102
                }, {
                    start: 1009,
                    length: 1,
                    convRule: rule103
                }, {
                    start: 1010,
                    length: 1,
                    convRule: rule104
                }, {
                    start: 1011,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 1012,
                    length: 1,
                    convRule: rule105
                }, {
                    start: 1013,
                    length: 1,
                    convRule: rule106
                }, {
                    start: 1014,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 1015,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1016,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1017,
                    length: 1,
                    convRule: rule107
                }, {
                    start: 1018,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1019,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1020,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 1021,
                    length: 3,
                    convRule: rule53
                }, {
                    start: 1024,
                    length: 16,
                    convRule: rule108
                }, {
                    start: 1040,
                    length: 32,
                    convRule: rule9
                }, {
                    start: 1072,
                    length: 32,
                    convRule: rule12
                }, {
                    start: 1104,
                    length: 16,
                    convRule: rule103
                }, {
                    start: 1120,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1121,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1122,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1123,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1124,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1125,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1126,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1127,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1128,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1129,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1130,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1131,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1132,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1133,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1134,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1135,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1136,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1137,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1138,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1139,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1140,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1141,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1142,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1143,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1144,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1145,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1146,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1147,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1148,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1149,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1150,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1151,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1152,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1153,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1154,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 1155,
                    length: 5,
                    convRule: rule84
                }, {
                    start: 1160,
                    length: 2,
                    convRule: rule109
                }, {
                    start: 1162,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1163,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1164,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1165,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1166,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1167,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1168,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1169,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1170,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1171,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1172,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1173,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1174,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1175,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1176,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1177,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1178,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1179,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1180,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1181,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1182,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1183,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1184,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1185,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1186,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1187,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1188,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1189,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1190,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1191,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1192,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1193,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1194,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1195,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1196,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1197,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1198,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1199,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1200,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1201,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1202,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1203,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1204,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1205,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1206,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1207,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1208,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1209,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1210,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1211,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1212,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1213,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1214,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1215,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1216,
                    length: 1,
                    convRule: rule110
                }, {
                    start: 1217,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1218,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1219,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1220,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1221,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1222,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1223,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1224,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1225,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1226,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1227,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1228,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1229,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1230,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1231,
                    length: 1,
                    convRule: rule111
                }, {
                    start: 1232,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1233,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1234,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1235,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1236,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1237,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1238,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1239,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1240,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1241,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1242,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1243,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1244,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1245,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1246,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1247,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1248,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1249,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1250,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1251,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1252,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1253,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1254,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1255,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1256,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1257,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1258,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1259,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1260,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1261,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1262,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1263,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1264,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1265,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1266,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1267,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1268,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1269,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1270,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1271,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1272,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1273,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1274,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1275,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1276,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1277,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1278,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1279,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1280,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1281,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1282,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1283,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1284,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1285,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1286,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1287,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1288,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1289,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1290,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1291,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1292,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1293,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1294,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1295,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1296,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1297,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1298,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1299,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1300,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1301,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1302,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1303,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1304,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1305,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1306,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1307,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1308,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1309,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1310,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1311,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1312,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1313,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1314,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1315,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1316,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1317,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1318,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 1319,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 1329,
                    length: 38,
                    convRule: rule112
                }, {
                    start: 1369,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 1370,
                    length: 6,
                    convRule: rule2
                }, {
                    start: 1377,
                    length: 38,
                    convRule: rule113
                }, {
                    start: 1415,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 1417,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 1418,
                    length: 1,
                    convRule: rule7
                }, {
                    start: 1425,
                    length: 45,
                    convRule: rule84
                }, {
                    start: 1470,
                    length: 1,
                    convRule: rule7
                }, {
                    start: 1471,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 1472,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 1473,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 1475,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 1476,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 1478,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 1479,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 1488,
                    length: 27,
                    convRule: rule45
                }, {
                    start: 1520,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 1523,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 1536,
                    length: 4,
                    convRule: rule16
                }, {
                    start: 1542,
                    length: 3,
                    convRule: rule6
                }, {
                    start: 1545,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 1547,
                    length: 1,
                    convRule: rule3
                }, {
                    start: 1548,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 1550,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 1552,
                    length: 11,
                    convRule: rule84
                }, {
                    start: 1563,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 1566,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 1568,
                    length: 32,
                    convRule: rule45
                }, {
                    start: 1600,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 1601,
                    length: 10,
                    convRule: rule45
                }, {
                    start: 1611,
                    length: 21,
                    convRule: rule84
                }, {
                    start: 1632,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 1642,
                    length: 4,
                    convRule: rule2
                }, {
                    start: 1646,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 1648,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 1649,
                    length: 99,
                    convRule: rule45
                }, {
                    start: 1748,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 1749,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 1750,
                    length: 7,
                    convRule: rule84
                }, {
                    start: 1757,
                    length: 1,
                    convRule: rule16
                }, {
                    start: 1758,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 1759,
                    length: 6,
                    convRule: rule84
                }, {
                    start: 1765,
                    length: 2,
                    convRule: rule83
                }, {
                    start: 1767,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 1769,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 1770,
                    length: 4,
                    convRule: rule84
                }, {
                    start: 1774,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 1776,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 1786,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 1789,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 1791,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 1792,
                    length: 14,
                    convRule: rule2
                }, {
                    start: 1807,
                    length: 1,
                    convRule: rule16
                }, {
                    start: 1808,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 1809,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 1810,
                    length: 30,
                    convRule: rule45
                }, {
                    start: 1840,
                    length: 27,
                    convRule: rule84
                }, {
                    start: 1869,
                    length: 89,
                    convRule: rule45
                }, {
                    start: 1958,
                    length: 11,
                    convRule: rule84
                }, {
                    start: 1969,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 1984,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 1994,
                    length: 33,
                    convRule: rule45
                }, {
                    start: 2027,
                    length: 9,
                    convRule: rule84
                }, {
                    start: 2036,
                    length: 2,
                    convRule: rule83
                }, {
                    start: 2038,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 2039,
                    length: 3,
                    convRule: rule2
                }, {
                    start: 2042,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 2048,
                    length: 22,
                    convRule: rule45
                }, {
                    start: 2070,
                    length: 4,
                    convRule: rule84
                }, {
                    start: 2074,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 2075,
                    length: 9,
                    convRule: rule84
                }, {
                    start: 2084,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 2085,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 2088,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 2089,
                    length: 5,
                    convRule: rule84
                }, {
                    start: 2096,
                    length: 15,
                    convRule: rule2
                }, {
                    start: 2112,
                    length: 25,
                    convRule: rule45
                }, {
                    start: 2137,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 2142,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 2304,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 2307,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 2308,
                    length: 54,
                    convRule: rule45
                }, {
                    start: 2362,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 2363,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 2364,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 2365,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 2366,
                    length: 3,
                    convRule: rule114
                }, {
                    start: 2369,
                    length: 8,
                    convRule: rule84
                }, {
                    start: 2377,
                    length: 4,
                    convRule: rule114
                }, {
                    start: 2381,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 2382,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 2384,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 2385,
                    length: 7,
                    convRule: rule84
                }, {
                    start: 2392,
                    length: 10,
                    convRule: rule45
                }, {
                    start: 2402,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 2404,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 2406,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 2416,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 2417,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 2418,
                    length: 6,
                    convRule: rule45
                }, {
                    start: 2425,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 2433,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 2434,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 2437,
                    length: 8,
                    convRule: rule45
                }, {
                    start: 2447,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 2451,
                    length: 22,
                    convRule: rule45
                }, {
                    start: 2474,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 2482,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 2486,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 2492,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 2493,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 2494,
                    length: 3,
                    convRule: rule114
                }, {
                    start: 2497,
                    length: 4,
                    convRule: rule84
                }, {
                    start: 2503,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 2507,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 2509,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 2510,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 2519,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 2524,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 2527,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 2530,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 2534,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 2544,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 2546,
                    length: 2,
                    convRule: rule3
                }, {
                    start: 2548,
                    length: 6,
                    convRule: rule17
                }, {
                    start: 2554,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 2555,
                    length: 1,
                    convRule: rule3
                }, {
                    start: 2561,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 2563,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 2565,
                    length: 6,
                    convRule: rule45
                }, {
                    start: 2575,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 2579,
                    length: 22,
                    convRule: rule45
                }, {
                    start: 2602,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 2610,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 2613,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 2616,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 2620,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 2622,
                    length: 3,
                    convRule: rule114
                }, {
                    start: 2625,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 2631,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 2635,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 2641,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 2649,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 2654,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 2662,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 2672,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 2674,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 2677,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 2689,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 2691,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 2693,
                    length: 9,
                    convRule: rule45
                }, {
                    start: 2703,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 2707,
                    length: 22,
                    convRule: rule45
                }, {
                    start: 2730,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 2738,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 2741,
                    length: 5,
                    convRule: rule45
                }, {
                    start: 2748,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 2749,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 2750,
                    length: 3,
                    convRule: rule114
                }, {
                    start: 2753,
                    length: 5,
                    convRule: rule84
                }, {
                    start: 2759,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 2761,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 2763,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 2765,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 2768,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 2784,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 2786,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 2790,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 2801,
                    length: 1,
                    convRule: rule3
                }, {
                    start: 2817,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 2818,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 2821,
                    length: 8,
                    convRule: rule45
                }, {
                    start: 2831,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 2835,
                    length: 22,
                    convRule: rule45
                }, {
                    start: 2858,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 2866,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 2869,
                    length: 5,
                    convRule: rule45
                }, {
                    start: 2876,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 2877,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 2878,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 2879,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 2880,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 2881,
                    length: 4,
                    convRule: rule84
                }, {
                    start: 2887,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 2891,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 2893,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 2902,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 2903,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 2908,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 2911,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 2914,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 2918,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 2928,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 2929,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 2930,
                    length: 6,
                    convRule: rule17
                }, {
                    start: 2946,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 2947,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 2949,
                    length: 6,
                    convRule: rule45
                }, {
                    start: 2958,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 2962,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 2969,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 2972,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 2974,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 2979,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 2984,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 2990,
                    length: 12,
                    convRule: rule45
                }, {
                    start: 3006,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 3008,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 3009,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 3014,
                    length: 3,
                    convRule: rule114
                }, {
                    start: 3018,
                    length: 3,
                    convRule: rule114
                }, {
                    start: 3021,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 3024,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 3031,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 3046,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 3056,
                    length: 3,
                    convRule: rule17
                }, {
                    start: 3059,
                    length: 6,
                    convRule: rule13
                }, {
                    start: 3065,
                    length: 1,
                    convRule: rule3
                }, {
                    start: 3066,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 3073,
                    length: 3,
                    convRule: rule114
                }, {
                    start: 3077,
                    length: 8,
                    convRule: rule45
                }, {
                    start: 3086,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 3090,
                    length: 23,
                    convRule: rule45
                }, {
                    start: 3114,
                    length: 10,
                    convRule: rule45
                }, {
                    start: 3125,
                    length: 5,
                    convRule: rule45
                }, {
                    start: 3133,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 3134,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 3137,
                    length: 4,
                    convRule: rule114
                }, {
                    start: 3142,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 3146,
                    length: 4,
                    convRule: rule84
                }, {
                    start: 3157,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 3160,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 3168,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 3170,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 3174,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 3192,
                    length: 7,
                    convRule: rule17
                }, {
                    start: 3199,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 3202,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 3205,
                    length: 8,
                    convRule: rule45
                }, {
                    start: 3214,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 3218,
                    length: 23,
                    convRule: rule45
                }, {
                    start: 3242,
                    length: 10,
                    convRule: rule45
                }, {
                    start: 3253,
                    length: 5,
                    convRule: rule45
                }, {
                    start: 3260,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 3261,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 3262,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 3263,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 3264,
                    length: 5,
                    convRule: rule114
                }, {
                    start: 3270,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 3271,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 3274,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 3276,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 3285,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 3294,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 3296,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 3298,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 3302,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 3313,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 3330,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 3333,
                    length: 8,
                    convRule: rule45
                }, {
                    start: 3342,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 3346,
                    length: 41,
                    convRule: rule45
                }, {
                    start: 3389,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 3390,
                    length: 3,
                    convRule: rule114
                }, {
                    start: 3393,
                    length: 4,
                    convRule: rule84
                }, {
                    start: 3398,
                    length: 3,
                    convRule: rule114
                }, {
                    start: 3402,
                    length: 3,
                    convRule: rule114
                }, {
                    start: 3405,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 3406,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 3415,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 3424,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 3426,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 3430,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 3440,
                    length: 6,
                    convRule: rule17
                }, {
                    start: 3449,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 3450,
                    length: 6,
                    convRule: rule45
                }, {
                    start: 3458,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 3461,
                    length: 18,
                    convRule: rule45
                }, {
                    start: 3482,
                    length: 24,
                    convRule: rule45
                }, {
                    start: 3507,
                    length: 9,
                    convRule: rule45
                }, {
                    start: 3517,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 3520,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 3530,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 3535,
                    length: 3,
                    convRule: rule114
                }, {
                    start: 3538,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 3542,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 3544,
                    length: 8,
                    convRule: rule114
                }, {
                    start: 3570,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 3572,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 3585,
                    length: 48,
                    convRule: rule45
                }, {
                    start: 3633,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 3634,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 3636,
                    length: 7,
                    convRule: rule84
                }, {
                    start: 3647,
                    length: 1,
                    convRule: rule3
                }, {
                    start: 3648,
                    length: 6,
                    convRule: rule45
                }, {
                    start: 3654,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 3655,
                    length: 8,
                    convRule: rule84
                }, {
                    start: 3663,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 3664,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 3674,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 3713,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 3716,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 3719,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 3722,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 3725,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 3732,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 3737,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 3745,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 3749,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 3751,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 3754,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 3757,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 3761,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 3762,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 3764,
                    length: 6,
                    convRule: rule84
                }, {
                    start: 3771,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 3773,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 3776,
                    length: 5,
                    convRule: rule45
                }, {
                    start: 3782,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 3784,
                    length: 6,
                    convRule: rule84
                }, {
                    start: 3792,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 3804,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 3840,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 3841,
                    length: 3,
                    convRule: rule13
                }, {
                    start: 3844,
                    length: 15,
                    convRule: rule2
                }, {
                    start: 3859,
                    length: 5,
                    convRule: rule13
                }, {
                    start: 3864,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 3866,
                    length: 6,
                    convRule: rule13
                }, {
                    start: 3872,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 3882,
                    length: 10,
                    convRule: rule17
                }, {
                    start: 3892,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 3893,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 3894,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 3895,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 3896,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 3897,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 3898,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 3899,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 3900,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 3901,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 3902,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 3904,
                    length: 8,
                    convRule: rule45
                }, {
                    start: 3913,
                    length: 36,
                    convRule: rule45
                }, {
                    start: 3953,
                    length: 14,
                    convRule: rule84
                }, {
                    start: 3967,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 3968,
                    length: 5,
                    convRule: rule84
                }, {
                    start: 3973,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 3974,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 3976,
                    length: 5,
                    convRule: rule45
                }, {
                    start: 3981,
                    length: 11,
                    convRule: rule84
                }, {
                    start: 3993,
                    length: 36,
                    convRule: rule84
                }, {
                    start: 4030,
                    length: 8,
                    convRule: rule13
                }, {
                    start: 4038,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 4039,
                    length: 6,
                    convRule: rule13
                }, {
                    start: 4046,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 4048,
                    length: 5,
                    convRule: rule2
                }, {
                    start: 4053,
                    length: 4,
                    convRule: rule13
                }, {
                    start: 4057,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 4096,
                    length: 43,
                    convRule: rule45
                }, {
                    start: 4139,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 4141,
                    length: 4,
                    convRule: rule84
                }, {
                    start: 4145,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 4146,
                    length: 6,
                    convRule: rule84
                }, {
                    start: 4152,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 4153,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 4155,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 4157,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 4159,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 4160,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 4170,
                    length: 6,
                    convRule: rule2
                }, {
                    start: 4176,
                    length: 6,
                    convRule: rule45
                }, {
                    start: 4182,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 4184,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 4186,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 4190,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 4193,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 4194,
                    length: 3,
                    convRule: rule114
                }, {
                    start: 4197,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 4199,
                    length: 7,
                    convRule: rule114
                }, {
                    start: 4206,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 4209,
                    length: 4,
                    convRule: rule84
                }, {
                    start: 4213,
                    length: 13,
                    convRule: rule45
                }, {
                    start: 4226,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 4227,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 4229,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 4231,
                    length: 6,
                    convRule: rule114
                }, {
                    start: 4237,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 4238,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 4239,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 4240,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 4250,
                    length: 3,
                    convRule: rule114
                }, {
                    start: 4253,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 4254,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 4256,
                    length: 38,
                    convRule: rule115
                }, {
                    start: 4304,
                    length: 43,
                    convRule: rule45
                }, {
                    start: 4347,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 4348,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 4352,
                    length: 329,
                    convRule: rule45
                }, {
                    start: 4682,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 4688,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 4696,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 4698,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 4704,
                    length: 41,
                    convRule: rule45
                }, {
                    start: 4746,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 4752,
                    length: 33,
                    convRule: rule45
                }, {
                    start: 4786,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 4792,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 4800,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 4802,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 4808,
                    length: 15,
                    convRule: rule45
                }, {
                    start: 4824,
                    length: 57,
                    convRule: rule45
                }, {
                    start: 4882,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 4888,
                    length: 67,
                    convRule: rule45
                }, {
                    start: 4957,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 4960,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 4961,
                    length: 8,
                    convRule: rule2
                }, {
                    start: 4969,
                    length: 20,
                    convRule: rule17
                }, {
                    start: 4992,
                    length: 16,
                    convRule: rule45
                }, {
                    start: 5008,
                    length: 10,
                    convRule: rule13
                }, {
                    start: 5024,
                    length: 85,
                    convRule: rule45
                }, {
                    start: 5120,
                    length: 1,
                    convRule: rule7
                }, {
                    start: 5121,
                    length: 620,
                    convRule: rule45
                }, {
                    start: 5741,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 5743,
                    length: 17,
                    convRule: rule45
                }, {
                    start: 5760,
                    length: 1,
                    convRule: rule1
                }, {
                    start: 5761,
                    length: 26,
                    convRule: rule45
                }, {
                    start: 5787,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 5788,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 5792,
                    length: 75,
                    convRule: rule45
                }, {
                    start: 5867,
                    length: 3,
                    convRule: rule2
                }, {
                    start: 5870,
                    length: 3,
                    convRule: rule116
                }, {
                    start: 5888,
                    length: 13,
                    convRule: rule45
                }, {
                    start: 5902,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 5906,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 5920,
                    length: 18,
                    convRule: rule45
                }, {
                    start: 5938,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 5941,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 5952,
                    length: 18,
                    convRule: rule45
                }, {
                    start: 5970,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 5984,
                    length: 13,
                    convRule: rule45
                }, {
                    start: 5998,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 6002,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 6016,
                    length: 52,
                    convRule: rule45
                }, {
                    start: 6068,
                    length: 2,
                    convRule: rule16
                }, {
                    start: 6070,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 6071,
                    length: 7,
                    convRule: rule84
                }, {
                    start: 6078,
                    length: 8,
                    convRule: rule114
                }, {
                    start: 6086,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 6087,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 6089,
                    length: 11,
                    convRule: rule84
                }, {
                    start: 6100,
                    length: 3,
                    convRule: rule2
                }, {
                    start: 6103,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 6104,
                    length: 3,
                    convRule: rule2
                }, {
                    start: 6107,
                    length: 1,
                    convRule: rule3
                }, {
                    start: 6108,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 6109,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 6112,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 6128,
                    length: 10,
                    convRule: rule17
                }, {
                    start: 6144,
                    length: 6,
                    convRule: rule2
                }, {
                    start: 6150,
                    length: 1,
                    convRule: rule7
                }, {
                    start: 6151,
                    length: 4,
                    convRule: rule2
                }, {
                    start: 6155,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 6158,
                    length: 1,
                    convRule: rule1
                }, {
                    start: 6160,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 6176,
                    length: 35,
                    convRule: rule45
                }, {
                    start: 6211,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 6212,
                    length: 52,
                    convRule: rule45
                }, {
                    start: 6272,
                    length: 41,
                    convRule: rule45
                }, {
                    start: 6313,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 6314,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 6320,
                    length: 70,
                    convRule: rule45
                }, {
                    start: 6400,
                    length: 29,
                    convRule: rule45
                }, {
                    start: 6432,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 6435,
                    length: 4,
                    convRule: rule114
                }, {
                    start: 6439,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 6441,
                    length: 3,
                    convRule: rule114
                }, {
                    start: 6448,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 6450,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 6451,
                    length: 6,
                    convRule: rule114
                }, {
                    start: 6457,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 6464,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 6468,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 6470,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 6480,
                    length: 30,
                    convRule: rule45
                }, {
                    start: 6512,
                    length: 5,
                    convRule: rule45
                }, {
                    start: 6528,
                    length: 44,
                    convRule: rule45
                }, {
                    start: 6576,
                    length: 17,
                    convRule: rule114
                }, {
                    start: 6593,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 6600,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 6608,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 6618,
                    length: 1,
                    convRule: rule17
                }, {
                    start: 6622,
                    length: 34,
                    convRule: rule13
                }, {
                    start: 6656,
                    length: 23,
                    convRule: rule45
                }, {
                    start: 6679,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 6681,
                    length: 3,
                    convRule: rule114
                }, {
                    start: 6686,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 6688,
                    length: 53,
                    convRule: rule45
                }, {
                    start: 6741,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 6742,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 6743,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 6744,
                    length: 7,
                    convRule: rule84
                }, {
                    start: 6752,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 6753,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 6754,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 6755,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 6757,
                    length: 8,
                    convRule: rule84
                }, {
                    start: 6765,
                    length: 6,
                    convRule: rule114
                }, {
                    start: 6771,
                    length: 10,
                    convRule: rule84
                }, {
                    start: 6783,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 6784,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 6800,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 6816,
                    length: 7,
                    convRule: rule2
                }, {
                    start: 6823,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 6824,
                    length: 6,
                    convRule: rule2
                }, {
                    start: 6912,
                    length: 4,
                    convRule: rule84
                }, {
                    start: 6916,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 6917,
                    length: 47,
                    convRule: rule45
                }, {
                    start: 6964,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 6965,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 6966,
                    length: 5,
                    convRule: rule84
                }, {
                    start: 6971,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 6972,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 6973,
                    length: 5,
                    convRule: rule114
                }, {
                    start: 6978,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 6979,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 6981,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 6992,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 7002,
                    length: 7,
                    convRule: rule2
                }, {
                    start: 7009,
                    length: 10,
                    convRule: rule13
                }, {
                    start: 7019,
                    length: 9,
                    convRule: rule84
                }, {
                    start: 7028,
                    length: 9,
                    convRule: rule13
                }, {
                    start: 7040,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 7042,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 7043,
                    length: 30,
                    convRule: rule45
                }, {
                    start: 7073,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 7074,
                    length: 4,
                    convRule: rule84
                }, {
                    start: 7078,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 7080,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 7082,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 7086,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 7088,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 7104,
                    length: 38,
                    convRule: rule45
                }, {
                    start: 7142,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 7143,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 7144,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 7146,
                    length: 3,
                    convRule: rule114
                }, {
                    start: 7149,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 7150,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 7151,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 7154,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 7164,
                    length: 4,
                    convRule: rule2
                }, {
                    start: 7168,
                    length: 36,
                    convRule: rule45
                }, {
                    start: 7204,
                    length: 8,
                    convRule: rule114
                }, {
                    start: 7212,
                    length: 8,
                    convRule: rule84
                }, {
                    start: 7220,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 7222,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 7227,
                    length: 5,
                    convRule: rule2
                }, {
                    start: 7232,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 7245,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 7248,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 7258,
                    length: 30,
                    convRule: rule45
                }, {
                    start: 7288,
                    length: 6,
                    convRule: rule83
                }, {
                    start: 7294,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 7376,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 7379,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 7380,
                    length: 13,
                    convRule: rule84
                }, {
                    start: 7393,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 7394,
                    length: 7,
                    convRule: rule84
                }, {
                    start: 7401,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 7405,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 7406,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 7410,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 7424,
                    length: 44,
                    convRule: rule14
                }, {
                    start: 7468,
                    length: 54,
                    convRule: rule83
                }, {
                    start: 7522,
                    length: 22,
                    convRule: rule14
                }, {
                    start: 7544,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 7545,
                    length: 1,
                    convRule: rule117
                }, {
                    start: 7546,
                    length: 3,
                    convRule: rule14
                }, {
                    start: 7549,
                    length: 1,
                    convRule: rule118
                }, {
                    start: 7550,
                    length: 29,
                    convRule: rule14
                }, {
                    start: 7579,
                    length: 37,
                    convRule: rule83
                }, {
                    start: 7616,
                    length: 39,
                    convRule: rule84
                }, {
                    start: 7676,
                    length: 4,
                    convRule: rule84
                }, {
                    start: 7680,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7681,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7682,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7683,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7684,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7685,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7686,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7687,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7688,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7689,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7690,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7691,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7692,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7693,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7694,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7695,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7696,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7697,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7698,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7699,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7700,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7701,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7702,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7703,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7704,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7705,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7706,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7707,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7708,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7709,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7710,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7711,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7712,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7713,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7714,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7715,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7716,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7717,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7718,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7719,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7720,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7721,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7722,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7723,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7724,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7725,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7726,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7727,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7728,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7729,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7730,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7731,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7732,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7733,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7734,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7735,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7736,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7737,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7738,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7739,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7740,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7741,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7742,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7743,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7744,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7745,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7746,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7747,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7748,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7749,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7750,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7751,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7752,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7753,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7754,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7755,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7756,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7757,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7758,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7759,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7760,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7761,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7762,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7763,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7764,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7765,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7766,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7767,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7768,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7769,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7770,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7771,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7772,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7773,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7774,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7775,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7776,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7777,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7778,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7779,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7780,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7781,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7782,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7783,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7784,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7785,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7786,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7787,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7788,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7789,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7790,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7791,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7792,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7793,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7794,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7795,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7796,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7797,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7798,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7799,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7800,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7801,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7802,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7803,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7804,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7805,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7806,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7807,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7808,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7809,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7810,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7811,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7812,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7813,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7814,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7815,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7816,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7817,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7818,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7819,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7820,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7821,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7822,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7823,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7824,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7825,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7826,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7827,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7828,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7829,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7830,
                    length: 5,
                    convRule: rule14
                }, {
                    start: 7835,
                    length: 1,
                    convRule: rule119
                }, {
                    start: 7836,
                    length: 2,
                    convRule: rule14
                }, {
                    start: 7838,
                    length: 1,
                    convRule: rule120
                }, {
                    start: 7839,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 7840,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7841,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7842,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7843,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7844,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7845,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7846,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7847,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7848,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7849,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7850,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7851,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7852,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7853,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7854,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7855,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7856,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7857,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7858,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7859,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7860,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7861,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7862,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7863,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7864,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7865,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7866,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7867,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7868,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7869,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7870,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7871,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7872,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7873,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7874,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7875,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7876,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7877,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7878,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7879,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7880,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7881,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7882,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7883,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7884,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7885,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7886,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7887,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7888,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7889,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7890,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7891,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7892,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7893,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7894,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7895,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7896,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7897,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7898,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7899,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7900,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7901,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7902,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7903,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7904,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7905,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7906,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7907,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7908,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7909,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7910,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7911,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7912,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7913,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7914,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7915,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7916,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7917,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7918,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7919,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7920,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7921,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7922,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7923,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7924,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7925,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7926,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7927,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7928,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7929,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7930,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7931,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7932,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7933,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7934,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 7935,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 7936,
                    length: 8,
                    convRule: rule121
                }, {
                    start: 7944,
                    length: 8,
                    convRule: rule122
                }, {
                    start: 7952,
                    length: 6,
                    convRule: rule121
                }, {
                    start: 7960,
                    length: 6,
                    convRule: rule122
                }, {
                    start: 7968,
                    length: 8,
                    convRule: rule121
                }, {
                    start: 7976,
                    length: 8,
                    convRule: rule122
                }, {
                    start: 7984,
                    length: 8,
                    convRule: rule121
                }, {
                    start: 7992,
                    length: 8,
                    convRule: rule122
                }, {
                    start: 8000,
                    length: 6,
                    convRule: rule121
                }, {
                    start: 8008,
                    length: 6,
                    convRule: rule122
                }, {
                    start: 8016,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 8017,
                    length: 1,
                    convRule: rule121
                }, {
                    start: 8018,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 8019,
                    length: 1,
                    convRule: rule121
                }, {
                    start: 8020,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 8021,
                    length: 1,
                    convRule: rule121
                }, {
                    start: 8022,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 8023,
                    length: 1,
                    convRule: rule121
                }, {
                    start: 8025,
                    length: 1,
                    convRule: rule122
                }, {
                    start: 8027,
                    length: 1,
                    convRule: rule122
                }, {
                    start: 8029,
                    length: 1,
                    convRule: rule122
                }, {
                    start: 8031,
                    length: 1,
                    convRule: rule122
                }, {
                    start: 8032,
                    length: 8,
                    convRule: rule121
                }, {
                    start: 8040,
                    length: 8,
                    convRule: rule122
                }, {
                    start: 8048,
                    length: 2,
                    convRule: rule123
                }, {
                    start: 8050,
                    length: 4,
                    convRule: rule124
                }, {
                    start: 8054,
                    length: 2,
                    convRule: rule125
                }, {
                    start: 8056,
                    length: 2,
                    convRule: rule126
                }, {
                    start: 8058,
                    length: 2,
                    convRule: rule127
                }, {
                    start: 8060,
                    length: 2,
                    convRule: rule128
                }, {
                    start: 8064,
                    length: 8,
                    convRule: rule121
                }, {
                    start: 8072,
                    length: 8,
                    convRule: rule129
                }, {
                    start: 8080,
                    length: 8,
                    convRule: rule121
                }, {
                    start: 8088,
                    length: 8,
                    convRule: rule129
                }, {
                    start: 8096,
                    length: 8,
                    convRule: rule121
                }, {
                    start: 8104,
                    length: 8,
                    convRule: rule129
                }, {
                    start: 8112,
                    length: 2,
                    convRule: rule121
                }, {
                    start: 8114,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 8115,
                    length: 1,
                    convRule: rule130
                }, {
                    start: 8116,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 8118,
                    length: 2,
                    convRule: rule14
                }, {
                    start: 8120,
                    length: 2,
                    convRule: rule122
                }, {
                    start: 8122,
                    length: 2,
                    convRule: rule131
                }, {
                    start: 8124,
                    length: 1,
                    convRule: rule132
                }, {
                    start: 8125,
                    length: 1,
                    convRule: rule10
                }, {
                    start: 8126,
                    length: 1,
                    convRule: rule133
                }, {
                    start: 8127,
                    length: 3,
                    convRule: rule10
                }, {
                    start: 8130,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 8131,
                    length: 1,
                    convRule: rule130
                }, {
                    start: 8132,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 8134,
                    length: 2,
                    convRule: rule14
                }, {
                    start: 8136,
                    length: 4,
                    convRule: rule134
                }, {
                    start: 8140,
                    length: 1,
                    convRule: rule132
                }, {
                    start: 8141,
                    length: 3,
                    convRule: rule10
                }, {
                    start: 8144,
                    length: 2,
                    convRule: rule121
                }, {
                    start: 8146,
                    length: 2,
                    convRule: rule14
                }, {
                    start: 8150,
                    length: 2,
                    convRule: rule14
                }, {
                    start: 8152,
                    length: 2,
                    convRule: rule122
                }, {
                    start: 8154,
                    length: 2,
                    convRule: rule135
                }, {
                    start: 8157,
                    length: 3,
                    convRule: rule10
                }, {
                    start: 8160,
                    length: 2,
                    convRule: rule121
                }, {
                    start: 8162,
                    length: 3,
                    convRule: rule14
                }, {
                    start: 8165,
                    length: 1,
                    convRule: rule104
                }, {
                    start: 8166,
                    length: 2,
                    convRule: rule14
                }, {
                    start: 8168,
                    length: 2,
                    convRule: rule122
                }, {
                    start: 8170,
                    length: 2,
                    convRule: rule136
                }, {
                    start: 8172,
                    length: 1,
                    convRule: rule107
                }, {
                    start: 8173,
                    length: 3,
                    convRule: rule10
                }, {
                    start: 8178,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 8179,
                    length: 1,
                    convRule: rule130
                }, {
                    start: 8180,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 8182,
                    length: 2,
                    convRule: rule14
                }, {
                    start: 8184,
                    length: 2,
                    convRule: rule137
                }, {
                    start: 8186,
                    length: 2,
                    convRule: rule138
                }, {
                    start: 8188,
                    length: 1,
                    convRule: rule132
                }, {
                    start: 8189,
                    length: 2,
                    convRule: rule10
                }, {
                    start: 8192,
                    length: 11,
                    convRule: rule1
                }, {
                    start: 8203,
                    length: 5,
                    convRule: rule16
                }, {
                    start: 8208,
                    length: 6,
                    convRule: rule7
                }, {
                    start: 8214,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 8216,
                    length: 1,
                    convRule: rule15
                }, {
                    start: 8217,
                    length: 1,
                    convRule: rule19
                }, {
                    start: 8218,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 8219,
                    length: 2,
                    convRule: rule15
                }, {
                    start: 8221,
                    length: 1,
                    convRule: rule19
                }, {
                    start: 8222,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 8223,
                    length: 1,
                    convRule: rule15
                }, {
                    start: 8224,
                    length: 8,
                    convRule: rule2
                }, {
                    start: 8232,
                    length: 1,
                    convRule: rule139
                }, {
                    start: 8233,
                    length: 1,
                    convRule: rule140
                }, {
                    start: 8234,
                    length: 5,
                    convRule: rule16
                }, {
                    start: 8239,
                    length: 1,
                    convRule: rule1
                }, {
                    start: 8240,
                    length: 9,
                    convRule: rule2
                }, {
                    start: 8249,
                    length: 1,
                    convRule: rule15
                }, {
                    start: 8250,
                    length: 1,
                    convRule: rule19
                }, {
                    start: 8251,
                    length: 4,
                    convRule: rule2
                }, {
                    start: 8255,
                    length: 2,
                    convRule: rule11
                }, {
                    start: 8257,
                    length: 3,
                    convRule: rule2
                }, {
                    start: 8260,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 8261,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 8262,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 8263,
                    length: 11,
                    convRule: rule2
                }, {
                    start: 8274,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 8275,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 8276,
                    length: 1,
                    convRule: rule11
                }, {
                    start: 8277,
                    length: 10,
                    convRule: rule2
                }, {
                    start: 8287,
                    length: 1,
                    convRule: rule1
                }, {
                    start: 8288,
                    length: 5,
                    convRule: rule16
                }, {
                    start: 8298,
                    length: 6,
                    convRule: rule16
                }, {
                    start: 8304,
                    length: 1,
                    convRule: rule17
                }, {
                    start: 8305,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 8308,
                    length: 6,
                    convRule: rule17
                }, {
                    start: 8314,
                    length: 3,
                    convRule: rule6
                }, {
                    start: 8317,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 8318,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 8319,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 8320,
                    length: 10,
                    convRule: rule17
                }, {
                    start: 8330,
                    length: 3,
                    convRule: rule6
                }, {
                    start: 8333,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 8334,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 8336,
                    length: 13,
                    convRule: rule83
                }, {
                    start: 8352,
                    length: 26,
                    convRule: rule3
                }, {
                    start: 8400,
                    length: 13,
                    convRule: rule84
                }, {
                    start: 8413,
                    length: 4,
                    convRule: rule109
                }, {
                    start: 8417,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 8418,
                    length: 3,
                    convRule: rule109
                }, {
                    start: 8421,
                    length: 12,
                    convRule: rule84
                }, {
                    start: 8448,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 8450,
                    length: 1,
                    convRule: rule98
                }, {
                    start: 8451,
                    length: 4,
                    convRule: rule13
                }, {
                    start: 8455,
                    length: 1,
                    convRule: rule98
                }, {
                    start: 8456,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 8458,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 8459,
                    length: 3,
                    convRule: rule98
                }, {
                    start: 8462,
                    length: 2,
                    convRule: rule14
                }, {
                    start: 8464,
                    length: 3,
                    convRule: rule98
                }, {
                    start: 8467,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 8468,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 8469,
                    length: 1,
                    convRule: rule98
                }, {
                    start: 8470,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 8472,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 8473,
                    length: 5,
                    convRule: rule98
                }, {
                    start: 8478,
                    length: 6,
                    convRule: rule13
                }, {
                    start: 8484,
                    length: 1,
                    convRule: rule98
                }, {
                    start: 8485,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 8486,
                    length: 1,
                    convRule: rule141
                }, {
                    start: 8487,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 8488,
                    length: 1,
                    convRule: rule98
                }, {
                    start: 8489,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 8490,
                    length: 1,
                    convRule: rule142
                }, {
                    start: 8491,
                    length: 1,
                    convRule: rule143
                }, {
                    start: 8492,
                    length: 2,
                    convRule: rule98
                }, {
                    start: 8494,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 8495,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 8496,
                    length: 2,
                    convRule: rule98
                }, {
                    start: 8498,
                    length: 1,
                    convRule: rule144
                }, {
                    start: 8499,
                    length: 1,
                    convRule: rule98
                }, {
                    start: 8500,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 8501,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 8505,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 8506,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 8508,
                    length: 2,
                    convRule: rule14
                }, {
                    start: 8510,
                    length: 2,
                    convRule: rule98
                }, {
                    start: 8512,
                    length: 5,
                    convRule: rule6
                }, {
                    start: 8517,
                    length: 1,
                    convRule: rule98
                }, {
                    start: 8518,
                    length: 4,
                    convRule: rule14
                }, {
                    start: 8522,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 8523,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 8524,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 8526,
                    length: 1,
                    convRule: rule145
                }, {
                    start: 8527,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 8528,
                    length: 16,
                    convRule: rule17
                }, {
                    start: 8544,
                    length: 16,
                    convRule: rule146
                }, {
                    start: 8560,
                    length: 16,
                    convRule: rule147
                }, {
                    start: 8576,
                    length: 3,
                    convRule: rule116
                }, {
                    start: 8579,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 8580,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 8581,
                    length: 4,
                    convRule: rule116
                }, {
                    start: 8585,
                    length: 1,
                    convRule: rule17
                }, {
                    start: 8592,
                    length: 5,
                    convRule: rule6
                }, {
                    start: 8597,
                    length: 5,
                    convRule: rule13
                }, {
                    start: 8602,
                    length: 2,
                    convRule: rule6
                }, {
                    start: 8604,
                    length: 4,
                    convRule: rule13
                }, {
                    start: 8608,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 8609,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 8611,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 8612,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 8614,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 8615,
                    length: 7,
                    convRule: rule13
                }, {
                    start: 8622,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 8623,
                    length: 31,
                    convRule: rule13
                }, {
                    start: 8654,
                    length: 2,
                    convRule: rule6
                }, {
                    start: 8656,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 8658,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 8659,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 8660,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 8661,
                    length: 31,
                    convRule: rule13
                }, {
                    start: 8692,
                    length: 268,
                    convRule: rule6
                }, {
                    start: 8960,
                    length: 8,
                    convRule: rule13
                }, {
                    start: 8968,
                    length: 4,
                    convRule: rule6
                }, {
                    start: 8972,
                    length: 20,
                    convRule: rule13
                }, {
                    start: 8992,
                    length: 2,
                    convRule: rule6
                }, {
                    start: 8994,
                    length: 7,
                    convRule: rule13
                }, {
                    start: 9001,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 9002,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 9003,
                    length: 81,
                    convRule: rule13
                }, {
                    start: 9084,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 9085,
                    length: 30,
                    convRule: rule13
                }, {
                    start: 9115,
                    length: 25,
                    convRule: rule6
                }, {
                    start: 9140,
                    length: 40,
                    convRule: rule13
                }, {
                    start: 9180,
                    length: 6,
                    convRule: rule6
                }, {
                    start: 9186,
                    length: 18,
                    convRule: rule13
                }, {
                    start: 9216,
                    length: 39,
                    convRule: rule13
                }, {
                    start: 9280,
                    length: 11,
                    convRule: rule13
                }, {
                    start: 9312,
                    length: 60,
                    convRule: rule17
                }, {
                    start: 9372,
                    length: 26,
                    convRule: rule13
                }, {
                    start: 9398,
                    length: 26,
                    convRule: rule148
                }, {
                    start: 9424,
                    length: 26,
                    convRule: rule149
                }, {
                    start: 9450,
                    length: 22,
                    convRule: rule17
                }, {
                    start: 9472,
                    length: 183,
                    convRule: rule13
                }, {
                    start: 9655,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 9656,
                    length: 9,
                    convRule: rule13
                }, {
                    start: 9665,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 9666,
                    length: 54,
                    convRule: rule13
                }, {
                    start: 9720,
                    length: 8,
                    convRule: rule6
                }, {
                    start: 9728,
                    length: 111,
                    convRule: rule13
                }, {
                    start: 9839,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 9840,
                    length: 144,
                    convRule: rule13
                }, {
                    start: 9985,
                    length: 103,
                    convRule: rule13
                }, {
                    start: 10088,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10089,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10090,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10091,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10092,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10093,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10094,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10095,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10096,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10097,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10098,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10099,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10100,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10101,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10102,
                    length: 30,
                    convRule: rule17
                }, {
                    start: 10132,
                    length: 44,
                    convRule: rule13
                }, {
                    start: 10176,
                    length: 5,
                    convRule: rule6
                }, {
                    start: 10181,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10182,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10183,
                    length: 4,
                    convRule: rule6
                }, {
                    start: 10188,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 10190,
                    length: 24,
                    convRule: rule6
                }, {
                    start: 10214,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10215,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10216,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10217,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10218,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10219,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10220,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10221,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10222,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10223,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10224,
                    length: 16,
                    convRule: rule6
                }, {
                    start: 10240,
                    length: 256,
                    convRule: rule13
                }, {
                    start: 10496,
                    length: 131,
                    convRule: rule6
                }, {
                    start: 10627,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10628,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10629,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10630,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10631,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10632,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10633,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10634,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10635,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10636,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10637,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10638,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10639,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10640,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10641,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10642,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10643,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10644,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10645,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10646,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10647,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10648,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10649,
                    length: 63,
                    convRule: rule6
                }, {
                    start: 10712,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10713,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10714,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10715,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10716,
                    length: 32,
                    convRule: rule6
                }, {
                    start: 10748,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 10749,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 10750,
                    length: 258,
                    convRule: rule6
                }, {
                    start: 11008,
                    length: 48,
                    convRule: rule13
                }, {
                    start: 11056,
                    length: 21,
                    convRule: rule6
                }, {
                    start: 11077,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 11079,
                    length: 6,
                    convRule: rule6
                }, {
                    start: 11088,
                    length: 10,
                    convRule: rule13
                }, {
                    start: 11264,
                    length: 47,
                    convRule: rule112
                }, {
                    start: 11312,
                    length: 47,
                    convRule: rule113
                }, {
                    start: 11360,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11361,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11362,
                    length: 1,
                    convRule: rule150
                }, {
                    start: 11363,
                    length: 1,
                    convRule: rule151
                }, {
                    start: 11364,
                    length: 1,
                    convRule: rule152
                }, {
                    start: 11365,
                    length: 1,
                    convRule: rule153
                }, {
                    start: 11366,
                    length: 1,
                    convRule: rule154
                }, {
                    start: 11367,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11368,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11369,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11370,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11371,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11372,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11373,
                    length: 1,
                    convRule: rule155
                }, {
                    start: 11374,
                    length: 1,
                    convRule: rule156
                }, {
                    start: 11375,
                    length: 1,
                    convRule: rule157
                }, {
                    start: 11376,
                    length: 1,
                    convRule: rule158
                }, {
                    start: 11377,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 11378,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11379,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11380,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 11381,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11382,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11383,
                    length: 6,
                    convRule: rule14
                }, {
                    start: 11389,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 11390,
                    length: 2,
                    convRule: rule159
                }, {
                    start: 11392,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11393,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11394,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11395,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11396,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11397,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11398,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11399,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11400,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11401,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11402,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11403,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11404,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11405,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11406,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11407,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11408,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11409,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11410,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11411,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11412,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11413,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11414,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11415,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11416,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11417,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11418,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11419,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11420,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11421,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11422,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11423,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11424,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11425,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11426,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11427,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11428,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11429,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11430,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11431,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11432,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11433,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11434,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11435,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11436,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11437,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11438,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11439,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11440,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11441,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11442,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11443,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11444,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11445,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11446,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11447,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11448,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11449,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11450,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11451,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11452,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11453,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11454,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11455,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11456,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11457,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11458,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11459,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11460,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11461,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11462,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11463,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11464,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11465,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11466,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11467,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11468,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11469,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11470,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11471,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11472,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11473,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11474,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11475,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11476,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11477,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11478,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11479,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11480,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11481,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11482,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11483,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11484,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11485,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11486,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11487,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11488,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11489,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11490,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11491,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11492,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 11493,
                    length: 6,
                    convRule: rule13
                }, {
                    start: 11499,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11500,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11501,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 11502,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 11503,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 11513,
                    length: 4,
                    convRule: rule2
                }, {
                    start: 11517,
                    length: 1,
                    convRule: rule17
                }, {
                    start: 11518,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 11520,
                    length: 38,
                    convRule: rule160
                }, {
                    start: 11568,
                    length: 54,
                    convRule: rule45
                }, {
                    start: 11631,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 11632,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 11647,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 11648,
                    length: 23,
                    convRule: rule45
                }, {
                    start: 11680,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 11688,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 11696,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 11704,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 11712,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 11720,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 11728,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 11736,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 11744,
                    length: 32,
                    convRule: rule84
                }, {
                    start: 11776,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 11778,
                    length: 1,
                    convRule: rule15
                }, {
                    start: 11779,
                    length: 1,
                    convRule: rule19
                }, {
                    start: 11780,
                    length: 1,
                    convRule: rule15
                }, {
                    start: 11781,
                    length: 1,
                    convRule: rule19
                }, {
                    start: 11782,
                    length: 3,
                    convRule: rule2
                }, {
                    start: 11785,
                    length: 1,
                    convRule: rule15
                }, {
                    start: 11786,
                    length: 1,
                    convRule: rule19
                }, {
                    start: 11787,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 11788,
                    length: 1,
                    convRule: rule15
                }, {
                    start: 11789,
                    length: 1,
                    convRule: rule19
                }, {
                    start: 11790,
                    length: 9,
                    convRule: rule2
                }, {
                    start: 11799,
                    length: 1,
                    convRule: rule7
                }, {
                    start: 11800,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 11802,
                    length: 1,
                    convRule: rule7
                }, {
                    start: 11803,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 11804,
                    length: 1,
                    convRule: rule15
                }, {
                    start: 11805,
                    length: 1,
                    convRule: rule19
                }, {
                    start: 11806,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 11808,
                    length: 1,
                    convRule: rule15
                }, {
                    start: 11809,
                    length: 1,
                    convRule: rule19
                }, {
                    start: 11810,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 11811,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 11812,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 11813,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 11814,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 11815,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 11816,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 11817,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 11818,
                    length: 5,
                    convRule: rule2
                }, {
                    start: 11823,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 11824,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 11904,
                    length: 26,
                    convRule: rule13
                }, {
                    start: 11931,
                    length: 89,
                    convRule: rule13
                }, {
                    start: 12032,
                    length: 214,
                    convRule: rule13
                }, {
                    start: 12272,
                    length: 12,
                    convRule: rule13
                }, {
                    start: 12288,
                    length: 1,
                    convRule: rule1
                }, {
                    start: 12289,
                    length: 3,
                    convRule: rule2
                }, {
                    start: 12292,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 12293,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 12294,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 12295,
                    length: 1,
                    convRule: rule116
                }, {
                    start: 12296,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 12297,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 12298,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 12299,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 12300,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 12301,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 12302,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 12303,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 12304,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 12305,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 12306,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 12308,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 12309,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 12310,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 12311,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 12312,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 12313,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 12314,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 12315,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 12316,
                    length: 1,
                    convRule: rule7
                }, {
                    start: 12317,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 12318,
                    length: 2,
                    convRule: rule5
                }, {
                    start: 12320,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 12321,
                    length: 9,
                    convRule: rule116
                }, {
                    start: 12330,
                    length: 6,
                    convRule: rule84
                }, {
                    start: 12336,
                    length: 1,
                    convRule: rule7
                }, {
                    start: 12337,
                    length: 5,
                    convRule: rule83
                }, {
                    start: 12342,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 12344,
                    length: 3,
                    convRule: rule116
                }, {
                    start: 12347,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 12348,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 12349,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 12350,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 12353,
                    length: 86,
                    convRule: rule45
                }, {
                    start: 12441,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 12443,
                    length: 2,
                    convRule: rule10
                }, {
                    start: 12445,
                    length: 2,
                    convRule: rule83
                }, {
                    start: 12447,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 12448,
                    length: 1,
                    convRule: rule7
                }, {
                    start: 12449,
                    length: 90,
                    convRule: rule45
                }, {
                    start: 12539,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 12540,
                    length: 3,
                    convRule: rule83
                }, {
                    start: 12543,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 12549,
                    length: 41,
                    convRule: rule45
                }, {
                    start: 12593,
                    length: 94,
                    convRule: rule45
                }, {
                    start: 12688,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 12690,
                    length: 4,
                    convRule: rule17
                }, {
                    start: 12694,
                    length: 10,
                    convRule: rule13
                }, {
                    start: 12704,
                    length: 27,
                    convRule: rule45
                }, {
                    start: 12736,
                    length: 36,
                    convRule: rule13
                }, {
                    start: 12784,
                    length: 16,
                    convRule: rule45
                }, {
                    start: 12800,
                    length: 31,
                    convRule: rule13
                }, {
                    start: 12832,
                    length: 10,
                    convRule: rule17
                }, {
                    start: 12842,
                    length: 39,
                    convRule: rule13
                }, {
                    start: 12881,
                    length: 15,
                    convRule: rule17
                }, {
                    start: 12896,
                    length: 32,
                    convRule: rule13
                }, {
                    start: 12928,
                    length: 10,
                    convRule: rule17
                }, {
                    start: 12938,
                    length: 39,
                    convRule: rule13
                }, {
                    start: 12977,
                    length: 15,
                    convRule: rule17
                }, {
                    start: 12992,
                    length: 63,
                    convRule: rule13
                }, {
                    start: 13056,
                    length: 256,
                    convRule: rule13
                }, {
                    start: 13312,
                    length: 6582,
                    convRule: rule45
                }, {
                    start: 19904,
                    length: 64,
                    convRule: rule13
                }, {
                    start: 19968,
                    length: 20940,
                    convRule: rule45
                }, {
                    start: 40960,
                    length: 21,
                    convRule: rule45
                }, {
                    start: 40981,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 40982,
                    length: 1143,
                    convRule: rule45
                }, {
                    start: 42128,
                    length: 55,
                    convRule: rule13
                }, {
                    start: 42192,
                    length: 40,
                    convRule: rule45
                }, {
                    start: 42232,
                    length: 6,
                    convRule: rule83
                }, {
                    start: 42238,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 42240,
                    length: 268,
                    convRule: rule45
                }, {
                    start: 42508,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 42509,
                    length: 3,
                    convRule: rule2
                }, {
                    start: 42512,
                    length: 16,
                    convRule: rule45
                }, {
                    start: 42528,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 42538,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 42560,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42561,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42562,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42563,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42564,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42565,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42566,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42567,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42568,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42569,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42570,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42571,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42572,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42573,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42574,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42575,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42576,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42577,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42578,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42579,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42580,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42581,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42582,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42583,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42584,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42585,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42586,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42587,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42588,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42589,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42590,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42591,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42592,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42593,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42594,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42595,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42596,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42597,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42598,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42599,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42600,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42601,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42602,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42603,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42604,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42605,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42606,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 42607,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 42608,
                    length: 3,
                    convRule: rule109
                }, {
                    start: 42611,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 42620,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 42622,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 42623,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 42624,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42625,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42626,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42627,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42628,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42629,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42630,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42631,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42632,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42633,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42634,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42635,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42636,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42637,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42638,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42639,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42640,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42641,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42642,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42643,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42644,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42645,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42646,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42647,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42656,
                    length: 70,
                    convRule: rule45
                }, {
                    start: 42726,
                    length: 10,
                    convRule: rule116
                }, {
                    start: 42736,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 42738,
                    length: 6,
                    convRule: rule2
                }, {
                    start: 42752,
                    length: 23,
                    convRule: rule10
                }, {
                    start: 42775,
                    length: 9,
                    convRule: rule83
                }, {
                    start: 42784,
                    length: 2,
                    convRule: rule10
                }, {
                    start: 42786,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42787,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42788,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42789,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42790,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42791,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42792,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42793,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42794,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42795,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42796,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42797,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42798,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42799,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42800,
                    length: 2,
                    convRule: rule14
                }, {
                    start: 42802,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42803,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42804,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42805,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42806,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42807,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42808,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42809,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42810,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42811,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42812,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42813,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42814,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42815,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42816,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42817,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42818,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42819,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42820,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42821,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42822,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42823,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42824,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42825,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42826,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42827,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42828,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42829,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42830,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42831,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42832,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42833,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42834,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42835,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42836,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42837,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42838,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42839,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42840,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42841,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42842,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42843,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42844,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42845,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42846,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42847,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42848,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42849,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42850,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42851,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42852,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42853,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42854,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42855,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42856,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42857,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42858,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42859,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42860,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42861,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42862,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42863,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42864,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 42865,
                    length: 8,
                    convRule: rule14
                }, {
                    start: 42873,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42874,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42875,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42876,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42877,
                    length: 1,
                    convRule: rule161
                }, {
                    start: 42878,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42879,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42880,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42881,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42882,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42883,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42884,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42885,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42886,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42887,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42888,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 42889,
                    length: 2,
                    convRule: rule10
                }, {
                    start: 42891,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42892,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42893,
                    length: 1,
                    convRule: rule162
                }, {
                    start: 42894,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 42896,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42897,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42912,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42913,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42914,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42915,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42916,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42917,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42918,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42919,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 42920,
                    length: 1,
                    convRule: rule21
                }, {
                    start: 42921,
                    length: 1,
                    convRule: rule22
                }, {
                    start: 43002,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 43003,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 43010,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 43011,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 43014,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 43015,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 43019,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 43020,
                    length: 23,
                    convRule: rule45
                }, {
                    start: 43043,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 43045,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 43047,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 43048,
                    length: 4,
                    convRule: rule13
                }, {
                    start: 43056,
                    length: 6,
                    convRule: rule17
                }, {
                    start: 43062,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 43064,
                    length: 1,
                    convRule: rule3
                }, {
                    start: 43065,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 43072,
                    length: 52,
                    convRule: rule45
                }, {
                    start: 43124,
                    length: 4,
                    convRule: rule2
                }, {
                    start: 43136,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 43138,
                    length: 50,
                    convRule: rule45
                }, {
                    start: 43188,
                    length: 16,
                    convRule: rule114
                }, {
                    start: 43204,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 43214,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 43216,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 43232,
                    length: 18,
                    convRule: rule84
                }, {
                    start: 43250,
                    length: 6,
                    convRule: rule45
                }, {
                    start: 43256,
                    length: 3,
                    convRule: rule2
                }, {
                    start: 43259,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 43264,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 43274,
                    length: 28,
                    convRule: rule45
                }, {
                    start: 43302,
                    length: 8,
                    convRule: rule84
                }, {
                    start: 43310,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 43312,
                    length: 23,
                    convRule: rule45
                }, {
                    start: 43335,
                    length: 11,
                    convRule: rule84
                }, {
                    start: 43346,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 43359,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 43360,
                    length: 29,
                    convRule: rule45
                }, {
                    start: 43392,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 43395,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 43396,
                    length: 47,
                    convRule: rule45
                }, {
                    start: 43443,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 43444,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 43446,
                    length: 4,
                    convRule: rule84
                }, {
                    start: 43450,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 43452,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 43453,
                    length: 4,
                    convRule: rule114
                }, {
                    start: 43457,
                    length: 13,
                    convRule: rule2
                }, {
                    start: 43471,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 43472,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 43486,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 43520,
                    length: 41,
                    convRule: rule45
                }, {
                    start: 43561,
                    length: 6,
                    convRule: rule84
                }, {
                    start: 43567,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 43569,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 43571,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 43573,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 43584,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 43587,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 43588,
                    length: 8,
                    convRule: rule45
                }, {
                    start: 43596,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 43597,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 43600,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 43612,
                    length: 4,
                    convRule: rule2
                }, {
                    start: 43616,
                    length: 16,
                    convRule: rule45
                }, {
                    start: 43632,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 43633,
                    length: 6,
                    convRule: rule45
                }, {
                    start: 43639,
                    length: 3,
                    convRule: rule13
                }, {
                    start: 43642,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 43643,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 43648,
                    length: 48,
                    convRule: rule45
                }, {
                    start: 43696,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 43697,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 43698,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 43701,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 43703,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 43705,
                    length: 5,
                    convRule: rule45
                }, {
                    start: 43710,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 43712,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 43713,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 43714,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 43739,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 43741,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 43742,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 43777,
                    length: 6,
                    convRule: rule45
                }, {
                    start: 43785,
                    length: 6,
                    convRule: rule45
                }, {
                    start: 43793,
                    length: 6,
                    convRule: rule45
                }, {
                    start: 43808,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 43816,
                    length: 7,
                    convRule: rule45
                }, {
                    start: 43968,
                    length: 35,
                    convRule: rule45
                }, {
                    start: 44003,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 44005,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 44006,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 44008,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 44009,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 44011,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 44012,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 44013,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 44016,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 44032,
                    length: 11172,
                    convRule: rule45
                }, {
                    start: 55216,
                    length: 23,
                    convRule: rule45
                }, {
                    start: 55243,
                    length: 49,
                    convRule: rule45
                }, {
                    start: 55296,
                    length: 896,
                    convRule: rule163
                }, {
                    start: 56192,
                    length: 128,
                    convRule: rule163
                }, {
                    start: 56320,
                    length: 1024,
                    convRule: rule163
                }, {
                    start: 57344,
                    length: 6400,
                    convRule: rule164
                }, {
                    start: 63744,
                    length: 302,
                    convRule: rule45
                }, {
                    start: 64048,
                    length: 62,
                    convRule: rule45
                }, {
                    start: 64112,
                    length: 106,
                    convRule: rule45
                }, {
                    start: 64256,
                    length: 7,
                    convRule: rule14
                }, {
                    start: 64275,
                    length: 5,
                    convRule: rule14
                }, {
                    start: 64285,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 64286,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 64287,
                    length: 10,
                    convRule: rule45
                }, {
                    start: 64297,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 64298,
                    length: 13,
                    convRule: rule45
                }, {
                    start: 64312,
                    length: 5,
                    convRule: rule45
                }, {
                    start: 64318,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 64320,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 64323,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 64326,
                    length: 108,
                    convRule: rule45
                }, {
                    start: 64434,
                    length: 16,
                    convRule: rule10
                }, {
                    start: 64467,
                    length: 363,
                    convRule: rule45
                }, {
                    start: 64830,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 64831,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 64848,
                    length: 64,
                    convRule: rule45
                }, {
                    start: 64914,
                    length: 54,
                    convRule: rule45
                }, {
                    start: 65008,
                    length: 12,
                    convRule: rule45
                }, {
                    start: 65020,
                    length: 1,
                    convRule: rule3
                }, {
                    start: 65021,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 65024,
                    length: 16,
                    convRule: rule84
                }, {
                    start: 65040,
                    length: 7,
                    convRule: rule2
                }, {
                    start: 65047,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 65048,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 65049,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 65056,
                    length: 7,
                    convRule: rule84
                }, {
                    start: 65072,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 65073,
                    length: 2,
                    convRule: rule7
                }, {
                    start: 65075,
                    length: 2,
                    convRule: rule11
                }, {
                    start: 65077,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 65078,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 65079,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 65080,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 65081,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 65082,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 65083,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 65084,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 65085,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 65086,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 65087,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 65088,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 65089,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 65090,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 65091,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 65092,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 65093,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 65095,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 65096,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 65097,
                    length: 4,
                    convRule: rule2
                }, {
                    start: 65101,
                    length: 3,
                    convRule: rule11
                }, {
                    start: 65104,
                    length: 3,
                    convRule: rule2
                }, {
                    start: 65108,
                    length: 4,
                    convRule: rule2
                }, {
                    start: 65112,
                    length: 1,
                    convRule: rule7
                }, {
                    start: 65113,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 65114,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 65115,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 65116,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 65117,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 65118,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 65119,
                    length: 3,
                    convRule: rule2
                }, {
                    start: 65122,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 65123,
                    length: 1,
                    convRule: rule7
                }, {
                    start: 65124,
                    length: 3,
                    convRule: rule6
                }, {
                    start: 65128,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 65129,
                    length: 1,
                    convRule: rule3
                }, {
                    start: 65130,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 65136,
                    length: 5,
                    convRule: rule45
                }, {
                    start: 65142,
                    length: 135,
                    convRule: rule45
                }, {
                    start: 65279,
                    length: 1,
                    convRule: rule16
                }, {
                    start: 65281,
                    length: 3,
                    convRule: rule2
                }, {
                    start: 65284,
                    length: 1,
                    convRule: rule3
                }, {
                    start: 65285,
                    length: 3,
                    convRule: rule2
                }, {
                    start: 65288,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 65289,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 65290,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 65291,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 65292,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 65293,
                    length: 1,
                    convRule: rule7
                }, {
                    start: 65294,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 65296,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 65306,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 65308,
                    length: 3,
                    convRule: rule6
                }, {
                    start: 65311,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 65313,
                    length: 26,
                    convRule: rule9
                }, {
                    start: 65339,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 65340,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 65341,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 65342,
                    length: 1,
                    convRule: rule10
                }, {
                    start: 65343,
                    length: 1,
                    convRule: rule11
                }, {
                    start: 65344,
                    length: 1,
                    convRule: rule10
                }, {
                    start: 65345,
                    length: 26,
                    convRule: rule12
                }, {
                    start: 65371,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 65372,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 65373,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 65374,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 65375,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 65376,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 65377,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 65378,
                    length: 1,
                    convRule: rule4
                }, {
                    start: 65379,
                    length: 1,
                    convRule: rule5
                }, {
                    start: 65380,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 65382,
                    length: 10,
                    convRule: rule45
                }, {
                    start: 65392,
                    length: 1,
                    convRule: rule83
                }, {
                    start: 65393,
                    length: 45,
                    convRule: rule45
                }, {
                    start: 65438,
                    length: 2,
                    convRule: rule83
                }, {
                    start: 65440,
                    length: 31,
                    convRule: rule45
                }, {
                    start: 65474,
                    length: 6,
                    convRule: rule45
                }, {
                    start: 65482,
                    length: 6,
                    convRule: rule45
                }, {
                    start: 65490,
                    length: 6,
                    convRule: rule45
                }, {
                    start: 65498,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 65504,
                    length: 2,
                    convRule: rule3
                }, {
                    start: 65506,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 65507,
                    length: 1,
                    convRule: rule10
                }, {
                    start: 65508,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 65509,
                    length: 2,
                    convRule: rule3
                }, {
                    start: 65512,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 65513,
                    length: 4,
                    convRule: rule6
                }, {
                    start: 65517,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 65529,
                    length: 3,
                    convRule: rule16
                }, {
                    start: 65532,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 65536,
                    length: 12,
                    convRule: rule45
                }, {
                    start: 65549,
                    length: 26,
                    convRule: rule45
                }, {
                    start: 65576,
                    length: 19,
                    convRule: rule45
                }, {
                    start: 65596,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 65599,
                    length: 15,
                    convRule: rule45
                }, {
                    start: 65616,
                    length: 14,
                    convRule: rule45
                }, {
                    start: 65664,
                    length: 123,
                    convRule: rule45
                }, {
                    start: 65792,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 65794,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 65799,
                    length: 45,
                    convRule: rule17
                }, {
                    start: 65847,
                    length: 9,
                    convRule: rule13
                }, {
                    start: 65856,
                    length: 53,
                    convRule: rule116
                }, {
                    start: 65909,
                    length: 4,
                    convRule: rule17
                }, {
                    start: 65913,
                    length: 17,
                    convRule: rule13
                }, {
                    start: 65930,
                    length: 1,
                    convRule: rule17
                }, {
                    start: 65936,
                    length: 12,
                    convRule: rule13
                }, {
                    start: 66000,
                    length: 45,
                    convRule: rule13
                }, {
                    start: 66045,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 66176,
                    length: 29,
                    convRule: rule45
                }, {
                    start: 66208,
                    length: 49,
                    convRule: rule45
                }, {
                    start: 66304,
                    length: 31,
                    convRule: rule45
                }, {
                    start: 66336,
                    length: 4,
                    convRule: rule17
                }, {
                    start: 66352,
                    length: 17,
                    convRule: rule45
                }, {
                    start: 66369,
                    length: 1,
                    convRule: rule116
                }, {
                    start: 66370,
                    length: 8,
                    convRule: rule45
                }, {
                    start: 66378,
                    length: 1,
                    convRule: rule116
                }, {
                    start: 66432,
                    length: 30,
                    convRule: rule45
                }, {
                    start: 66463,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 66464,
                    length: 36,
                    convRule: rule45
                }, {
                    start: 66504,
                    length: 8,
                    convRule: rule45
                }, {
                    start: 66512,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 66513,
                    length: 5,
                    convRule: rule116
                }, {
                    start: 66560,
                    length: 40,
                    convRule: rule165
                }, {
                    start: 66600,
                    length: 40,
                    convRule: rule166
                }, {
                    start: 66640,
                    length: 78,
                    convRule: rule45
                }, {
                    start: 66720,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 67584,
                    length: 6,
                    convRule: rule45
                }, {
                    start: 67592,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 67594,
                    length: 44,
                    convRule: rule45
                }, {
                    start: 67639,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 67644,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 67647,
                    length: 23,
                    convRule: rule45
                }, {
                    start: 67671,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 67672,
                    length: 8,
                    convRule: rule17
                }, {
                    start: 67840,
                    length: 22,
                    convRule: rule45
                }, {
                    start: 67862,
                    length: 6,
                    convRule: rule17
                }, {
                    start: 67871,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 67872,
                    length: 26,
                    convRule: rule45
                }, {
                    start: 67903,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 68096,
                    length: 1,
                    convRule: rule45
                }, {
                    start: 68097,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 68101,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 68108,
                    length: 4,
                    convRule: rule84
                }, {
                    start: 68112,
                    length: 4,
                    convRule: rule45
                }, {
                    start: 68117,
                    length: 3,
                    convRule: rule45
                }, {
                    start: 68121,
                    length: 27,
                    convRule: rule45
                }, {
                    start: 68152,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 68159,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 68160,
                    length: 8,
                    convRule: rule17
                }, {
                    start: 68176,
                    length: 9,
                    convRule: rule2
                }, {
                    start: 68192,
                    length: 29,
                    convRule: rule45
                }, {
                    start: 68221,
                    length: 2,
                    convRule: rule17
                }, {
                    start: 68223,
                    length: 1,
                    convRule: rule2
                }, {
                    start: 68352,
                    length: 54,
                    convRule: rule45
                }, {
                    start: 68409,
                    length: 7,
                    convRule: rule2
                }, {
                    start: 68416,
                    length: 22,
                    convRule: rule45
                }, {
                    start: 68440,
                    length: 8,
                    convRule: rule17
                }, {
                    start: 68448,
                    length: 19,
                    convRule: rule45
                }, {
                    start: 68472,
                    length: 8,
                    convRule: rule17
                }, {
                    start: 68608,
                    length: 73,
                    convRule: rule45
                }, {
                    start: 69216,
                    length: 31,
                    convRule: rule17
                }, {
                    start: 69632,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 69633,
                    length: 1,
                    convRule: rule84
                }, {
                    start: 69634,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 69635,
                    length: 53,
                    convRule: rule45
                }, {
                    start: 69688,
                    length: 15,
                    convRule: rule84
                }, {
                    start: 69703,
                    length: 7,
                    convRule: rule2
                }, {
                    start: 69714,
                    length: 20,
                    convRule: rule17
                }, {
                    start: 69734,
                    length: 10,
                    convRule: rule8
                }, {
                    start: 69760,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 69762,
                    length: 1,
                    convRule: rule114
                }, {
                    start: 69763,
                    length: 45,
                    convRule: rule45
                }, {
                    start: 69808,
                    length: 3,
                    convRule: rule114
                }, {
                    start: 69811,
                    length: 4,
                    convRule: rule84
                }, {
                    start: 69815,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 69817,
                    length: 2,
                    convRule: rule84
                }, {
                    start: 69819,
                    length: 2,
                    convRule: rule2
                }, {
                    start: 69821,
                    length: 1,
                    convRule: rule16
                }, {
                    start: 69822,
                    length: 4,
                    convRule: rule2
                }, {
                    start: 73728,
                    length: 879,
                    convRule: rule45
                }, {
                    start: 74752,
                    length: 99,
                    convRule: rule116
                }, {
                    start: 74864,
                    length: 4,
                    convRule: rule2
                }, {
                    start: 77824,
                    length: 1071,
                    convRule: rule45
                }, {
                    start: 92160,
                    length: 569,
                    convRule: rule45
                }, {
                    start: 110592,
                    length: 2,
                    convRule: rule45
                }, {
                    start: 118784,
                    length: 246,
                    convRule: rule13
                }, {
                    start: 119040,
                    length: 39,
                    convRule: rule13
                }, {
                    start: 119081,
                    length: 60,
                    convRule: rule13
                }, {
                    start: 119141,
                    length: 2,
                    convRule: rule114
                }, {
                    start: 119143,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 119146,
                    length: 3,
                    convRule: rule13
                }, {
                    start: 119149,
                    length: 6,
                    convRule: rule114
                }, {
                    start: 119155,
                    length: 8,
                    convRule: rule16
                }, {
                    start: 119163,
                    length: 8,
                    convRule: rule84
                }, {
                    start: 119171,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 119173,
                    length: 7,
                    convRule: rule84
                }, {
                    start: 119180,
                    length: 30,
                    convRule: rule13
                }, {
                    start: 119210,
                    length: 4,
                    convRule: rule84
                }, {
                    start: 119214,
                    length: 48,
                    convRule: rule13
                }, {
                    start: 119296,
                    length: 66,
                    convRule: rule13
                }, {
                    start: 119362,
                    length: 3,
                    convRule: rule84
                }, {
                    start: 119365,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 119552,
                    length: 87,
                    convRule: rule13
                }, {
                    start: 119648,
                    length: 18,
                    convRule: rule17
                }, {
                    start: 119808,
                    length: 26,
                    convRule: rule98
                }, {
                    start: 119834,
                    length: 26,
                    convRule: rule14
                }, {
                    start: 119860,
                    length: 26,
                    convRule: rule98
                }, {
                    start: 119886,
                    length: 7,
                    convRule: rule14
                }, {
                    start: 119894,
                    length: 18,
                    convRule: rule14
                }, {
                    start: 119912,
                    length: 26,
                    convRule: rule98
                }, {
                    start: 119938,
                    length: 26,
                    convRule: rule14
                }, {
                    start: 119964,
                    length: 1,
                    convRule: rule98
                }, {
                    start: 119966,
                    length: 2,
                    convRule: rule98
                }, {
                    start: 119970,
                    length: 1,
                    convRule: rule98
                }, {
                    start: 119973,
                    length: 2,
                    convRule: rule98
                }, {
                    start: 119977,
                    length: 4,
                    convRule: rule98
                }, {
                    start: 119982,
                    length: 8,
                    convRule: rule98
                }, {
                    start: 119990,
                    length: 4,
                    convRule: rule14
                }, {
                    start: 119995,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 119997,
                    length: 7,
                    convRule: rule14
                }, {
                    start: 120005,
                    length: 11,
                    convRule: rule14
                }, {
                    start: 120016,
                    length: 26,
                    convRule: rule98
                }, {
                    start: 120042,
                    length: 26,
                    convRule: rule14
                }, {
                    start: 120068,
                    length: 2,
                    convRule: rule98
                }, {
                    start: 120071,
                    length: 4,
                    convRule: rule98
                }, {
                    start: 120077,
                    length: 8,
                    convRule: rule98
                }, {
                    start: 120086,
                    length: 7,
                    convRule: rule98
                }, {
                    start: 120094,
                    length: 26,
                    convRule: rule14
                }, {
                    start: 120120,
                    length: 2,
                    convRule: rule98
                }, {
                    start: 120123,
                    length: 4,
                    convRule: rule98
                }, {
                    start: 120128,
                    length: 5,
                    convRule: rule98
                }, {
                    start: 120134,
                    length: 1,
                    convRule: rule98
                }, {
                    start: 120138,
                    length: 7,
                    convRule: rule98
                }, {
                    start: 120146,
                    length: 26,
                    convRule: rule14
                }, {
                    start: 120172,
                    length: 26,
                    convRule: rule98
                }, {
                    start: 120198,
                    length: 26,
                    convRule: rule14
                }, {
                    start: 120224,
                    length: 26,
                    convRule: rule98
                }, {
                    start: 120250,
                    length: 26,
                    convRule: rule14
                }, {
                    start: 120276,
                    length: 26,
                    convRule: rule98
                }, {
                    start: 120302,
                    length: 26,
                    convRule: rule14
                }, {
                    start: 120328,
                    length: 26,
                    convRule: rule98
                }, {
                    start: 120354,
                    length: 26,
                    convRule: rule14
                }, {
                    start: 120380,
                    length: 26,
                    convRule: rule98
                }, {
                    start: 120406,
                    length: 26,
                    convRule: rule14
                }, {
                    start: 120432,
                    length: 26,
                    convRule: rule98
                }, {
                    start: 120458,
                    length: 28,
                    convRule: rule14
                }, {
                    start: 120488,
                    length: 25,
                    convRule: rule98
                }, {
                    start: 120513,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 120514,
                    length: 25,
                    convRule: rule14
                }, {
                    start: 120539,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 120540,
                    length: 6,
                    convRule: rule14
                }, {
                    start: 120546,
                    length: 25,
                    convRule: rule98
                }, {
                    start: 120571,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 120572,
                    length: 25,
                    convRule: rule14
                }, {
                    start: 120597,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 120598,
                    length: 6,
                    convRule: rule14
                }, {
                    start: 120604,
                    length: 25,
                    convRule: rule98
                }, {
                    start: 120629,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 120630,
                    length: 25,
                    convRule: rule14
                }, {
                    start: 120655,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 120656,
                    length: 6,
                    convRule: rule14
                }, {
                    start: 120662,
                    length: 25,
                    convRule: rule98
                }, {
                    start: 120687,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 120688,
                    length: 25,
                    convRule: rule14
                }, {
                    start: 120713,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 120714,
                    length: 6,
                    convRule: rule14
                }, {
                    start: 120720,
                    length: 25,
                    convRule: rule98
                }, {
                    start: 120745,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 120746,
                    length: 25,
                    convRule: rule14
                }, {
                    start: 120771,
                    length: 1,
                    convRule: rule6
                }, {
                    start: 120772,
                    length: 6,
                    convRule: rule14
                }, {
                    start: 120778,
                    length: 1,
                    convRule: rule98
                }, {
                    start: 120779,
                    length: 1,
                    convRule: rule14
                }, {
                    start: 120782,
                    length: 50,
                    convRule: rule8
                }, {
                    start: 126976,
                    length: 44,
                    convRule: rule13
                }, {
                    start: 127024,
                    length: 100,
                    convRule: rule13
                }, {
                    start: 127136,
                    length: 15,
                    convRule: rule13
                }, {
                    start: 127153,
                    length: 14,
                    convRule: rule13
                }, {
                    start: 127169,
                    length: 15,
                    convRule: rule13
                }, {
                    start: 127185,
                    length: 15,
                    convRule: rule13
                }, {
                    start: 127232,
                    length: 11,
                    convRule: rule17
                }, {
                    start: 127248,
                    length: 31,
                    convRule: rule13
                }, {
                    start: 127280,
                    length: 58,
                    convRule: rule13
                }, {
                    start: 127344,
                    length: 43,
                    convRule: rule13
                }, {
                    start: 127462,
                    length: 29,
                    convRule: rule13
                }, {
                    start: 127504,
                    length: 43,
                    convRule: rule13
                }, {
                    start: 127552,
                    length: 9,
                    convRule: rule13
                }, {
                    start: 127568,
                    length: 2,
                    convRule: rule13
                }, {
                    start: 127744,
                    length: 33,
                    convRule: rule13
                }, {
                    start: 127792,
                    length: 6,
                    convRule: rule13
                }, {
                    start: 127799,
                    length: 70,
                    convRule: rule13
                }, {
                    start: 127872,
                    length: 20,
                    convRule: rule13
                }, {
                    start: 127904,
                    length: 37,
                    convRule: rule13
                }, {
                    start: 127942,
                    length: 5,
                    convRule: rule13
                }, {
                    start: 127968,
                    length: 17,
                    convRule: rule13
                }, {
                    start: 128000,
                    length: 63,
                    convRule: rule13
                }, {
                    start: 128064,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 128066,
                    length: 182,
                    convRule: rule13
                }, {
                    start: 128249,
                    length: 4,
                    convRule: rule13
                }, {
                    start: 128256,
                    length: 62,
                    convRule: rule13
                }, {
                    start: 128336,
                    length: 24,
                    convRule: rule13
                }, {
                    start: 128507,
                    length: 5,
                    convRule: rule13
                }, {
                    start: 128513,
                    length: 16,
                    convRule: rule13
                }, {
                    start: 128530,
                    length: 3,
                    convRule: rule13
                }, {
                    start: 128534,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 128536,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 128538,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 128540,
                    length: 3,
                    convRule: rule13
                }, {
                    start: 128544,
                    length: 6,
                    convRule: rule13
                }, {
                    start: 128552,
                    length: 4,
                    convRule: rule13
                }, {
                    start: 128557,
                    length: 1,
                    convRule: rule13
                }, {
                    start: 128560,
                    length: 4,
                    convRule: rule13
                }, {
                    start: 128565,
                    length: 12,
                    convRule: rule13
                }, {
                    start: 128581,
                    length: 11,
                    convRule: rule13
                }, {
                    start: 128640,
                    length: 70,
                    convRule: rule13
                }, {
                    start: 128768,
                    length: 116,
                    convRule: rule13
                }, {
                    start: 131072,
                    length: 42711,
                    convRule: rule45
                }, {
                    start: 173824,
                    length: 4149,
                    convRule: rule45
                }, {
                    start: 177984,
                    length: 222,
                    convRule: rule45
                }, {
                    start: 194560,
                    length: 542,
                    convRule: rule45
                }, {
                    start: 917505,
                    length: 1,
                    convRule: rule16
                }, {
                    start: 917536,
                    length: 96,
                    convRule: rule16
                }, {
                    start: 917760,
                    length: 240,
                    convRule: rule84
                }, {
                    start: 983040,
                    length: 65534,
                    convRule: rule164
                }, {
                    start: 1048576,
                    length: 65534,
                    convRule: rule164
                }];
                const checkAttr = categories => {
                    return $$char => {
                        const numOfBlocks = (() => {
                            const $28 = $$char < 256;
                            if ($28) {
                                return numLat1Blocks;
                            }
                            ;
                            return numBlocks;
                        })();
                        const maybeConversionRule = getRule(allchars)($$char)(numOfBlocks);
                        if (maybeConversionRule instanceof Data_Maybe.Nothing) {
                            return false;
                        }
                        ;
                        if (maybeConversionRule instanceof Data_Maybe.Just) {
                            return Data_Maybe.isJust(Data_Array.elemIndex(Data_Eq.eqInt)(maybeConversionRule.value0.category)(categories));
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.Char.Unicode.Internal (line 4800, column 8 - line 4802, column 92): ${[maybeConversionRule.constructor.name]}`);
                    };
                };
                const uIswalpha = checkAttr([gencatLL, gencatLU, gencatLT, gencatLM, gencatLO]);
                const uIswupper = checkAttr([gencatLU, gencatLT]);
                exports["uIswupper"] = uIswupper;
                exports["uIswalpha"] = uIswalpha;
                exports["uIswspace"] = uIswspace;
                exports["uTowupper"] = uTowupper;
                exports["uTowlower"] = uTowlower;
            })(PS);
            ($PS => {
                $PS["Data.Char.Unicode"] = $PS["Data.Char.Unicode"] || {};
                const exports = $PS["Data.Char.Unicode"];
                const $foreign = $PS["Data.Char.Unicode"];
                const Data_Boolean = $PS["Data.Boolean"];
                const Data_Char = $PS["Data.Char"];
                const Data_Char_Unicode_Internal = $PS["Data.Char.Unicode.Internal"];
                const Data_Maybe = $PS["Data.Maybe"];
                const toUpper = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowupper);
                const toLower = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowlower);
                const isUpper = $50 => {
                    return Data_Char_Unicode_Internal.uIswupper(Data_Char.toCharCode($50));
                };
                const isSpace = c => {
                    const uc = Data_Char.toCharCode(c);
                    const $14 = uc <= 823;
                    if ($14) {
                        return uc === 32 || (uc >= 9 && uc <= 13 || uc === 160);
                    }
                    ;
                    return Data_Char_Unicode_Internal.uIswspace(Data_Char.toCharCode(c));
                };
                const isOctDigit = c => {
                    const diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
                    return diff <= 7 && diff >= 0;
                };
                const isDigit = c => {
                    const diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
                    return diff <= 9 && diff >= 0;
                };
                const isHexDigit = c => {
                    return isDigit(c) || (((() => {
                        const diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("A") | 0;
                        return diff <= 5 && diff >= 0;
                    })() || (() => {
                        const diff = Data_Char.toCharCode(c) - Data_Char.toCharCode("a") | 0;
                        return diff <= 5 && diff >= 0;
                    })()));
                };
                const isAlpha = $55 => {
                    return Data_Char_Unicode_Internal.uIswalpha(Data_Char.toCharCode($55));
                };
                const digitToInt = c => {
                    const hexUpper = Data_Char.toCharCode(c) - Data_Char.toCharCode("A") | 0;
                    const hexLower = Data_Char.toCharCode(c) - Data_Char.toCharCode("a") | 0;
                    const dec = Data_Char.toCharCode(c) - Data_Char.toCharCode("0") | 0;
                    const result = (() => {
                        if (dec <= 9 && dec >= 0) {
                            return new Data_Maybe.Just(dec);
                        }
                        ;
                        if (hexLower <= 5 && hexLower >= 0) {
                            return Data_Maybe.Just.create(hexLower + 10 | 0);
                        }
                        ;
                        if (hexUpper <= 5 && hexUpper >= 0) {
                            return Data_Maybe.Just.create(hexUpper + 10 | 0);
                        }
                        ;
                        if (Data_Boolean.otherwise) {
                            return Data_Maybe.Nothing.value;
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.Char.Unicode (line 547, column 5 - line 547, column 24): ${[]}`);
                    })();
                    return result;
                };
                exports["isUpper"] = isUpper;
                exports["isAlpha"] = isAlpha;
                exports["isDigit"] = isDigit;
                exports["isOctDigit"] = isOctDigit;
                exports["isHexDigit"] = isHexDigit;
                exports["isSpace"] = isSpace;
                exports["digitToInt"] = digitToInt;
                exports["toLower"] = toLower;
                exports["toUpper"] = toUpper;
            })(PS);
            (exports => {
                exports.intSub = x => {
                    return y => {
                        return x - y | 0;
                    };
                };
            })(PS["Data.Ring"] = PS["Data.Ring"] || {});
            ($PS => {
                $PS["Data.Ring"] = $PS["Data.Ring"] || {};
                const exports = $PS["Data.Ring"];
                const $foreign = $PS["Data.Ring"];
                const Data_Semiring = $PS["Data.Semiring"];
                const Ring = function (Semiring0, sub) {
                    this.Semiring0 = Semiring0;
                    this.sub = sub;
                };
                const sub = dict => {
                    return dict.sub;
                };
                const ringInt = new Ring(() => {
                    return Data_Semiring.semiringInt;
                }, $foreign.intSub);
                const negate = dictRing => {
                    return a => {
                        return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
                    };
                };
                exports["Ring"] = Ring;
                exports["negate"] = negate;
                exports["ringInt"] = ringInt;
            })(PS);
            ($PS => {
                $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
                const exports = $PS["Data.CommutativeRing"];
                const Data_Ring = $PS["Data.Ring"];
                const CommutativeRing = function (Ring0) {
                    this.Ring0 = Ring0;
                };
                const commutativeRingInt = new CommutativeRing(() => {
                    return Data_Ring.ringInt;
                });
                exports["CommutativeRing"] = CommutativeRing;
                exports["commutativeRingInt"] = commutativeRingInt;
            })(PS);
            (exports => {
                const Decimal = require("decimal.js");
                Decimal.set({ precision: 30 });
                Decimal.set({ modulo: Decimal.EUCLID });
                exports.fromInt = x => {
                    return new Decimal(x);
                };
                exports["fromString'"] = nothing => {
                    return just => {
                        return str => {
                            try {
                                return just(new Decimal(str));
                            }
                            catch (e) {
                                return nothing;
                            }
                        };
                    };
                };
                exports.fromNumber = x => {
                    return new Decimal(x);
                };
                exports.toNumber = x => {
                    return x.toNumber();
                };
                exports.toString = x => {
                    return x.toString();
                };
                exports.isInteger = x => {
                    return x.isInteger();
                };
                exports.isFinite = x => {
                    return x.isFinite();
                };
                exports.toSignificantDigits = d => {
                    return x => {
                        return x.toSignificantDigits(d);
                    };
                };
                exports.dAdd = x => {
                    return y => {
                        return x.add(y);
                    };
                };
                exports.modulo = x => {
                    return y => {
                        return x.mod(y);
                    };
                };
                exports.dMul = x => {
                    return y => {
                        return x.mul(y);
                    };
                };
                exports.dSub = x => {
                    return y => {
                        return x.minus(y);
                    };
                };
                exports.dDiv = x => {
                    return y => {
                        return x.div(y);
                    };
                };
                exports.dEquals = x => {
                    return y => {
                        return x.equals(y);
                    };
                };
                exports.dCompare = x => {
                    return y => {
                        return x.cmp(y);
                    };
                };
                exports.abs = x => {
                    return x.abs();
                };
                exports.pow = x => {
                    return y => {
                        return x.pow(y);
                    };
                };
                exports.exp = x => {
                    return x.exp();
                };
                exports.acos = x => {
                    return x.acos();
                };
                exports.abs = x => {
                    return x.abs();
                };
                exports.acos = x => {
                    return x.acos();
                };
                exports.acosh = x => {
                    return x.acosh();
                };
                exports.asin = x => {
                    return x.asin();
                };
                exports.asinh = x => {
                    return x.asinh();
                };
                exports.atan = x => {
                    return x.atan();
                };
                exports.atanh = x => {
                    return x.atanh();
                };
                exports.atan2 = x => {
                    return y => {
                        return Decimal.atan2(x, y);
                    };
                };
                exports.ceil = x => {
                    return x.ceil();
                };
                exports.cos = x => {
                    return x.cos();
                };
                exports.cosh = x => {
                    return x.cosh();
                };
                exports.exp = x => {
                    return x.exp();
                };
                exports.floor = x => {
                    return x.floor();
                };
                exports.ln = x => {
                    return x.ln();
                };
                exports.log10 = x => {
                    return Decimal.log10(x);
                };
                exports.max = x => {
                    return y => {
                        return Decimal.max(x, y);
                    };
                };
                exports.min = x => {
                    return y => {
                        return Decimal.min(x, y);
                    };
                };
                exports.round = x => {
                    return x.round();
                };
                exports.sin = x => {
                    return x.sin();
                };
                exports.sinh = x => {
                    return x.sinh();
                };
                exports.tan = x => {
                    return x.tan();
                };
                exports.tanh = x => {
                    return x.tanh();
                };
                exports.e = Decimal.exp(1.0);
                exports.pi = new Decimal('3.14159265358979323846264338327950288419716939937510582097494459230781640628620899');
                const p = [
                    676.5203681218851,
                    -1259.1392167224028,
                    771.32342877765313,
                    -176.61502916214059,
                    12.507343278686905,
                    -0.13857109526572012,
                    9.9843695780195716e-6,
                    1.5056327351493116e-7,
                ];
                exports.gamma = z => {
                    let pval;
                    let i;
                    let x;
                    let y;
                    let t;
                    let zr;
                    const one = new Decimal(1.0);
                    if (z < 0.5) {
                        y = Decimal.div(exports.pi, Decimal.mul(Decimal.sin(exports.pi.mul(z)), exports.gamma(one.sub(z))));
                    }
                    else {
                        zr = z.sub(one);
                        x = new Decimal(0.99999999999980993);
                        i = 0;
                        for (i = 0; i < p.length; i++) {
                            pval = p[i];
                            x = x.add(Decimal.div(pval, zr.add(i).add(one)));
                        }
                        t = zr.add(p.length).sub(0.5);
                        y = Decimal.sqrt(exports.pi.mul(2.0))
                            .mul(Decimal.pow(t, zr.add(0.5)))
                            .mul(Decimal.exp(t.neg()))
                            .mul(x);
                    }
                    if (z.isInteger()) {
                        return y.round();
                    }
                    return y;
                };
            })(PS["Data.Decimal"] = PS["Data.Decimal"] || {});
            (exports => {
                exports.intDegree = x => {
                    return Math.min(Math.abs(x), 2147483647);
                };
                exports.intDiv = x => {
                    return y => {
                        if (y === 0)
                            return 0;
                        return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
                    };
                };
                exports.intMod = x => {
                    return y => {
                        if (y === 0)
                            return 0;
                        const yy = Math.abs(y);
                        return ((x % yy) + yy) % yy;
                    };
                };
            })(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
            ($PS => {
                $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
                const exports = $PS["Data.EuclideanRing"];
                const $foreign = $PS["Data.EuclideanRing"];
                const Data_CommutativeRing = $PS["Data.CommutativeRing"];
                const EuclideanRing = function (CommutativeRing0, degree, div, mod) {
                    this.CommutativeRing0 = CommutativeRing0;
                    this.degree = degree;
                    this.div = div;
                    this.mod = mod;
                };
                const mod = dict => {
                    return dict.mod;
                };
                const euclideanRingInt = new EuclideanRing(() => {
                    return Data_CommutativeRing.commutativeRingInt;
                }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
                const div = dict => {
                    return dict.div;
                };
                exports["EuclideanRing"] = EuclideanRing;
                exports["div"] = div;
                exports["mod"] = mod;
                exports["euclideanRingInt"] = euclideanRingInt;
            })(PS);
            (exports => {
                exports.showIntImpl = n => {
                    return n.toString();
                };
                exports.showNumberImpl = n => {
                    const str = n.toString();
                    return isNaN(`${str}.0`) ? str : `${str}.0`;
                };
                exports.showCharImpl = c => {
                    const code = c.charCodeAt(0);
                    if (code < 0x20 || code === 0x7F) {
                        switch (c) {
                            case "\x07": return "'\\a'";
                            case "\b": return "'\\b'";
                            case "\f": return "'\\f'";
                            case "\n": return "'\\n'";
                            case "\r": return "'\\r'";
                            case "\t": return "'\\t'";
                            case "\v": return "'\\v'";
                        }
                        return `'\\${code.toString(10)}'`;
                    }
                    return c === "'" || c === "\\" ? `'\\${c}'` : `'${c}'`;
                };
                exports.showStringImpl = s => {
                    const l = s.length;
                    return `"${s.replace(/[\0-\x1F\x7F"\\]/g, (c, i) => {
                        switch (c) {
                            case "\"":
                            case "\\":
                                return `\\${c}`;
                            case "\x07": return "\\a";
                            case "\b": return "\\b";
                            case "\f": return "\\f";
                            case "\n": return "\\n";
                            case "\r": return "\\r";
                            case "\t": return "\\t";
                            case "\v": return "\\v";
                        }
                        const k = i + 1;
                        const empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
                        return `\\${c.charCodeAt(0).toString(10)}${empty}`;
                    })}"`;
                };
                exports.showArrayImpl = f => {
                    return xs => {
                        const ss = [];
                        for (let i = 0, l = xs.length; i < l; i++) {
                            ss[i] = f(xs[i]);
                        }
                        return `[${ss.join(",")}]`;
                    };
                };
            })(PS["Data.Show"] = PS["Data.Show"] || {});
            ($PS => {
                $PS["Data.Show"] = $PS["Data.Show"] || {};
                const exports = $PS["Data.Show"];
                const $foreign = $PS["Data.Show"];
                const Show = function (show) {
                    this.show = show;
                };
                const showString = new Show($foreign.showStringImpl);
                const showNumber = new Show($foreign.showNumberImpl);
                const showInt = new Show($foreign.showIntImpl);
                const showChar = new Show($foreign.showCharImpl);
                const show = dict => {
                    return dict.show;
                };
                const showArray = dictShow => {
                    return new Show($foreign.showArrayImpl(show(dictShow)));
                };
                exports["Show"] = Show;
                exports["show"] = show;
                exports["showInt"] = showInt;
                exports["showNumber"] = showNumber;
                exports["showChar"] = showChar;
                exports["showString"] = showString;
                exports["showArray"] = showArray;
            })(PS);
            ($PS => {
                $PS["Data.Decimal"] = $PS["Data.Decimal"] || {};
                const exports = $PS["Data.Decimal"];
                const $foreign = $PS["Data.Decimal"];
                const Data_Boolean = $PS["Data.Boolean"];
                const Data_CommutativeRing = $PS["Data.CommutativeRing"];
                const Data_Eq = $PS["Data.Eq"];
                const Data_EuclideanRing = $PS["Data.EuclideanRing"];
                const Data_Maybe = $PS["Data.Maybe"];
                const Data_Ord = $PS["Data.Ord"];
                const Data_Ordering = $PS["Data.Ordering"];
                const Data_Ring = $PS["Data.Ring"];
                const Data_Semiring = $PS["Data.Semiring"];
                const Data_Show = $PS["Data.Show"];
                const showDecimal = new Data_Show.Show(x => {
                    return `(fromString "${$foreign.toString(x)}")`;
                });
                const semiringDecimal = new Data_Semiring.Semiring($foreign.dAdd, $foreign.dMul, $foreign.fromInt(1), $foreign.fromInt(0));
                const ringDecimal = new Data_Ring.Ring(() => {
                    return semiringDecimal;
                }, $foreign.dSub);
                const fromString = $foreign["fromString'"](Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
                const eqDecimal = new Data_Eq.Eq($foreign.dEquals);
                const ordDecimal = new Data_Ord.Ord(() => {
                    return eqDecimal;
                }, x => {
                    return y => {
                        const v = $foreign.dCompare(x)(y);
                        if (v === 1) {
                            return Data_Ordering.GT.value;
                        }
                        ;
                        if (v === 0) {
                            return Data_Ordering.EQ.value;
                        }
                        ;
                        return Data_Ordering.LT.value;
                    };
                });
                const commutativeRingDecimal = new Data_CommutativeRing.CommutativeRing(() => {
                    return ringDecimal;
                });
                const euclideanRingDecimal = new Data_EuclideanRing.EuclideanRing(() => {
                    return commutativeRingDecimal;
                }, v => {
                    return 1;
                }, $foreign.dDiv, v => {
                    return v1 => {
                        return Data_Semiring.zero(semiringDecimal);
                    };
                });
                const factorial = n => {
                    if (Data_Ord.lessThan(ordDecimal)(n)(Data_Semiring.zero(semiringDecimal))) {
                        return Data_EuclideanRing.div(euclideanRingDecimal)(Data_Semiring.one(semiringDecimal))(Data_Semiring.zero(semiringDecimal));
                    }
                    ;
                    if (Data_Boolean.otherwise) {
                        return $foreign.gamma($foreign.ceil(Data_Semiring.add(semiringDecimal)(n)(Data_Semiring.one(semiringDecimal))));
                    }
                    ;
                    throw new Error(`Failed pattern match at Data.Decimal (line 231, column 1 - line 231, column 30): ${[n.constructor.name]}`);
                };
                exports["fromString"] = fromString;
                exports["factorial"] = factorial;
                exports["eqDecimal"] = eqDecimal;
                exports["ordDecimal"] = ordDecimal;
                exports["showDecimal"] = showDecimal;
                exports["semiringDecimal"] = semiringDecimal;
                exports["ringDecimal"] = ringDecimal;
                exports["euclideanRingDecimal"] = euclideanRingDecimal;
                exports["fromInt"] = $foreign.fromInt;
                exports["fromNumber"] = $foreign.fromNumber;
                exports["toNumber"] = $foreign.toNumber;
                exports["toString"] = $foreign.toString;
                exports["isFinite"] = $foreign["isFinite"];
                exports["isInteger"] = $foreign.isInteger;
                exports["toSignificantDigits"] = $foreign.toSignificantDigits;
                exports["abs"] = $foreign.abs;
                exports["acos"] = $foreign.acos;
                exports["acosh"] = $foreign.acosh;
                exports["asin"] = $foreign.asin;
                exports["asinh"] = $foreign.asinh;
                exports["atan"] = $foreign.atan;
                exports["atan2"] = $foreign.atan2;
                exports["atanh"] = $foreign.atanh;
                exports["ceil"] = $foreign.ceil;
                exports["cos"] = $foreign.cos;
                exports["cosh"] = $foreign.cosh;
                exports["exp"] = $foreign.exp;
                exports["floor"] = $foreign.floor;
                exports["ln"] = $foreign.ln;
                exports["log10"] = $foreign.log10;
                exports["max"] = $foreign.max;
                exports["min"] = $foreign.min;
                exports["modulo"] = $foreign.modulo;
                exports["pow"] = $foreign.pow;
                exports["round"] = $foreign.round;
                exports["sin"] = $foreign.sin;
                exports["sinh"] = $foreign.sinh;
                exports["tan"] = $foreign.tan;
                exports["tanh"] = $foreign.tanh;
                exports["e"] = $foreign.e;
                exports["pi"] = $foreign.pi;
                exports["gamma"] = $foreign.gamma;
            })(PS);
            ($PS => {
                $PS["Data.Identity"] = $PS["Data.Identity"] || {};
                const exports = $PS["Data.Identity"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Apply = $PS["Control.Apply"];
                const Control_Bind = $PS["Control.Bind"];
                const Control_Monad = $PS["Control.Monad"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_Newtype = $PS["Data.Newtype"];
                const Identity = x => {
                    return x;
                };
                const newtypeIdentity = new Data_Newtype.Newtype(n => {
                    return n;
                }, Identity);
                const functorIdentity = new Data_Functor.Functor(f => {
                    return m => {
                        return f(m);
                    };
                });
                const applyIdentity = new Control_Apply.Apply(() => {
                    return functorIdentity;
                }, v => {
                    return v1 => {
                        return v(v1);
                    };
                });
                const bindIdentity = new Control_Bind.Bind(() => {
                    return applyIdentity;
                }, v => {
                    return f => {
                        return f(v);
                    };
                });
                const applicativeIdentity = new Control_Applicative.Applicative(() => {
                    return applyIdentity;
                }, Identity);
                const monadIdentity = new Control_Monad.Monad(() => {
                    return applicativeIdentity;
                }, () => {
                    return bindIdentity;
                });
                exports["newtypeIdentity"] = newtypeIdentity;
                exports["functorIdentity"] = functorIdentity;
                exports["monadIdentity"] = monadIdentity;
            })(PS);
            ($PS => {
                $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
                const exports = $PS["Data.Traversable"];
                const Traversable = function (Foldable1, Functor0, sequence, traverse) {
                    this.Foldable1 = Foldable1;
                    this.Functor0 = Functor0;
                    this.sequence = sequence;
                    this.traverse = traverse;
                };
                const traverse = dict => {
                    return dict.traverse;
                };
                const sequence = dict => {
                    return dict.sequence;
                };
                exports["Traversable"] = Traversable;
                exports["traverse"] = traverse;
                exports["sequence"] = sequence;
            })(PS);
            ($PS => {
                $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
                const exports = $PS["Data.NonEmpty"];
                const Control_Apply = $PS["Control.Apply"];
                const Data_Foldable = $PS["Data.Foldable"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Data_Traversable = $PS["Data.Traversable"];
                const NonEmpty = (() => {
                    function NonEmpty(value0, value1) {
                        this.value0 = value0;
                        this.value1 = value1;
                    }
                    ;
                    NonEmpty.create = value0 => {
                        return value1 => {
                            return new NonEmpty(value0, value1);
                        };
                    };
                    return NonEmpty;
                })();
                const functorNonEmpty = dictFunctor => {
                    return new Data_Functor.Functor(f => {
                        return ({ value0, value1 }) => {
                            return new NonEmpty(f(value0), Data_Functor.map(dictFunctor)(f)(value1));
                        };
                    });
                };
                const foldl1 = dictFoldable => {
                    return f => {
                        return ({ value0, value1 }) => {
                            return Data_Foldable.foldl(dictFoldable)(f)(value0)(value1);
                        };
                    };
                };
                const foldableNonEmpty = dictFoldable => {
                    return new Data_Foldable.Foldable(dictMonoid => {
                        return f => {
                            return ({ value0, value1 }) => {
                                return Data_Semigroup.append(dictMonoid.Semigroup0())(f(value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(value1));
                            };
                        };
                    }, f => {
                        return b => {
                            return ({ value0, value1 }) => {
                                return Data_Foldable.foldl(dictFoldable)(f)(f(b)(value0))(value1);
                            };
                        };
                    }, f => {
                        return b => {
                            return ({ value0, value1 }) => {
                                return f(value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(value1));
                            };
                        };
                    });
                };
                const traversableNonEmpty = dictTraversable => {
                    return new Data_Traversable.Traversable(() => {
                        return foldableNonEmpty(dictTraversable.Foldable1());
                    }, () => {
                        return functorNonEmpty(dictTraversable.Functor0());
                    }, dictApplicative => {
                        return ({ value0, value1 }) => {
                            return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(value0))(Data_Traversable.sequence(dictTraversable)(dictApplicative)(value1));
                        };
                    }, dictApplicative => {
                        return f => {
                            return ({ value0, value1 }) => {
                                return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(NonEmpty.create)(f(value0)))(Data_Traversable.traverse(dictTraversable)(dictApplicative)(f)(value1));
                            };
                        };
                    });
                };
                exports["NonEmpty"] = NonEmpty;
                exports["foldl1"] = foldl1;
                exports["functorNonEmpty"] = functorNonEmpty;
                exports["foldableNonEmpty"] = foldableNonEmpty;
                exports["traversableNonEmpty"] = traversableNonEmpty;
            })(PS);
            (exports => {
                exports.unfoldrArrayImpl = isNothing => {
                    return fromJust => {
                        return fst => {
                            return snd => {
                                return f => {
                                    return b => {
                                        const result = [];
                                        let value = b;
                                        while (true) {
                                            const maybe = f(value);
                                            if (isNothing(maybe))
                                                return result;
                                            const tuple = fromJust(maybe);
                                            result.push(fst(tuple));
                                            value = snd(tuple);
                                        }
                                    };
                                };
                            };
                        };
                    };
                };
            })(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
            (exports => {
                exports.unfoldr1ArrayImpl = isNothing => {
                    return fromJust => {
                        return fst => {
                            return snd => {
                                return f => {
                                    return b => {
                                        const result = [];
                                        let value = b;
                                        while (true) {
                                            const tuple = f(value);
                                            result.push(fst(tuple));
                                            const maybe = snd(tuple);
                                            if (isNothing(maybe))
                                                return result;
                                            value = fromJust(maybe);
                                        }
                                    };
                                };
                            };
                        };
                    };
                };
            })(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
            ($PS => {
                $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
                const exports = $PS["Data.Unfoldable1"];
                const $foreign = $PS["Data.Unfoldable1"];
                const Data_Maybe = $PS["Data.Maybe"];
                const Data_Tuple = $PS["Data.Tuple"];
                const Unfoldable1 = function (unfoldr1) {
                    this.unfoldr1 = unfoldr1;
                };
                const unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
                exports["Unfoldable1"] = Unfoldable1;
                exports["unfoldable1Array"] = unfoldable1Array;
            })(PS);
            ($PS => {
                $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
                const exports = $PS["Data.Unfoldable"];
                const $foreign = $PS["Data.Unfoldable"];
                const Data_Maybe = $PS["Data.Maybe"];
                const Data_Tuple = $PS["Data.Tuple"];
                const Data_Unfoldable1 = $PS["Data.Unfoldable1"];
                const Unfoldable = function (Unfoldable10, unfoldr) {
                    this.Unfoldable10 = Unfoldable10;
                    this.unfoldr = unfoldr;
                };
                const unfoldr = dict => {
                    return dict.unfoldr;
                };
                const unfoldableArray = new Unfoldable(() => {
                    return Data_Unfoldable1.unfoldable1Array;
                }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
                exports["Unfoldable"] = Unfoldable;
                exports["unfoldr"] = unfoldr;
                exports["unfoldableArray"] = unfoldableArray;
            })(PS);
            ($PS => {
                $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
                const exports = $PS["Data.List.Types"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Apply = $PS["Control.Apply"];
                const Control_Bind = $PS["Control.Bind"];
                const Control_Category = $PS["Control.Category"];
                const Data_Eq = $PS["Data.Eq"];
                const Data_Foldable = $PS["Data.Foldable"];
                const Data_Function = $PS["Data.Function"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_Maybe = $PS["Data.Maybe"];
                const Data_Monoid = $PS["Data.Monoid"];
                const Data_NonEmpty = $PS["Data.NonEmpty"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Data_Traversable = $PS["Data.Traversable"];
                const Data_Unfoldable = $PS["Data.Unfoldable"];
                const Data_Unfoldable1 = $PS["Data.Unfoldable1"];
                const Nil = (() => {
                    function Nil() {
                    }
                    ;
                    Nil.value = new Nil();
                    return Nil;
                })();
                const Cons = (() => {
                    function Cons(value0, value1) {
                        this.value0 = value0;
                        this.value1 = value1;
                    }
                    ;
                    Cons.create = value0 => {
                        return value1 => {
                            return new Cons(value0, value1);
                        };
                    };
                    return Cons;
                })();
                const NonEmptyList = x => {
                    return x;
                };
                const listMap = f => {
                    const chunkedRevMap = $copy_chunksAcc => {
                        return $copy_v => {
                            let $tco_var_chunksAcc = $copy_chunksAcc;
                            let $tco_done = false;
                            let $tco_result;
                            function $tco_loop(chunksAcc, v) {
                                if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                                    $tco_var_chunksAcc = new Cons(v, chunksAcc);
                                    $copy_v = v.value1.value1.value1;
                                    return;
                                }
                                ;
                                const unrolledMap = v1 => {
                                    if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                                        return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                                    }
                                    ;
                                    if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                                        return new Cons(f(v1.value0), Nil.value);
                                    }
                                    ;
                                    return Nil.value;
                                };
                                const reverseUnrolledMap = $copy_v1 => {
                                    return $copy_acc => {
                                        let $tco_var_v1 = $copy_v1;
                                        let $tco_done = false;
                                        let $tco_result;
                                        function $tco_loop(v1, acc) {
                                            if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                                $tco_var_v1 = v1.value1;
                                                $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                                return;
                                            }
                                            ;
                                            $tco_done = true;
                                            return acc;
                                        }
                                        ;
                                        while (!$tco_done) {
                                            $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                                        }
                                        ;
                                        return $tco_result;
                                    };
                                };
                                $tco_done = true;
                                return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
                            }
                            ;
                            while (!$tco_done) {
                                $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
                            }
                            ;
                            return $tco_result;
                        };
                    };
                    return chunkedRevMap(Nil.value);
                };
                const functorList = new Data_Functor.Functor(listMap);
                const functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
                const foldableList = new Data_Foldable.Foldable(dictMonoid => {
                    return f => {
                        return Data_Foldable.foldl(foldableList)(acc => {
                            const $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
                            return $203 => {
                                return $202(f($203));
                            };
                        })(Data_Monoid.mempty(dictMonoid));
                    };
                }, f => {
                    const go = $copy_b => {
                        return $copy_v => {
                            let $tco_var_b = $copy_b;
                            let $tco_done = false;
                            let $tco_result;
                            function $tco_loop(b, v) {
                                if (v instanceof Nil) {
                                    $tco_done = true;
                                    return b;
                                }
                                ;
                                if (v instanceof Cons) {
                                    $tco_var_b = f(b)(v.value0);
                                    $copy_v = v.value1;
                                    return;
                                }
                                ;
                                throw new Error(`Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): ${[v.constructor.name]}`);
                            }
                            ;
                            while (!$tco_done) {
                                $tco_result = $tco_loop($tco_var_b, $copy_v);
                            }
                            ;
                            return $tco_result;
                        };
                    };
                    return go;
                }, f => {
                    return b => {
                        const rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
                        const $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
                        return $205 => {
                            return $204(rev($205));
                        };
                    };
                });
                const foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
                const semigroupList = new Data_Semigroup.Semigroup(xs => {
                    return ys => {
                        return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
                    };
                });
                const traversableList = new Data_Traversable.Traversable(() => {
                    return foldableList;
                }, () => {
                    return functorList;
                }, dictApplicative => {
                    return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
                }, dictApplicative => {
                    return f => {
                        const $219 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value));
                        const $220 = Data_Foldable.foldl(foldableList)(acc => {
                            const $222 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
                            return $223 => {
                                return $222(f($223));
                            };
                        })(Control_Applicative.pure(dictApplicative)(Nil.value));
                        return $221 => {
                            return $219($220($221));
                        };
                    };
                });
                const unfoldable1List = new Data_Unfoldable1.Unfoldable1(f => {
                    return b => {
                        const go = $copy_source => {
                            return $copy_memo => {
                                let $tco_var_source = $copy_source;
                                let $tco_done = false;
                                let $tco_result;
                                function $tco_loop(source, memo) {
                                    const v = f(source);
                                    if (v.value1 instanceof Data_Maybe.Just) {
                                        $tco_var_source = v.value1.value0;
                                        $copy_memo = new Cons(v.value0, memo);
                                        return;
                                    }
                                    ;
                                    if (v.value1 instanceof Data_Maybe.Nothing) {
                                        $tco_done = true;
                                        return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                                    }
                                    ;
                                    throw new Error(`Failed pattern match at Data.List.Types (line 133, column 22 - line 135, column 61): ${[v.constructor.name]}`);
                                }
                                ;
                                while (!$tco_done) {
                                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                                }
                                ;
                                return $tco_result;
                            };
                        };
                        return go(b)(Nil.value);
                    };
                });
                const unfoldableList = new Data_Unfoldable.Unfoldable(() => {
                    return unfoldable1List;
                }, f => {
                    return b => {
                        const go = $copy_source => {
                            return $copy_memo => {
                                let $tco_var_source = $copy_source;
                                let $tco_done = false;
                                let $tco_result;
                                function $tco_loop(source, memo) {
                                    const v = f(source);
                                    if (v instanceof Data_Maybe.Nothing) {
                                        $tco_done = true;
                                        return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                                    }
                                    ;
                                    if (v instanceof Data_Maybe.Just) {
                                        $tco_var_source = v.value0.value1;
                                        $copy_memo = new Cons(v.value0.value0, memo);
                                        return;
                                    }
                                    ;
                                    throw new Error(`Failed pattern match at Data.List.Types (line 140, column 22 - line 142, column 52): ${[v.constructor.name]}`);
                                }
                                ;
                                while (!$tco_done) {
                                    $tco_result = $tco_loop($tco_var_source, $copy_memo);
                                }
                                ;
                                return $tco_result;
                            };
                        };
                        return go(b)(Nil.value);
                    };
                });
                const eq1List = new Data_Eq.Eq1(dictEq => {
                    return xs => {
                        return ys => {
                            const go = $copy_v => {
                                return $copy_v1 => {
                                    return $copy_v2 => {
                                        let $tco_var_v = $copy_v;
                                        let $tco_var_v1 = $copy_v1;
                                        let $tco_done = false;
                                        let $tco_result;
                                        function $tco_loop(v, v1, v2) {
                                            if (!v2) {
                                                $tco_done = true;
                                                return false;
                                            }
                                            ;
                                            if (v instanceof Nil && v1 instanceof Nil) {
                                                $tco_done = true;
                                                return v2;
                                            }
                                            ;
                                            if (v instanceof Cons && v1 instanceof Cons) {
                                                $tco_var_v = v.value1;
                                                $tco_var_v1 = v1.value1;
                                                $copy_v2 = v2 && Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                                                return;
                                            }
                                            ;
                                            $tco_done = true;
                                            return false;
                                        }
                                        ;
                                        while (!$tco_done) {
                                            $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
                                        }
                                        ;
                                        return $tco_result;
                                    };
                                };
                            };
                            return go(xs)(ys)(true);
                        };
                    };
                });
                const eqList = dictEq => {
                    return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
                };
                const applyList = new Control_Apply.Apply(() => {
                    return functorList;
                }, v => {
                    return v1 => {
                        if (v instanceof Nil) {
                            return Nil.value;
                        }
                        ;
                        if (v instanceof Cons) {
                            return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.List.Types (line 155, column 1 - line 157, column 48): ${[v.constructor.name, v1.constructor.name]}`);
                    };
                });
                const bindList = new Control_Bind.Bind(() => {
                    return applyList;
                }, v => {
                    return v1 => {
                        if (v instanceof Nil) {
                            return Nil.value;
                        }
                        ;
                        if (v instanceof Cons) {
                            return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.List.Types (line 162, column 1 - line 164, column 37): ${[v.constructor.name, v1.constructor.name]}`);
                    };
                });
                const applicativeList = new Control_Applicative.Applicative(() => {
                    return applyList;
                }, a => {
                    return new Cons(a, Nil.value);
                });
                exports["Nil"] = Nil;
                exports["Cons"] = Cons;
                exports["NonEmptyList"] = NonEmptyList;
                exports["eqList"] = eqList;
                exports["semigroupList"] = semigroupList;
                exports["functorList"] = functorList;
                exports["foldableList"] = foldableList;
                exports["unfoldableList"] = unfoldableList;
                exports["traversableList"] = traversableList;
                exports["applicativeList"] = applicativeList;
                exports["bindList"] = bindList;
                exports["functorNonEmptyList"] = functorNonEmptyList;
                exports["foldableNonEmptyList"] = foldableNonEmptyList;
            })(PS);
            ($PS => {
                $PS["Data.List"] = $PS["Data.List"] || {};
                const exports = $PS["Data.List"];
                const Control_Alt = $PS["Control.Alt"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Apply = $PS["Control.Apply"];
                const Control_Bind = $PS["Control.Bind"];
                const Control_Category = $PS["Control.Category"];
                const Control_Lazy = $PS["Control.Lazy"];
                const Data_Boolean = $PS["Data.Boolean"];
                const Data_Eq = $PS["Data.Eq"];
                const Data_Foldable = $PS["Data.Foldable"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_List_Types = $PS["Data.List.Types"];
                const Data_Maybe = $PS["Data.Maybe"];
                const Data_NonEmpty = $PS["Data.NonEmpty"];
                const Data_Ordering = $PS["Data.Ordering"];
                const Data_Tuple = $PS["Data.Tuple"];
                const Data_Unfoldable = $PS["Data.Unfoldable"];
                const uncons = v => {
                    if (v instanceof Data_List_Types.Nil) {
                        return Data_Maybe.Nothing.value;
                    }
                    ;
                    if (v instanceof Data_List_Types.Cons) {
                        return new Data_Maybe.Just({
                            head: v.value0,
                            tail: v.value1
                        });
                    }
                    ;
                    throw new Error(`Failed pattern match at Data.List (line 259, column 1 - line 259, column 66): ${[v.constructor.name]}`);
                };
                const toUnfoldable = dictUnfoldable => {
                    return Data_Unfoldable.unfoldr(dictUnfoldable)(xs => {
                        return Data_Functor.map(Data_Maybe.functorMaybe)(rec => {
                            return new Data_Tuple.Tuple(rec.head, rec.tail);
                        })(uncons(xs));
                    });
                };
                const tail = v => {
                    if (v instanceof Data_List_Types.Nil) {
                        return Data_Maybe.Nothing.value;
                    }
                    ;
                    if (v instanceof Data_List_Types.Cons) {
                        return new Data_Maybe.Just(v.value1);
                    }
                    ;
                    throw new Error(`Failed pattern match at Data.List (line 245, column 1 - line 245, column 43): ${[v.constructor.name]}`);
                };
                const span = v => {
                    return v1 => {
                        if (v1 instanceof Data_List_Types.Cons && v(v1.value0)) {
                            const v2 = span(v)(v1.value1);
                            return {
                                init: new Data_List_Types.Cons(v1.value0, v2.init),
                                rest: v2.rest
                            };
                        }
                        ;
                        return {
                            init: Data_List_Types.Nil.value,
                            rest: v1
                        };
                    };
                };
                const singleton = a => {
                    return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
                };
                const sortBy = cmp => {
                    const merge = v => {
                        return v1 => {
                            if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1.value0))(Data_Ordering.GT.value)) {
                                    return new Data_List_Types.Cons(v1.value0, merge(v)(v1.value1));
                                }
                                ;
                                if (Data_Boolean.otherwise) {
                                    return new Data_List_Types.Cons(v.value0, merge(v.value1)(v1));
                                }
                                ;
                            }
                            ;
                            if (v instanceof Data_List_Types.Nil) {
                                return v1;
                            }
                            ;
                            if (v1 instanceof Data_List_Types.Nil) {
                                return v;
                            }
                            ;
                            throw new Error(`Failed pattern match at Data.List (line 473, column 3 - line 473, column 38): ${[v.constructor.name, v1.constructor.name]}`);
                        };
                    };
                    const mergePairs = v => {
                        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
                            return new Data_List_Types.Cons(merge(v.value0)(v.value1.value0), mergePairs(v.value1.value1));
                        }
                        ;
                        return v;
                    };
                    const mergeAll = $copy_v => {
                        let $tco_done = false;
                        let $tco_result;
                        function $tco_loop(v) {
                            if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                                $tco_done = true;
                                return v.value0;
                            }
                            ;
                            $copy_v = mergePairs(v);
                            return;
                        }
                        ;
                        while (!$tco_done) {
                            $tco_result = $tco_loop($copy_v);
                        }
                        ;
                        return $tco_result;
                    };
                    const sequences = v => {
                        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Cons) {
                            if (Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v.value1.value0))(Data_Ordering.GT.value)) {
                                return descending(v.value1.value0)(singleton(v.value0))(v.value1.value1);
                            }
                            ;
                            if (Data_Boolean.otherwise) {
                                return ascending(v.value1.value0)(v1 => {
                                    return new Data_List_Types.Cons(v.value0, v1);
                                })(v.value1.value1);
                            }
                            ;
                        }
                        ;
                        return singleton(v);
                    };
                    var descending = $copy_a => {
                        return $copy_as => {
                            return $copy_v => {
                                let $tco_var_a = $copy_a;
                                let $tco_var_as = $copy_as;
                                let $tco_done = false;
                                let $tco_result;
                                function $tco_loop(a, as, v) {
                                    if (v instanceof Data_List_Types.Cons && Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                                        $tco_var_a = v.value0;
                                        $tco_var_as = new Data_List_Types.Cons(a, as);
                                        $copy_v = v.value1;
                                        return;
                                    }
                                    ;
                                    $tco_done = true;
                                    return new Data_List_Types.Cons(new Data_List_Types.Cons(a, as), sequences(v));
                                }
                                ;
                                while (!$tco_done) {
                                    $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                                }
                                ;
                                return $tco_result;
                            };
                        };
                    };
                    var ascending = $copy_a => {
                        return $copy_as => {
                            return $copy_v => {
                                let $tco_var_a = $copy_a;
                                let $tco_var_as = $copy_as;
                                let $tco_done = false;
                                let $tco_result;
                                function $tco_loop(a, as, v) {
                                    if (v instanceof Data_List_Types.Cons && Data_Eq.notEq(Data_Ordering.eqOrdering)(cmp(a)(v.value0))(Data_Ordering.GT.value)) {
                                        $tco_var_a = v.value0;
                                        $tco_var_as = ys => {
                                            return as(new Data_List_Types.Cons(a, ys));
                                        };
                                        $copy_v = v.value1;
                                        return;
                                    }
                                    ;
                                    $tco_done = true;
                                    return new Data_List_Types.Cons(as(singleton(a)), sequences(v));
                                }
                                ;
                                while (!$tco_done) {
                                    $tco_result = $tco_loop($tco_var_a, $tco_var_as, $copy_v);
                                }
                                ;
                                return $tco_result;
                            };
                        };
                    };
                    return $331 => {
                        return mergeAll(sequences($331));
                    };
                };
                const reverse = (() => {
                    const go = $copy_acc => {
                        return $copy_v => {
                            let $tco_var_acc = $copy_acc;
                            let $tco_done = false;
                            let $tco_result;
                            function $tco_loop(acc, v) {
                                if (v instanceof Data_List_Types.Nil) {
                                    $tco_done = true;
                                    return acc;
                                }
                                ;
                                if (v instanceof Data_List_Types.Cons) {
                                    $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                                    $copy_v = v.value1;
                                    return;
                                }
                                ;
                                throw new Error(`Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): ${[acc.constructor.name, v.constructor.name]}`);
                            }
                            ;
                            while (!$tco_done) {
                                $tco_result = $tco_loop($tco_var_acc, $copy_v);
                            }
                            ;
                            return $tco_result;
                        };
                    };
                    return go(Data_List_Types.Nil.value);
                })();
                const unsnoc = lst => {
                    const go = $copy_v => {
                        return $copy_acc => {
                            let $tco_var_v = $copy_v;
                            let $tco_done = false;
                            let $tco_result;
                            function $tco_loop(v, acc) {
                                if (v instanceof Data_List_Types.Nil) {
                                    $tco_done = true;
                                    return Data_Maybe.Nothing.value;
                                }
                                ;
                                if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                                    $tco_done = true;
                                    return new Data_Maybe.Just({
                                        revInit: acc,
                                        last: v.value0
                                    });
                                }
                                ;
                                if (v instanceof Data_List_Types.Cons) {
                                    $tco_var_v = v.value1;
                                    $copy_acc = new Data_List_Types.Cons(v.value0, acc);
                                    return;
                                }
                                ;
                                throw new Error(`Failed pattern match at Data.List (line 270, column 3 - line 270, column 23): ${[v.constructor.name, acc.constructor.name]}`);
                            }
                            ;
                            while (!$tco_done) {
                                $tco_result = $tco_loop($tco_var_v, $copy_acc);
                            }
                            ;
                            return $tco_result;
                        };
                    };
                    return Data_Functor.map(Data_Maybe.functorMaybe)(h => {
                        return {
                            init: reverse(h.revInit),
                            last: h.last
                        };
                    })(go(lst)(Data_List_Types.Nil.value));
                };
                const zipWith = f => {
                    return xs => {
                        return ys => {
                            const go = $copy_v => {
                                return $copy_v1 => {
                                    return $copy_acc => {
                                        let $tco_var_v = $copy_v;
                                        let $tco_var_v1 = $copy_v1;
                                        let $tco_done = false;
                                        let $tco_result;
                                        function $tco_loop(v, v1, acc) {
                                            if (v instanceof Data_List_Types.Nil) {
                                                $tco_done = true;
                                                return acc;
                                            }
                                            ;
                                            if (v1 instanceof Data_List_Types.Nil) {
                                                $tco_done = true;
                                                return acc;
                                            }
                                            ;
                                            if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
                                                $tco_var_v = v.value1;
                                                $tco_var_v1 = v1.value1;
                                                $copy_acc = new Data_List_Types.Cons(f(v.value0)(v1.value0), acc);
                                                return;
                                            }
                                            ;
                                            throw new Error(`Failed pattern match at Data.List (line 718, column 3 - line 718, column 21): ${[v.constructor.name, v1.constructor.name, acc.constructor.name]}`);
                                        }
                                        ;
                                        while (!$tco_done) {
                                            $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_acc);
                                        }
                                        ;
                                        return $tco_result;
                                    };
                                };
                            };
                            return reverse(go(xs)(ys)(Data_List_Types.Nil.value));
                        };
                    };
                };
                const range = start => {
                    return end => {
                        if (start === end) {
                            return singleton(start);
                        }
                        ;
                        if (Data_Boolean.otherwise) {
                            const go = $copy_s => {
                                return $copy_e => {
                                    return $copy_step => {
                                        return $copy_rest => {
                                            let $tco_var_s = $copy_s;
                                            let $tco_var_e = $copy_e;
                                            let $tco_var_step = $copy_step;
                                            let $tco_done = false;
                                            let $tco_result;
                                            function $tco_loop(s, e, step, rest) {
                                                if (s === e) {
                                                    $tco_done = true;
                                                    return new Data_List_Types.Cons(s, rest);
                                                }
                                                ;
                                                if (Data_Boolean.otherwise) {
                                                    $tco_var_s = s + step | 0;
                                                    $tco_var_e = e;
                                                    $tco_var_step = step;
                                                    $copy_rest = new Data_List_Types.Cons(s, rest);
                                                    return;
                                                }
                                                ;
                                                throw new Error(`Failed pattern match at Data.List (line 148, column 3 - line 149, column 65): ${[s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name]}`);
                                            }
                                            ;
                                            while (!$tco_done) {
                                                $tco_result = $tco_loop($tco_var_s, $tco_var_e, $tco_var_step, $copy_rest);
                                            }
                                            ;
                                            return $tco_result;
                                        };
                                    };
                                };
                            };
                            return go(end)(start)((() => {
                                const $220 = start > end;
                                if ($220) {
                                    return 1;
                                }
                                ;
                                return -1 | 0;
                            })())(Data_List_Types.Nil.value);
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.List (line 144, column 1 - line 144, column 32): ${[start.constructor.name, end.constructor.name]}`);
                    };
                };
                const some = dictAlternative => {
                    return dictLazy => {
                        return v => {
                            return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(v1 => {
                                return many(dictAlternative)(dictLazy)(v);
                            }));
                        };
                    };
                };
                var many = dictAlternative => {
                    return dictLazy => {
                        return v => {
                            return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
                        };
                    };
                };
                const length = Data_Foldable.foldl(Data_List_Types.foldableList)(acc => {
                    return v => {
                        return acc + 1 | 0;
                    };
                })(0);
                const last = $copy_v => {
                    let $tco_done = false;
                    let $tco_result;
                    function $tco_loop(v) {
                        if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                            $tco_done = true;
                            return new Data_Maybe.Just(v.value0);
                        }
                        ;
                        if (v instanceof Data_List_Types.Cons) {
                            $copy_v = v.value1;
                            return;
                        }
                        ;
                        $tco_done = true;
                        return Data_Maybe.Nothing.value;
                    }
                    ;
                    while (!$tco_done) {
                        $tco_result = $tco_loop($copy_v);
                    }
                    ;
                    return $tco_result;
                };
                const init = lst => {
                    return Data_Functor.map(Data_Maybe.functorMaybe)(v => {
                        return v.init;
                    })(unsnoc(lst));
                };
                const head = v => {
                    if (v instanceof Data_List_Types.Nil) {
                        return Data_Maybe.Nothing.value;
                    }
                    ;
                    if (v instanceof Data_List_Types.Cons) {
                        return new Data_Maybe.Just(v.value0);
                    }
                    ;
                    throw new Error(`Failed pattern match at Data.List (line 230, column 1 - line 230, column 22): ${[v.constructor.name]}`);
                };
                const groupBy = v => {
                    return v1 => {
                        if (v1 instanceof Data_List_Types.Nil) {
                            return Data_List_Types.Nil.value;
                        }
                        ;
                        if (v1 instanceof Data_List_Types.Cons) {
                            const v2 = span(v(v1.value0))(v1.value1);
                            return new Data_List_Types.Cons(new Data_NonEmpty.NonEmpty(v1.value0, v2.init), groupBy(v)(v2.rest));
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.List (line 605, column 1 - line 605, column 80): ${[v.constructor.name, v1.constructor.name]}`);
                    };
                };
                const findIndex = fn => {
                    const go = $copy_v => {
                        return $copy_v1 => {
                            let $tco_var_v = $copy_v;
                            let $tco_done = false;
                            let $tco_result;
                            function $tco_loop(v, v1) {
                                if (v1 instanceof Data_List_Types.Cons) {
                                    if (fn(v1.value0)) {
                                        $tco_done = true;
                                        return new Data_Maybe.Just(v);
                                    }
                                    ;
                                    if (Data_Boolean.otherwise) {
                                        $tco_var_v = v + 1 | 0;
                                        $copy_v1 = v1.value1;
                                        return;
                                    }
                                    ;
                                }
                                ;
                                if (v1 instanceof Data_List_Types.Nil) {
                                    $tco_done = true;
                                    return Data_Maybe.Nothing.value;
                                }
                                ;
                                throw new Error(`Failed pattern match at Data.List (line 301, column 3 - line 301, column 35): ${[v.constructor.name, v1.constructor.name]}`);
                            }
                            ;
                            while (!$tco_done) {
                                $tco_result = $tco_loop($tco_var_v, $copy_v1);
                            }
                            ;
                            return $tco_result;
                        };
                    };
                    return go(0);
                };
                const filter = p => {
                    const go = $copy_acc => {
                        return $copy_v => {
                            let $tco_var_acc = $copy_acc;
                            let $tco_done = false;
                            let $tco_result;
                            function $tco_loop(acc, v) {
                                if (v instanceof Data_List_Types.Nil) {
                                    $tco_done = true;
                                    return reverse(acc);
                                }
                                ;
                                if (v instanceof Data_List_Types.Cons) {
                                    if (p(v.value0)) {
                                        $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                                        $copy_v = v.value1;
                                        return;
                                    }
                                    ;
                                    if (Data_Boolean.otherwise) {
                                        $tco_var_acc = acc;
                                        $copy_v = v.value1;
                                        return;
                                    }
                                    ;
                                }
                                ;
                                throw new Error(`Failed pattern match at Data.List (line 390, column 3 - line 390, column 27): ${[acc.constructor.name, v.constructor.name]}`);
                            }
                            ;
                            while (!$tco_done) {
                                $tco_result = $tco_loop($tco_var_acc, $copy_v);
                            }
                            ;
                            return $tco_result;
                        };
                    };
                    return go(Data_List_Types.Nil.value);
                };
                const concat = v => {
                    return Control_Bind.bind(Data_List_Types.bindList)(v)(Control_Category.identity(Control_Category.categoryFn));
                };
                const alterAt = v => {
                    return v1 => {
                        return v2 => {
                            if (v === 0 && v2 instanceof Data_List_Types.Cons) {
                                return Data_Maybe.Just.create((() => {
                                    const v3 = v1(v2.value0);
                                    if (v3 instanceof Data_Maybe.Nothing) {
                                        return v2.value1;
                                    }
                                    ;
                                    if (v3 instanceof Data_Maybe.Just) {
                                        return new Data_List_Types.Cons(v3.value0, v2.value1);
                                    }
                                    ;
                                    throw new Error(`Failed pattern match at Data.List (line 352, column 3 - line 354, column 23): ${[v3.constructor.name]}`);
                                })());
                            }
                            ;
                            if (v2 instanceof Data_List_Types.Cons) {
                                return Data_Functor.map(Data_Maybe.functorMaybe)(v3 => {
                                    return new Data_List_Types.Cons(v2.value0, v3);
                                })(alterAt(v - 1 | 0)(v1)(v2.value1));
                            }
                            ;
                            return Data_Maybe.Nothing.value;
                        };
                    };
                };
                const modifyAt = n => {
                    return f => {
                        return alterAt(n)($335 => {
                            return Data_Maybe.Just.create(f($335));
                        });
                    };
                };
                exports["toUnfoldable"] = toUnfoldable;
                exports["singleton"] = singleton;
                exports["range"] = range;
                exports["many"] = many;
                exports["length"] = length;
                exports["last"] = last;
                exports["init"] = init;
                exports["uncons"] = uncons;
                exports["findIndex"] = findIndex;
                exports["modifyAt"] = modifyAt;
                exports["concat"] = concat;
                exports["filter"] = filter;
                exports["sortBy"] = sortBy;
                exports["span"] = span;
                exports["groupBy"] = groupBy;
                exports["zipWith"] = zipWith;
            })(PS);
            ($PS => {
                $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
                const exports = $PS["Data.List.NonEmpty"];
                const Data_List = $PS["Data.List"];
                const Data_List_Types = $PS["Data.List.Types"];
                const Data_NonEmpty = $PS["Data.NonEmpty"];
                const Data_Tuple = $PS["Data.Tuple"];
                const zipWith = f => {
                    return ({ value0, value1 }) => {
                        return ({ value0, value1 }) => {
                            return new Data_NonEmpty.NonEmpty(f(value0)(value0), Data_List.zipWith(f)(value1)(value1));
                        };
                    };
                };
                const zip = zipWith(Data_Tuple.Tuple.create);
                const toList = ({ value0, value1 }) => {
                    return new Data_List_Types.Cons(value0, value1);
                };
                const tail = ({ value1 }) => {
                    return value1;
                };
                const length = ({ value1 }) => {
                    return 1 + Data_List.length(value1) | 0;
                };
                const head = ({ value0 }) => {
                    return value0;
                };
                exports["toList"] = toList;
                exports["length"] = length;
                exports["head"] = head;
                exports["tail"] = tail;
                exports["zip"] = zip;
            })(PS);
            ($PS => {
                $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
                const exports = $PS["Data.Map.Internal"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Data_Foldable = $PS["Data.Foldable"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_List_Types = $PS["Data.List.Types"];
                const Data_Maybe = $PS["Data.Maybe"];
                const Data_Ord = $PS["Data.Ord"];
                const Data_Ordering = $PS["Data.Ordering"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Data_Tuple = $PS["Data.Tuple"];
                const Data_Unfoldable = $PS["Data.Unfoldable"];
                const Leaf = (() => {
                    function Leaf() {
                    }
                    ;
                    Leaf.value = new Leaf();
                    return Leaf;
                })();
                const Two = (() => {
                    function Two(value0, value1, value2, value3) {
                        this.value0 = value0;
                        this.value1 = value1;
                        this.value2 = value2;
                        this.value3 = value3;
                    }
                    ;
                    Two.create = value0 => {
                        return value1 => {
                            return value2 => {
                                return value3 => {
                                    return new Two(value0, value1, value2, value3);
                                };
                            };
                        };
                    };
                    return Two;
                })();
                const Three = (() => {
                    function Three(value0, value1, value2, value3, value4, value5, value6) {
                        this.value0 = value0;
                        this.value1 = value1;
                        this.value2 = value2;
                        this.value3 = value3;
                        this.value4 = value4;
                        this.value5 = value5;
                        this.value6 = value6;
                    }
                    ;
                    Three.create = value0 => {
                        return value1 => {
                            return value2 => {
                                return value3 => {
                                    return value4 => {
                                        return value5 => {
                                            return value6 => {
                                                return new Three(value0, value1, value2, value3, value4, value5, value6);
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                    return Three;
                })();
                const TwoLeft = (() => {
                    function TwoLeft(value0, value1, value2) {
                        this.value0 = value0;
                        this.value1 = value1;
                        this.value2 = value2;
                    }
                    ;
                    TwoLeft.create = value0 => {
                        return value1 => {
                            return value2 => {
                                return new TwoLeft(value0, value1, value2);
                            };
                        };
                    };
                    return TwoLeft;
                })();
                const TwoRight = (() => {
                    function TwoRight(value0, value1, value2) {
                        this.value0 = value0;
                        this.value1 = value1;
                        this.value2 = value2;
                    }
                    ;
                    TwoRight.create = value0 => {
                        return value1 => {
                            return value2 => {
                                return new TwoRight(value0, value1, value2);
                            };
                        };
                    };
                    return TwoRight;
                })();
                const ThreeLeft = (() => {
                    function ThreeLeft(value0, value1, value2, value3, value4, value5) {
                        this.value0 = value0;
                        this.value1 = value1;
                        this.value2 = value2;
                        this.value3 = value3;
                        this.value4 = value4;
                        this.value5 = value5;
                    }
                    ;
                    ThreeLeft.create = value0 => {
                        return value1 => {
                            return value2 => {
                                return value3 => {
                                    return value4 => {
                                        return value5 => {
                                            return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                                        };
                                    };
                                };
                            };
                        };
                    };
                    return ThreeLeft;
                })();
                const ThreeMiddle = (() => {
                    function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
                        this.value0 = value0;
                        this.value1 = value1;
                        this.value2 = value2;
                        this.value3 = value3;
                        this.value4 = value4;
                        this.value5 = value5;
                    }
                    ;
                    ThreeMiddle.create = value0 => {
                        return value1 => {
                            return value2 => {
                                return value3 => {
                                    return value4 => {
                                        return value5 => {
                                            return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                                        };
                                    };
                                };
                            };
                        };
                    };
                    return ThreeMiddle;
                })();
                const ThreeRight = (() => {
                    function ThreeRight(value0, value1, value2, value3, value4, value5) {
                        this.value0 = value0;
                        this.value1 = value1;
                        this.value2 = value2;
                        this.value3 = value3;
                        this.value4 = value4;
                        this.value5 = value5;
                    }
                    ;
                    ThreeRight.create = value0 => {
                        return value1 => {
                            return value2 => {
                                return value3 => {
                                    return value4 => {
                                        return value5 => {
                                            return new ThreeRight(value0, value1, value2, value3, value4, value5);
                                        };
                                    };
                                };
                            };
                        };
                    };
                    return ThreeRight;
                })();
                const KickUp = (() => {
                    function KickUp(value0, value1, value2, value3) {
                        this.value0 = value0;
                        this.value1 = value1;
                        this.value2 = value2;
                        this.value3 = value3;
                    }
                    ;
                    KickUp.create = value0 => {
                        return value1 => {
                            return value2 => {
                                return value3 => {
                                    return new KickUp(value0, value1, value2, value3);
                                };
                            };
                        };
                    };
                    return KickUp;
                })();
                const singleton = k => {
                    return v => {
                        return new Two(Leaf.value, k, v, Leaf.value);
                    };
                };
                const toUnfoldable = dictUnfoldable => {
                    return m => {
                        const go = $copy_v => {
                            let $tco_done = false;
                            let $tco_result;
                            function $tco_loop(v) {
                                if (v instanceof Data_List_Types.Nil) {
                                    $tco_done = true;
                                    return Data_Maybe.Nothing.value;
                                }
                                ;
                                if (v instanceof Data_List_Types.Cons) {
                                    if (v.value0 instanceof Leaf) {
                                        $copy_v = v.value1;
                                        return;
                                    }
                                    ;
                                    if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                                        $tco_done = true;
                                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                                    }
                                    ;
                                    if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                                        $tco_done = true;
                                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                                    }
                                    ;
                                    if (v.value0 instanceof Two) {
                                        $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                                        return;
                                    }
                                    ;
                                    if (v.value0 instanceof Three) {
                                        $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                                        return;
                                    }
                                    ;
                                    throw new Error(`Failed pattern match at Data.Map.Internal (line 577, column 18 - line 586, column 71): ${[v.value0.constructor.name]}`);
                                }
                                ;
                                throw new Error(`Failed pattern match at Data.Map.Internal (line 576, column 3 - line 576, column 19): ${[v.constructor.name]}`);
                            }
                            ;
                            while (!$tco_done) {
                                $tco_result = $tco_loop($copy_v);
                            }
                            ;
                            return $tco_result;
                        };
                        return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
                    };
                };
                const lookup = dictOrd => {
                    return k => {
                        const comp = Data_Ord.compare(dictOrd);
                        const go = $copy_v => {
                            let $tco_done = false;
                            let $tco_result;
                            function $tco_loop(v) {
                                if (v instanceof Leaf) {
                                    $tco_done = true;
                                    return Data_Maybe.Nothing.value;
                                }
                                ;
                                if (v instanceof Two) {
                                    const v2 = comp(k)(v.value1);
                                    if (v2 instanceof Data_Ordering.EQ) {
                                        $tco_done = true;
                                        return new Data_Maybe.Just(v.value2);
                                    }
                                    ;
                                    if (v2 instanceof Data_Ordering.LT) {
                                        $copy_v = v.value0;
                                        return;
                                    }
                                    ;
                                    $copy_v = v.value3;
                                    return;
                                }
                                ;
                                if (v instanceof Three) {
                                    const v3 = comp(k)(v.value1);
                                    if (v3 instanceof Data_Ordering.EQ) {
                                        $tco_done = true;
                                        return new Data_Maybe.Just(v.value2);
                                    }
                                    ;
                                    const v4 = comp(k)(v.value4);
                                    if (v4 instanceof Data_Ordering.EQ) {
                                        $tco_done = true;
                                        return new Data_Maybe.Just(v.value5);
                                    }
                                    ;
                                    if (v3 instanceof Data_Ordering.LT) {
                                        $copy_v = v.value0;
                                        return;
                                    }
                                    ;
                                    if (v4 instanceof Data_Ordering.GT) {
                                        $copy_v = v.value6;
                                        return;
                                    }
                                    ;
                                    $copy_v = v.value3;
                                    return;
                                }
                                ;
                                throw new Error(`Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): ${[v.constructor.name]}`);
                            }
                            ;
                            while (!$tco_done) {
                                $tco_result = $tco_loop($copy_v);
                            }
                            ;
                            return $tco_result;
                        };
                        return go;
                    };
                };
                const keys = v => {
                    if (v instanceof Leaf) {
                        return Data_List_Types.Nil.value;
                    }
                    ;
                    if (v instanceof Two) {
                        return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
                    }
                    ;
                    if (v instanceof Three) {
                        return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
                    }
                    ;
                    throw new Error(`Failed pattern match at Data.Map.Internal (line 606, column 1 - line 606, column 38): ${[v.constructor.name]}`);
                };
                const functorMap = new Data_Functor.Functor(v => {
                    return v1 => {
                        if (v1 instanceof Leaf) {
                            return Leaf.value;
                        }
                        ;
                        if (v1 instanceof Two) {
                            return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
                        }
                        ;
                        if (v1 instanceof Three) {
                            return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.Map.Internal (line 96, column 1 - line 99, column 110): ${[v.constructor.name, v1.constructor.name]}`);
                    };
                });
                const fromZipper = $copy_dictOrd => {
                    return $copy_v => {
                        return $copy_tree => {
                            let $tco_var_dictOrd = $copy_dictOrd;
                            let $tco_var_v = $copy_v;
                            let $tco_done = false;
                            let $tco_result;
                            function $tco_loop(dictOrd, v, tree) {
                                if (v instanceof Data_List_Types.Nil) {
                                    $tco_done = true;
                                    return tree;
                                }
                                ;
                                if (v instanceof Data_List_Types.Cons) {
                                    if (v.value0 instanceof TwoLeft) {
                                        $tco_var_dictOrd = dictOrd;
                                        $tco_var_v = v.value1;
                                        $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                                        return;
                                    }
                                    ;
                                    if (v.value0 instanceof TwoRight) {
                                        $tco_var_dictOrd = dictOrd;
                                        $tco_var_v = v.value1;
                                        $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                                        return;
                                    }
                                    ;
                                    if (v.value0 instanceof ThreeLeft) {
                                        $tco_var_dictOrd = dictOrd;
                                        $tco_var_v = v.value1;
                                        $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                                        return;
                                    }
                                    ;
                                    if (v.value0 instanceof ThreeMiddle) {
                                        $tco_var_dictOrd = dictOrd;
                                        $tco_var_v = v.value1;
                                        $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                                        return;
                                    }
                                    ;
                                    if (v.value0 instanceof ThreeRight) {
                                        $tco_var_dictOrd = dictOrd;
                                        $tco_var_v = v.value1;
                                        $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                                        return;
                                    }
                                    ;
                                    throw new Error(`Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): ${[v.value0.constructor.name]}`);
                                }
                                ;
                                throw new Error(`Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): ${[v.constructor.name, tree.constructor.name]}`);
                            }
                            ;
                            while (!$tco_done) {
                                $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
                            }
                            ;
                            return $tco_result;
                        };
                    };
                };
                const insert = dictOrd => {
                    return k => {
                        return v => {
                            const up = $copy_v1 => {
                                return $copy_v2 => {
                                    let $tco_var_v1 = $copy_v1;
                                    let $tco_done = false;
                                    let $tco_result;
                                    function $tco_loop(v1, v2) {
                                        if (v1 instanceof Data_List_Types.Nil) {
                                            $tco_done = true;
                                            return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                                        }
                                        ;
                                        if (v1 instanceof Data_List_Types.Cons) {
                                            if (v1.value0 instanceof TwoLeft) {
                                                $tco_done = true;
                                                return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                                            }
                                            ;
                                            if (v1.value0 instanceof TwoRight) {
                                                $tco_done = true;
                                                return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                                            }
                                            ;
                                            if (v1.value0 instanceof ThreeLeft) {
                                                $tco_var_v1 = v1.value1;
                                                $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                                return;
                                            }
                                            ;
                                            if (v1.value0 instanceof ThreeMiddle) {
                                                $tco_var_v1 = v1.value1;
                                                $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                                return;
                                            }
                                            ;
                                            if (v1.value0 instanceof ThreeRight) {
                                                $tco_var_v1 = v1.value1;
                                                $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                                return;
                                            }
                                            ;
                                            throw new Error(`Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): ${[v1.value0.constructor.name, v2.constructor.name]}`);
                                        }
                                        ;
                                        throw new Error(`Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): ${[v1.constructor.name, v2.constructor.name]}`);
                                    }
                                    ;
                                    while (!$tco_done) {
                                        $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                                    }
                                    ;
                                    return $tco_result;
                                };
                            };
                            const comp = Data_Ord.compare(dictOrd);
                            const down = $copy_ctx => {
                                return $copy_v1 => {
                                    let $tco_var_ctx = $copy_ctx;
                                    let $tco_done = false;
                                    let $tco_result;
                                    function $tco_loop(ctx, v1) {
                                        if (v1 instanceof Leaf) {
                                            $tco_done = true;
                                            return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                                        }
                                        ;
                                        if (v1 instanceof Two) {
                                            const v2 = comp(k)(v1.value1);
                                            if (v2 instanceof Data_Ordering.EQ) {
                                                $tco_done = true;
                                                return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                                            }
                                            ;
                                            if (v2 instanceof Data_Ordering.LT) {
                                                $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                                $copy_v1 = v1.value0;
                                                return;
                                            }
                                            ;
                                            $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                                            $copy_v1 = v1.value3;
                                            return;
                                        }
                                        ;
                                        if (v1 instanceof Three) {
                                            const v3 = comp(k)(v1.value1);
                                            if (v3 instanceof Data_Ordering.EQ) {
                                                $tco_done = true;
                                                return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                                            }
                                            ;
                                            const v4 = comp(k)(v1.value4);
                                            if (v4 instanceof Data_Ordering.EQ) {
                                                $tco_done = true;
                                                return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                                            }
                                            ;
                                            if (v3 instanceof Data_Ordering.LT) {
                                                $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                                $copy_v1 = v1.value0;
                                                return;
                                            }
                                            ;
                                            if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                                $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                                $copy_v1 = v1.value3;
                                                return;
                                            }
                                            ;
                                            $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                                            $copy_v1 = v1.value6;
                                            return;
                                        }
                                        ;
                                        throw new Error(`Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): ${[ctx.constructor.name, v1.constructor.name]}`);
                                    }
                                    ;
                                    while (!$tco_done) {
                                        $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                                    }
                                    ;
                                    return $tco_result;
                                };
                            };
                            return down(Data_List_Types.Nil.value);
                        };
                    };
                };
                const pop = dictOrd => {
                    return k => {
                        const up = $copy_ctxs => {
                            return $copy_tree => {
                                let $tco_var_ctxs = $copy_ctxs;
                                let $tco_done = false;
                                let $tco_result;
                                function $tco_loop(ctxs, tree) {
                                    if (ctxs instanceof Data_List_Types.Nil) {
                                        $tco_done = true;
                                        return tree;
                                    }
                                    ;
                                    if (ctxs instanceof Data_List_Types.Cons) {
                                        if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                                            $tco_done = true;
                                            return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                                        }
                                        ;
                                        if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                                            $tco_done = true;
                                            return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                                        }
                                        ;
                                        if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                                            $tco_var_ctxs = ctxs.value1;
                                            $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                                            return;
                                        }
                                        ;
                                        if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                                            $tco_var_ctxs = ctxs.value1;
                                            $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                                            return;
                                        }
                                        ;
                                        if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                                            $tco_done = true;
                                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                                        }
                                        ;
                                        if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                                            $tco_done = true;
                                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                                        }
                                        ;
                                        if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                                            $tco_done = true;
                                            return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                                        }
                                        ;
                                        if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                                            $tco_done = true;
                                            return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                                        }
                                        ;
                                        if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                                            $tco_done = true;
                                            return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                                        }
                                        ;
                                        if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                                            $tco_done = true;
                                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                                        }
                                        ;
                                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                                            $tco_done = true;
                                            return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                                        }
                                        ;
                                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                                            $tco_done = true;
                                            return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                                        }
                                        ;
                                        if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                                            $tco_done = true;
                                            return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                                        }
                                        ;
                                        if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                                            $tco_done = true;
                                            return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                                        }
                                        ;
                                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                                            $tco_done = true;
                                            return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                                        }
                                        ;
                                        if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                                            $tco_done = true;
                                            return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                                        }
                                        ;
                                        if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                                            $tco_done = true;
                                            return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                                        }
                                        ;
                                        throw new Error(`Failed pattern match at Data.Map.Internal (line 511, column 9 - line 528, column 136): ${[ctxs.value0.constructor.name, tree.constructor.name]}`);
                                    }
                                    ;
                                    throw new Error(`Failed pattern match at Data.Map.Internal (line 508, column 5 - line 528, column 136): ${[ctxs.constructor.name]}`);
                                }
                                ;
                                while (!$tco_done) {
                                    $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                                }
                                ;
                                return $tco_result;
                            };
                        };
                        const removeMaxNode = $copy_ctx => {
                            return $copy_m => {
                                let $tco_var_ctx = $copy_ctx;
                                let $tco_done = false;
                                let $tco_result;
                                function $tco_loop(ctx, m) {
                                    if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                                        $tco_done = true;
                                        return up(ctx)(Leaf.value);
                                    }
                                    ;
                                    if (m instanceof Two) {
                                        $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                                        $copy_m = m.value3;
                                        return;
                                    }
                                    ;
                                    if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                                        $tco_done = true;
                                        return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                                    }
                                    ;
                                    if (m instanceof Three) {
                                        $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                                        $copy_m = m.value6;
                                        return;
                                    }
                                    ;
                                    throw new Error(`Failed pattern match at Data.Map.Internal (line 540, column 5 - line 544, column 107): ${[m.constructor.name]}`);
                                }
                                ;
                                while (!$tco_done) {
                                    $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                                }
                                ;
                                return $tco_result;
                            };
                        };
                        const maxNode = $copy_m => {
                            let $tco_done = false;
                            let $tco_result;
                            function $tco_loop(m) {
                                if (m instanceof Two && m.value3 instanceof Leaf) {
                                    $tco_done = true;
                                    return {
                                        key: m.value1,
                                        value: m.value2
                                    };
                                }
                                ;
                                if (m instanceof Two) {
                                    $copy_m = m.value3;
                                    return;
                                }
                                ;
                                if (m instanceof Three && m.value6 instanceof Leaf) {
                                    $tco_done = true;
                                    return {
                                        key: m.value4,
                                        value: m.value5
                                    };
                                }
                                ;
                                if (m instanceof Three) {
                                    $copy_m = m.value6;
                                    return;
                                }
                                ;
                                throw new Error(`Failed pattern match at Data.Map.Internal (line 531, column 33 - line 535, column 45): ${[m.constructor.name]}`);
                            }
                            ;
                            while (!$tco_done) {
                                $tco_result = $tco_loop($copy_m);
                            }
                            ;
                            return $tco_result;
                        };
                        const comp = Data_Ord.compare(dictOrd);
                        const down = $copy_ctx => {
                            return $copy_m => {
                                let $tco_var_ctx = $copy_ctx;
                                let $tco_done = false;
                                let $tco_result;
                                function $tco_loop(ctx, m) {
                                    if (m instanceof Leaf) {
                                        $tco_done = true;
                                        return Data_Maybe.Nothing.value;
                                    }
                                    ;
                                    if (m instanceof Two) {
                                        var v = comp(k)(m.value1);
                                        if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                                            $tco_done = true;
                                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                                        }
                                        ;
                                        if (v instanceof Data_Ordering.EQ) {
                                            var max = maxNode(m.value0);
                                            $tco_done = true;
                                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                                        }
                                        ;
                                        if (v instanceof Data_Ordering.LT) {
                                            $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                                            $copy_m = m.value0;
                                            return;
                                        }
                                        ;
                                        $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                                        $copy_m = m.value3;
                                        return;
                                    }
                                    ;
                                    if (m instanceof Three) {
                                        const leaves = (() => {
                                            if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                                return true;
                                            }
                                            ;
                                            return false;
                                        })();
                                        var v = comp(k)(m.value4);
                                        const v3 = comp(k)(m.value1);
                                        if (leaves && v3 instanceof Data_Ordering.EQ) {
                                            $tco_done = true;
                                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                                        }
                                        ;
                                        if (leaves && v instanceof Data_Ordering.EQ) {
                                            $tco_done = true;
                                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                                        }
                                        ;
                                        if (v3 instanceof Data_Ordering.EQ) {
                                            var max = maxNode(m.value0);
                                            $tco_done = true;
                                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                                        }
                                        ;
                                        if (v instanceof Data_Ordering.EQ) {
                                            var max = maxNode(m.value3);
                                            $tco_done = true;
                                            return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                                        }
                                        ;
                                        if (v3 instanceof Data_Ordering.LT) {
                                            $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                                            $copy_m = m.value0;
                                            return;
                                        }
                                        ;
                                        if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                                            $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                                            $copy_m = m.value3;
                                            return;
                                        }
                                        ;
                                        $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                                        $copy_m = m.value6;
                                        return;
                                    }
                                    ;
                                    throw new Error(`Failed pattern match at Data.Map.Internal (line 481, column 34 - line 504, column 80): ${[m.constructor.name]}`);
                                }
                                ;
                                while (!$tco_done) {
                                    $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                                }
                                ;
                                return $tco_result;
                            };
                        };
                        return down(Data_List_Types.Nil.value);
                    };
                };
                const empty = Leaf.value;
                const fromFoldable = dictOrd => {
                    return dictFoldable => {
                        return Data_Foldable.foldl(dictFoldable)(m => {
                            return ({ value0, value1 }) => {
                                return insert(dictOrd)(value0)(value1)(m);
                            };
                        })(empty);
                    };
                };
                const $$delete = dictOrd => {
                    return k => {
                        return m => {
                            return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
                        };
                    };
                };
                exports["insert"] = insert;
                exports["lookup"] = lookup;
                exports["fromFoldable"] = fromFoldable;
                exports["toUnfoldable"] = toUnfoldable;
                exports["delete"] = $$delete;
                exports["keys"] = keys;
                exports["functorMap"] = functorMap;
            })(PS);
            ($PS => {
                $PS["Data.Map"] = $PS["Data.Map"] || {};
                const exports = $PS["Data.Map"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_Map_Internal = $PS["Data.Map.Internal"];
                const keys = (() => {
                    const $0 = Data_Functor["void"](Data_Map_Internal.functorMap);
                    return $1 => {
                        return $0($1);
                    };
                })();
                exports["keys"] = keys;
            })(PS);
            ($PS => {
                $PS["Data.Pair"] = $PS["Data.Pair"] || {};
                const exports = $PS["Data.Pair"];
                const Data_Eq = $PS["Data.Eq"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_Monoid = $PS["Data.Monoid"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Pair = (() => {
                    function Pair(value0, value1) {
                        this.value0 = value0;
                        this.value1 = value1;
                    }
                    ;
                    Pair.create = value0 => {
                        return value1 => {
                            return new Pair(value0, value1);
                        };
                    };
                    return Pair;
                })();
                const semigroupPair = dictSemigroup => {
                    return new Data_Semigroup.Semigroup(({ value0, value1 }) => {
                        return ({ value0, value1 }) => {
                            return new Pair(Data_Semigroup.append(dictSemigroup)(value0)(value0), Data_Semigroup.append(dictSemigroup)(value1)(value1));
                        };
                    });
                };
                const monoidPair = dictMonoid => {
                    return new Data_Monoid.Monoid(() => {
                        return semigroupPair(dictMonoid.Semigroup0());
                    }, new Pair(Data_Monoid.mempty(dictMonoid), Data_Monoid.mempty(dictMonoid)));
                };
                const functorPair = new Data_Functor.Functor(f => {
                    return ({ value0, value1 }) => {
                        return new Pair(f(value0), f(value1));
                    };
                });
                const eqPair = dictEq => {
                    return new Data_Eq.Eq(({ value0, value1 }) => {
                        return ({ value0, value1 }) => {
                            return Data_Eq.eq(dictEq)(value0)(value0) && Data_Eq.eq(dictEq)(value1)(value1);
                        };
                    });
                };
                exports["Pair"] = Pair;
                exports["eqPair"] = eqPair;
                exports["functorPair"] = functorPair;
                exports["monoidPair"] = monoidPair;
            })(PS);
            ($PS => {
                $PS["Data.Units"] = $PS["Data.Units"] || {};
                const exports = $PS["Data.Units"];
                const Data_Boolean = $PS["Data.Boolean"];
                const Data_Decimal = $PS["Data.Decimal"];
                const Data_Eq = $PS["Data.Eq"];
                const Data_Foldable = $PS["Data.Foldable"];
                const Data_Function = $PS["Data.Function"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_List = $PS["Data.List"];
                const Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
                const Data_List_Types = $PS["Data.List.Types"];
                const Data_Maybe = $PS["Data.Maybe"];
                const Data_Monoid = $PS["Data.Monoid"];
                const Data_Monoid_Additive = $PS["Data.Monoid.Additive"];
                const Data_Newtype = $PS["Data.Newtype"];
                const Data_NonEmpty = $PS["Data.NonEmpty"];
                const Data_Ord = $PS["Data.Ord"];
                const Data_Ordering = $PS["Data.Ordering"];
                const Data_Pair = $PS["Data.Pair"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Data_Semiring = $PS["Data.Semiring"];
                const Data_Show = $PS["Data.Show"];
                const Data_Tuple = $PS["Data.Tuple"];
                const Decimal = (() => {
                    function Decimal() {
                    }
                    ;
                    Decimal.value = new Decimal();
                    return Decimal;
                })();
                const Binary = (() => {
                    function Binary() {
                    }
                    ;
                    Binary.value = new Binary();
                    return Binary;
                })();
                const Prefix = (() => {
                    function Prefix(value0, value1) {
                        this.value0 = value0;
                        this.value1 = value1;
                    }
                    ;
                    Prefix.create = value0 => {
                        return value1 => {
                            return new Prefix(value0, value1);
                        };
                    };
                    return Prefix;
                })();
                const Standard = (() => {
                    function Standard() {
                    }
                    ;
                    Standard.value = new Standard();
                    return Standard;
                })();
                const NonStandard = (() => {
                    function NonStandard(value0) {
                        this.value0 = value0;
                    }
                    ;
                    NonStandard.create = value0 => {
                        return new NonStandard(value0);
                    };
                    return NonStandard;
                })();
                const DerivedUnit = (() => {
                    function DerivedUnit(value0) {
                        this.value0 = value0;
                    }
                    ;
                    DerivedUnit.create = value0 => {
                        return new DerivedUnit(value0);
                    };
                    return DerivedUnit;
                })();
                const unity$prime = {
                    "short": "unity",
                    "long": "unity",
                    unitType: Standard.value
                };
                const unity = new DerivedUnit(Data_List_Types.Nil.value);
                const split = v => {
                    return v1 => {
                        if (v1 instanceof Data_List_Types.Nil) {
                            return {
                                yes: Data_List_Types.Nil.value,
                                no: Data_List_Types.Nil.value
                            };
                        }
                        ;
                        if (v1 instanceof Data_List_Types.Cons) {
                            const res = split(v)(v1.value1);
                            const $72 = v(v1.value0);
                            if ($72) {
                                return {
                                    yes: new Data_List_Types.Cons(v1.value0, res.yes),
                                    no: res.no
                                };
                            }
                            ;
                            return {
                                yes: res.yes,
                                no: new Data_List_Types.Cons(v1.value0, res.no)
                            };
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.Units (line 199, column 1 - line 199, column 69): ${[v.constructor.name, v1.constructor.name]}`);
                    };
                };
                const sortBy$prime = f => {
                    return ({ value0, value1 }) => {
                        const sorted = Data_List.sortBy(f)(new Data_List_Types.Cons(value0, value1));
                        const nel = (() => {
                            const v1 = Data_List.uncons(sorted);
                            if (v1 instanceof Data_Maybe.Just) {
                                return new Data_NonEmpty.NonEmpty(v1.value0.head, v1.value0.tail);
                            }
                            ;
                            if (v1 instanceof Data_Maybe.Nothing) {
                                return new Data_NonEmpty.NonEmpty(value0, value1);
                            }
                            ;
                            throw new Error(`Failed pattern match at Data.Units (line 222, column 11 - line 224, column 45): ${[v1.constructor.name]}`);
                        })();
                        return nel;
                    };
                };
                const shortName = v => {
                    return v["short"];
                };
                const runDerivedUnit = ({ value0 }) => {
                    return value0;
                };
                const prettyExponent = v => {
                    if (v === -5.0) {
                        return "\u207b\u2075";
                    }
                    ;
                    if (v === -4.0) {
                        return "\u207b\u2074";
                    }
                    ;
                    if (v === -3.0) {
                        return "\u207b\xb3";
                    }
                    ;
                    if (v === -2.0) {
                        return "\u207b\xb2";
                    }
                    ;
                    if (v === -1.0) {
                        return "\u207b\xb9";
                    }
                    ;
                    if (v === 1.0) {
                        return "";
                    }
                    ;
                    if (v === 2.0) {
                        return "\xb2";
                    }
                    ;
                    if (v === 3.0) {
                        return "\xb3";
                    }
                    ;
                    if (v === 4.0) {
                        return "\u2074";
                    }
                    ;
                    if (v === 5.0) {
                        return "\u2075";
                    }
                    ;
                    return `^(${Data_Show.show(Data_Show.showNumber)(v)})`;
                };
                const prefixName = ({ value0, value1, constructor }) => {
                    if (value0 instanceof Decimal) {
                        var pn = v1 => {
                            if (v1 === -18.0) {
                                return new Data_Maybe.Just("a");
                            }
                            ;
                            if (v1 === -12.0) {
                                return new Data_Maybe.Just("p");
                            }
                            ;
                            if (v1 === -15.0) {
                                return new Data_Maybe.Just("f");
                            }
                            ;
                            if (v1 === -9.0) {
                                return new Data_Maybe.Just("n");
                            }
                            ;
                            if (v1 === -6.0) {
                                return new Data_Maybe.Just("\xb5");
                            }
                            ;
                            if (v1 === -3.0) {
                                return new Data_Maybe.Just("m");
                            }
                            ;
                            if (v1 === -2.0) {
                                return new Data_Maybe.Just("c");
                            }
                            ;
                            if (v1 === -1.0) {
                                return new Data_Maybe.Just("d");
                            }
                            ;
                            if (v1 === 0.0) {
                                return new Data_Maybe.Just("");
                            }
                            ;
                            if (v1 === 2.0) {
                                return new Data_Maybe.Just("h");
                            }
                            ;
                            if (v1 === 3.0) {
                                return new Data_Maybe.Just("k");
                            }
                            ;
                            if (v1 === 6.0) {
                                return new Data_Maybe.Just("M");
                            }
                            ;
                            if (v1 === 9.0) {
                                return new Data_Maybe.Just("G");
                            }
                            ;
                            if (v1 === 12.0) {
                                return new Data_Maybe.Just("T");
                            }
                            ;
                            if (v1 === 15.0) {
                                return new Data_Maybe.Just("P");
                            }
                            ;
                            if (v1 === 18.0) {
                                return new Data_Maybe.Just("E");
                            }
                            ;
                            return Data_Maybe.Nothing.value;
                        };
                        return pn(Data_Decimal.toNumber(value1));
                    }
                    ;
                    if (value0 instanceof Binary) {
                        var pn = v1 => {
                            if (v1 === 0.0) {
                                return new Data_Maybe.Just("");
                            }
                            ;
                            if (v1 === 10.0) {
                                return new Data_Maybe.Just("Ki");
                            }
                            ;
                            if (v1 === 20.0) {
                                return new Data_Maybe.Just("Mi");
                            }
                            ;
                            if (v1 === 30.0) {
                                return new Data_Maybe.Just("Gi");
                            }
                            ;
                            if (v1 === 40.0) {
                                return new Data_Maybe.Just("Ti");
                            }
                            ;
                            if (v1 === 50.0) {
                                return new Data_Maybe.Just("Pi");
                            }
                            ;
                            if (v1 === 60.0) {
                                return new Data_Maybe.Just("Ei");
                            }
                            ;
                            if (v1 === 70.0) {
                                return new Data_Maybe.Just("Zi");
                            }
                            ;
                            if (v1 === 80.0) {
                                return new Data_Maybe.Just("Yi");
                            }
                            ;
                            return Data_Maybe.Nothing.value;
                        };
                        return pn(Data_Decimal.toNumber(value1));
                    }
                    ;
                    throw new Error(`Failed pattern match at Data.Units (line 415, column 1 - line 415, column 35): ${[constructor.name]}`);
                };
                const toString = ({ value0 }) => {
                    const usSorted = Data_List.sortBy(Data_Ord.comparing(Data_Ord.ordNumber)(({ exponent }) => {
                        return -exponent;
                    }))(value0);
                    const toNum = v1 => {
                        if (v1 instanceof Decimal) {
                            return 10;
                        }
                        ;
                        if (v1 instanceof Binary) {
                            return 2;
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.Units (line 466, column 5 - line 466, column 23): ${[v1.constructor.name]}`);
                    };
                    const splitted = Data_List.span(({ exponent }) => {
                        return exponent >= 0.0;
                    })(usSorted);
                    const reverseExp = ({ exponent, baseUnit, prefix }) => {
                        return {
                            exponent: -exponent,
                            baseUnit,
                            prefix
                        };
                    };
                    const prefixName$prime = v1 => {
                        return Data_Maybe.fromMaybe(`${Data_Show.show(Data_Show.showInt)(toNum(v1.value0))}^${Data_Show.show(Data_Decimal.showDecimal)(v1.value1)}\xb7`)(prefixName(v1));
                    };
                    const withExp = ({ prefix, baseUnit, exponent }) => {
                        return prefixName$prime(prefix) + (shortName(baseUnit) + prettyExponent(exponent));
                    };
                    const positiveUsStr = Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)("\xb7")(Data_Functor.map(Data_List_Types.functorList)(withExp)(splitted.init));
                    const negativeUs = Data_List.sortBy(Data_Ord.comparing(Data_Ord.ordNumber)(({ exponent }) => {
                        return exponent;
                    }))(splitted.rest);
                    const negativeUsStr = Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)("\xb7")(Data_Functor.map(Data_List_Types.functorList)(withExp)(negativeUs));
                    const negativeUsStr$prime = Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)("\xb7")(Data_Functor.map(Data_List_Types.functorList)($219 => {
                        return withExp(reverseExp($219));
                    })(negativeUs));
                    const unitString = (() => {
                        if (splitted.init instanceof Data_List_Types.Nil) {
                            return negativeUsStr;
                        }
                        ;
                        if (negativeUs instanceof Data_List_Types.Nil) {
                            return positiveUsStr;
                        }
                        ;
                        if (negativeUs instanceof Data_List_Types.Cons && negativeUs.value1 instanceof Data_List_Types.Nil) {
                            return `${positiveUsStr}/${negativeUsStr$prime}`;
                        }
                        ;
                        return `${positiveUsStr}/(${negativeUsStr$prime})`;
                    })();
                    return unitString;
                };
                const power = u => {
                    return n => {
                        const update = ({ exponent, baseUnit, prefix }) => {
                            return {
                                exponent: exponent * n,
                                baseUnit,
                                prefix
                            };
                        };
                        return DerivedUnit.create(Data_Functor.map(Data_List_Types.functorList)(update)(runDerivedUnit(u)));
                    };
                };
                const noPrefix = new Prefix(Decimal.value, Data_Semiring.zero(Data_Decimal.semiringDecimal));
                const removePrefix = ({ value0 }) => {
                    return DerivedUnit.create(Data_Functor.map(Data_List_Types.functorList)(({ baseUnit, exponent }) => {
                        return {
                            prefix: noPrefix,
                            baseUnit,
                            exponent
                        };
                    })(value0));
                };
                const longName = v => {
                    return v["long"];
                };
                const isStandardUnit = ({ unitType }) => {
                    if (unitType instanceof Standard) {
                        return true;
                    }
                    ;
                    return false;
                };
                const groupBy$prime = v => {
                    return v1 => {
                        if (v1 instanceof Data_List_Types.Nil) {
                            return Data_List_Types.Nil.value;
                        }
                        ;
                        if (v1 instanceof Data_List_Types.Cons) {
                            const v2 = split(v(v1.value0))(v1.value1);
                            return new Data_List_Types.Cons(new Data_NonEmpty.NonEmpty(v1.value0, v2.yes), groupBy$prime(v)(v2.no));
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.Units (line 212, column 1 - line 212, column 67): ${[v.constructor.name, v1.constructor.name]}`);
                    };
                };
                const fromBaseUnit = $220 => {
                    return DerivedUnit.create(Data_List.singleton((v => {
                        return {
                            prefix: noPrefix,
                            baseUnit: v,
                            exponent: 1.0
                        };
                    })($220)));
                };
                const makeNonStandard = $$long => {
                    return $$short => {
                        return factor => {
                            return standardUnit => {
                                return fromBaseUnit({
                                    "short": $$short,
                                    "long": $$long,
                                    unitType: new NonStandard({
                                        standardUnit,
                                        factor: Data_Decimal.fromNumber(factor)
                                    })
                                });
                            };
                        };
                    };
                };
                const makeStandard = $$long => {
                    return $$short => {
                        return fromBaseUnit({
                            "short": $$short,
                            "long": $$long,
                            unitType: Standard.value
                        });
                    };
                };
                const eqPrefixBase = new Data_Eq.Eq(x => {
                    return y => {
                        if (x instanceof Decimal && y instanceof Decimal) {
                            return true;
                        }
                        ;
                        if (x instanceof Binary && y instanceof Binary) {
                            return true;
                        }
                        ;
                        return false;
                    };
                });
                const withPrefix = base => {
                    return p => {
                        return ({ value0 }) => {
                            if (value0 instanceof Data_List_Types.Nil) {
                                return DerivedUnit.create(Data_List.singleton({
                                    prefix: new Prefix(base, Data_Decimal.fromNumber(p)),
                                    baseUnit: unity$prime,
                                    exponent: 1.0
                                }));
                            }
                            ;
                            const isPlaceholder = ({ exponent, prefix }) => {
                                return exponent === 1.0 && (Data_Eq.eq(eqPrefixBase)(base)(prefix.value0) || Data_Eq.eq(Data_Decimal.eqDecimal)(prefix.value1)(Data_Semiring.zero(Data_Decimal.semiringDecimal)));
                            };
                            const addPrefixExp = ({ prefix, baseUnit, exponent }) => {
                                return {
                                    prefix: new Prefix(base, Data_Semiring.add(Data_Decimal.semiringDecimal)(Data_Decimal.fromNumber(p))(prefix.value1)),
                                    baseUnit,
                                    exponent
                                };
                            };
                            return DerivedUnit.create((() => {
                                const v1 = Data_List.findIndex(isPlaceholder)(value0);
                                if (v1 instanceof Data_Maybe.Just) {
                                    return Data_Maybe.fromMaybe(value0)(Data_List.modifyAt(v1.value0)(addPrefixExp)(value0));
                                }
                                ;
                                if (v1 instanceof Data_Maybe.Nothing) {
                                    return new Data_List_Types.Cons({
                                        prefix: new Prefix(base, Data_Decimal.fromNumber(p)),
                                        baseUnit: unity$prime,
                                        exponent: 1.0
                                    }, value0);
                                }
                                ;
                                throw new Error(`Failed pattern match at Data.Units (line 172, column 3 - line 175, column 91): ${[v1.constructor.name]}`);
                            })());
                        };
                    };
                };
                const eqPrefix = new Data_Eq.Eq(({ value1, value0 }) => {
                    return ({ value1, value0 }) => {
                        return Data_Eq.eq(Data_Decimal.eqDecimal)(value1)(Data_Semiring.zero(Data_Decimal.semiringDecimal)) && Data_Eq.eq(Data_Decimal.eqDecimal)(value1)(Data_Semiring.zero(Data_Decimal.semiringDecimal)) || Data_Eq.eq(eqPrefixBase)(value0)(value0) && Data_Eq.eq(Data_Decimal.eqDecimal)(value1)(value1);
                    };
                });
                const simplify = ({ value0 }) => {
                    const merge = units => {
                        return {
                            prefix: (Data_List_NonEmpty.head(units)).prefix,
                            baseUnit: (Data_List_NonEmpty.head(units)).baseUnit,
                            exponent: Data_Foldable.sum(Data_List_Types.foldableNonEmptyList)(Data_Semiring.semiringNumber)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(({ exponent }) => {
                                return exponent;
                            })(units))
                        };
                    };
                    const go = (() => {
                        const $221 = Data_List.filter(({ exponent }) => {
                            return !(exponent === 0.0);
                        });
                        const $222 = Data_Functor.map(Data_List_Types.functorList)(merge);
                        const $223 = groupBy$prime(({ baseUnit, prefix }) => {
                            return ({ baseUnit, prefix }) => {
                                return Data_Eq.eq(eqBaseUnit)(baseUnit)(baseUnit) && Data_Eq.eq(eqPrefix)(prefix)(prefix);
                            };
                        });
                        const $224 = Data_Functor.map(Data_List_Types.functorList)(Data_List_NonEmpty.toList);
                        const $225 = groupBy$prime(({ baseUnit }) => {
                            return ({ baseUnit }) => {
                                return Data_Eq.eq(eqBaseUnit)(baseUnit)(baseUnit);
                            };
                        });
                        return $226 => {
                            return $221($222($223(Data_List.concat($224($225($226))))));
                        };
                    })();
                    return new DerivedUnit(go(value0));
                };
                const eqUnitType = new Data_Eq.Eq(v => {
                    return v1 => {
                        if (v instanceof Standard && v1 instanceof Standard) {
                            return true;
                        }
                        ;
                        if (v instanceof NonStandard && v1 instanceof NonStandard) {
                            return Data_Eq.eq(eqDerivedUnit)(v.value0.standardUnit)(v1.value0.standardUnit) && Data_Eq.eq(Data_Decimal.eqDecimal)(v.value0.factor)(v1.value0.factor);
                        }
                        ;
                        return false;
                    };
                });
                var eqDerivedUnit = new Data_Eq.Eq(u1 => {
                    return u2 => {
                        const removeUnity = Data_List.filter(({ baseUnit }) => {
                            return longName(baseUnit) !== "unity";
                        });
                        const prepare = (() => {
                            const $227 = Data_List.sortBy(Data_Ord.comparing(Data_Ord.ordString)($229 => {
                                return shortName((({ baseUnit }) => {
                                    return baseUnit;
                                })($229));
                            }));
                            return $228 => {
                                return $227(runDerivedUnit(simplify($228)));
                            };
                        })();
                        const list2 = prepare(u2);
                        const list2$prime = removeUnity(list2);
                        const list1 = prepare(u1);
                        const list1$prime = removeUnity(list1);
                        const globalPrefix = us => {
                            const toPair = ({ value0, value1, constructor }) => {
                                if (value0 instanceof Decimal) {
                                    return new Data_Pair.Pair(value1, Data_Semiring.zero(Data_Decimal.semiringDecimal));
                                }
                                ;
                                if (value0 instanceof Binary) {
                                    return new Data_Pair.Pair(Data_Semiring.zero(Data_Decimal.semiringDecimal), value1);
                                }
                                ;
                                throw new Error(`Failed pattern match at Data.Units (line 335, column 11 - line 335, column 50): ${[constructor.name]}`);
                            };
                            const prefixPair = ({ exponent, prefix }) => {
                                return Data_Functor.map(Data_Pair.functorPair)(v1 => {
                                    return Data_Semiring.mul(Data_Decimal.semiringDecimal)(v1)(Data_Decimal.fromNumber(exponent));
                                })(toPair(prefix));
                            };
                            return Data_Functor.map(Data_Pair.functorPair)(Data_Newtype.un(Data_Newtype.newtypeAdditive)(Data_Monoid_Additive.Additive))(Data_Foldable.fold(Data_List_Types.foldableList)(Data_Pair.monoidPair(Data_Monoid_Additive.monoidAdditive(Data_Decimal.semiringDecimal)))(Data_Functor.map(Data_List_Types.functorList)((() => {
                                const $230 = Data_Functor.map(Data_Pair.functorPair)(Data_Monoid_Additive.Additive);
                                return $231 => {
                                    return $230(prefixPair($231));
                                };
                            })())(us)));
                        };
                        return Data_Eq.eq(Data_List_Types.eqList(eqBaseUnit))(Data_Functor.map(Data_List_Types.functorList)(({ baseUnit }) => {
                            return baseUnit;
                        })(list1$prime))(Data_Functor.map(Data_List_Types.functorList)(({ baseUnit }) => {
                            return baseUnit;
                        })(list2$prime)) && (Data_Eq.eq(Data_List_Types.eqList(Data_Eq.eqNumber))(Data_Functor.map(Data_List_Types.functorList)(({ exponent }) => {
                            return exponent;
                        })(list1$prime))(Data_Functor.map(Data_List_Types.functorList)(({ exponent }) => {
                            return exponent;
                        })(list2$prime)) && Data_Eq.eq(Data_Pair.eqPair(Data_Decimal.eqDecimal))(globalPrefix(list1))(globalPrefix(list2)));
                    };
                });
                var eqBaseUnit = new Data_Eq.Eq(v => {
                    return v1 => {
                        return v["long"] === v1["long"] && (v["short"] === v1["short"] && Data_Eq.eq(eqUnitType)(v.unitType)(v1.unitType));
                    };
                });
                const semigroupDerivedUnit = new Data_Semigroup.Semigroup(({ value0 }) => {
                    return ({ value0 }) => {
                        return simplify(new DerivedUnit(Data_Semigroup.append(Data_List_Types.semigroupList)(value0)(value0)));
                    };
                });
                const monoidDerivedUnit = new Data_Monoid.Monoid(() => {
                    return semigroupDerivedUnit;
                }, unity);
                const divideUnits = du1 => {
                    return du2 => {
                        return Data_Semigroup.append(semigroupDerivedUnit)(du1)(power(du2)(-1.0));
                    };
                };
                const decimalPrefix = withPrefix(Decimal.value);
                const exa = decimalPrefix(18.0);
                const femto = decimalPrefix(-15.0);
                const giga = decimalPrefix(9.0);
                const hecto = decimalPrefix(2.0);
                const kilo = decimalPrefix(3.0);
                const mega = decimalPrefix(6.0);
                const micro = decimalPrefix(-6.0);
                const milli = decimalPrefix(-3.0);
                const nano = decimalPrefix(-9.0);
                const peta = decimalPrefix(15.0);
                const pico = decimalPrefix(-12.0);
                const tera = decimalPrefix(12.0);
                const deci = decimalPrefix(-1.0);
                const conversionFactor = ({ unitType }) => {
                    if (unitType instanceof Standard) {
                        return Data_Semiring.one(Data_Decimal.semiringDecimal);
                    }
                    ;
                    if (unitType instanceof NonStandard) {
                        return unitType.value0.factor;
                    }
                    ;
                    throw new Error(`Failed pattern match at Data.Units (line 123, column 3 - line 125, column 50): ${[unitType.constructor.name]}`);
                };
                const centi = decimalPrefix(-2.0);
                const binaryPrefix = withPrefix(Binary.value);
                const exbi = binaryPrefix(60.0);
                const gibi = binaryPrefix(30.0);
                const kibi = binaryPrefix(10.0);
                const mebi = binaryPrefix(20.0);
                const pebi = binaryPrefix(50.0);
                const tebi = binaryPrefix(40.0);
                const yobi = binaryPrefix(80.0);
                const zebi = binaryPrefix(70.0);
                const baseToStandard = v => {
                    if (v.unitType instanceof Standard) {
                        return fromBaseUnit(v);
                    }
                    ;
                    if (v.unitType instanceof NonStandard) {
                        return v.unitType.value0.standardUnit;
                    }
                    ;
                    throw new Error(`Failed pattern match at Data.Units (line 117, column 3 - line 119, column 56): ${[v.unitType.constructor.name]}`);
                };
                const splitByDimension = ({ value0 }) => {
                    const standardUnit = $232 => {
                        return baseToStandard((({ baseUnit }) => {
                            return baseUnit;
                        })($232));
                    };
                    const removeExponent = v1 => {
                        if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value1 instanceof Data_List_Types.Nil) {
                            return DerivedUnit.create(Data_List.singleton({
                                exponent: 1.0,
                                baseUnit: v1.value0.value0.baseUnit,
                                prefix: v1.value0.value0.prefix
                            }));
                        }
                        ;
                        return v1;
                    };
                    const standardUnitWithoutExponent = $233 => {
                        return removeExponent(standardUnit($233));
                    };
                    const heuristic = ({ baseUnit, exponent }) => {
                        return ({ baseUnit, exponent }) => {
                            return Data_Semigroup.append(Data_Ordering.semigroupOrdering)(Data_Ord.compare(Data_Ord.ordBoolean)(isStandardUnit(baseUnit))(isStandardUnit(baseUnit)))(Data_Ord.compare(Data_Ord.ordNumber)(exponent)(exponent));
                        };
                    };
                    const exponentWRT = base => {
                        return u => {
                            const removedExponent = u$prime => {
                                const v1 = standardUnit(u$prime);
                                if (v1.value0 instanceof Data_List_Types.Cons && v1.value0.value1 instanceof Data_List_Types.Nil) {
                                    return v1.value0.value0.exponent;
                                }
                                ;
                                return 1.0;
                            };
                            return (u.exponent * removedExponent(u)) / removedExponent(base);
                        };
                    };
                    const reduce = us$prime => {
                        const us = sortBy$prime(Data_Function.flip(heuristic))(us$prime);
                        const first = Data_List_NonEmpty.head(us);
                        const exp = Data_Foldable.sum(Data_List_Types.foldableNonEmptyList)(Data_Semiring.semiringNumber)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(exponentWRT(first))(us));
                        const convertTo = DerivedUnit.create(Data_List.singleton({
                            exponent: exp,
                            baseUnit: first.baseUnit,
                            prefix: first.prefix
                        }));
                        return new Data_Tuple.Tuple(convertTo, DerivedUnit.create(Data_List_NonEmpty.toList(us)));
                    };
                    const transform = (() => {
                        const $234 = Data_Functor.map(Data_List_Types.functorList)(reduce);
                        const $235 = groupBy$prime(Data_Function.on(Data_Eq.eq(eqDerivedUnit))(standardUnitWithoutExponent));
                        return $236 => {
                            return $234($235($236));
                        };
                    })();
                    return transform(value0);
                };
                const toStandardUnit = ({ value0 }) => {
                    const convert = ({ baseUnit, exponent, prefix }) => {
                        const toNum = v2 => {
                            if (v2 instanceof Decimal) {
                                return Data_Decimal.fromNumber(10.0);
                            }
                            ;
                            if (v2 instanceof Binary) {
                                return Data_Decimal.fromNumber(2.0);
                            }
                            ;
                            throw new Error(`Failed pattern match at Data.Units (line 408, column 11 - line 408, column 42): ${[v2.constructor.name]}`);
                        };
                        const standardUnit = baseToStandard(baseUnit);
                        const factor = conversionFactor(baseUnit);
                        const exponent$prime = Data_Decimal.fromNumber(exponent);
                        return new Data_Tuple.Tuple(power(standardUnit)(exponent), Data_Decimal.pow(Data_Semiring.mul(Data_Decimal.semiringDecimal)(Data_Decimal.pow(toNum(prefix.value0))(prefix.value1))(factor))(exponent$prime));
                    };
                    const converted = Data_Functor.map(Data_List_Types.functorList)(convert)(value0);
                    const units$prime = Data_Foldable.foldMap(Data_List_Types.foldableList)(monoidDerivedUnit)(Data_Tuple.fst)(converted);
                    const conv = Data_Foldable.product(Data_List_Types.foldableList)(Data_Decimal.semiringDecimal)(Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.snd)(converted));
                    return new Data_Tuple.Tuple(units$prime, conv);
                };
                const baseRepresentation = du => {
                    if (Data_Eq.eq(eqDerivedUnit)(du)(unity)) {
                        return Data_List.singleton(du);
                    }
                    ;
                    if (Data_Boolean.otherwise) {
                        const replace = u => {
                            const v = runDerivedUnit(u);
                            if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
                                const b$prime = (() => {
                                    const $216 = v["value0"]["baseUnit"]["long"] === "gram";
                                    if ($216) {
                                        return {
                                            baseUnit: {
                                                "long": "kilogram",
                                                "short": "kg",
                                                unitType: v.value0.baseUnit.unitType
                                            },
                                            exponent: v.value0.exponent,
                                            prefix: v.value0.prefix
                                        };
                                    }
                                    ;
                                    return v.value0;
                                })();
                                return new DerivedUnit(Data_List.singleton(b$prime));
                            }
                            ;
                            return u;
                        };
                        const du$prime = Data_Tuple.fst(toStandardUnit(du));
                        const us = Data_Functor.map(Data_List_Types.functorList)($237 => {
                            return replace(Data_Tuple.snd($237));
                        })(splitByDimension(du$prime));
                        return us;
                    }
                    ;
                    throw new Error(`Failed pattern match at Data.Units (line 291, column 1 - line 291, column 52): ${[du.constructor.name]}`);
                };
                const atto = decimalPrefix(-18.0);
                exports["removePrefix"] = removePrefix;
                exports["splitByDimension"] = splitByDimension;
                exports["baseRepresentation"] = baseRepresentation;
                exports["makeStandard"] = makeStandard;
                exports["makeNonStandard"] = makeNonStandard;
                exports["toStandardUnit"] = toStandardUnit;
                exports["toString"] = toString;
                exports["power"] = power;
                exports["divideUnits"] = divideUnits;
                exports["unity"] = unity;
                exports["atto"] = atto;
                exports["femto"] = femto;
                exports["pico"] = pico;
                exports["nano"] = nano;
                exports["micro"] = micro;
                exports["centi"] = centi;
                exports["deci"] = deci;
                exports["hecto"] = hecto;
                exports["milli"] = milli;
                exports["kilo"] = kilo;
                exports["mega"] = mega;
                exports["giga"] = giga;
                exports["tera"] = tera;
                exports["peta"] = peta;
                exports["exa"] = exa;
                exports["kibi"] = kibi;
                exports["mebi"] = mebi;
                exports["gibi"] = gibi;
                exports["tebi"] = tebi;
                exports["pebi"] = pebi;
                exports["exbi"] = exbi;
                exports["zebi"] = zebi;
                exports["yobi"] = yobi;
                exports["eqDerivedUnit"] = eqDerivedUnit;
                exports["semigroupDerivedUnit"] = semigroupDerivedUnit;
                exports["monoidDerivedUnit"] = monoidDerivedUnit;
            })(PS);
            ($PS => {
                $PS["Data.Units.SI"] = $PS["Data.Units.SI"] || {};
                const exports = $PS["Data.Units.SI"];
                const Data_Units = $PS["Data.Units"];
                const second = Data_Units.makeStandard("second")("s");
                const mole = Data_Units.makeStandard("mole")("mol");
                const meter = Data_Units.makeStandard("meter")("m");
                const kelvin = Data_Units.makeStandard("kelvin")("K");
                const gram = Data_Units.makeStandard("gram")("g");
                const kilogram = Data_Units.kilo(gram);
                const candela = Data_Units.makeStandard("candela")("cd");
                const ampere = Data_Units.makeStandard("ampere")("A");
                exports["meter"] = meter;
                exports["kilogram"] = kilogram;
                exports["second"] = second;
                exports["gram"] = gram;
                exports["ampere"] = ampere;
                exports["mole"] = mole;
                exports["kelvin"] = kelvin;
                exports["candela"] = candela;
            })(PS);
            ($PS => {
                $PS["Data.Units.SI.Accepted"] = $PS["Data.Units.SI.Accepted"] || {};
                const exports = $PS["Data.Units.SI.Accepted"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Data_Units = $PS["Data.Units"];
                const Data_Units_SI = $PS["Data.Units.SI"];
                const $$Math = $PS["Math"];
                const tonne = Data_Units.makeNonStandard("tonne")("ton")(1000000.0)(Data_Units_SI.gram);
                const liter = Data_Units.makeNonStandard("liter")("L")(1.0e-3)(Data_Units.power(Data_Units_SI.meter)(3.0));
                const hectare = Data_Units.makeNonStandard("hectare")("ha")(10000.0)(Data_Units.power(Data_Units_SI.meter)(2.0));
                const electronvolt = Data_Units.makeNonStandard("electronvolt")("eV")(1.60217653e-16)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.gram)(Data_Units.divideUnits(Data_Units.power(Data_Units_SI.meter)(2.0))(Data_Units.power(Data_Units_SI.second)(2.0))));
                const degree = Data_Units.makeNonStandard("degree")("\xb0")($$Math.pi / 180.0)(Data_Units.unity);
                const bel = Data_Units.makeStandard("bel")("bel");
                const barn = Data_Units.makeNonStandard("barn")("barn")(1.0e-28)(Data_Units.power(Data_Units_SI.meter)(2.0));
                const bar = Data_Units.makeNonStandard("bar")("bar")(1.0e8)(Data_Units.divideUnits(Data_Units_SI.gram)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.meter)(Data_Units.power(Data_Units_SI.second)(2.0))));
                const astronomicalUnit = Data_Units.makeNonStandard("astronomical unit")("AU")(1.495978707e11)(Data_Units_SI.meter);
                const angstrom = Data_Units.makeNonStandard("\xc5ngstr\xf6m")("\xc5")(1.0e-10)(Data_Units_SI.meter);
                exports["degree"] = degree;
                exports["hectare"] = hectare;
                exports["liter"] = liter;
                exports["tonne"] = tonne;
                exports["electronvolt"] = electronvolt;
                exports["bel"] = bel;
                exports["astronomicalUnit"] = astronomicalUnit;
                exports["bar"] = bar;
                exports["angstrom"] = angstrom;
                exports["barn"] = barn;
            })(PS);
            ($PS => {
                $PS["Data.Units.SI.Derived"] = $PS["Data.Units.SI.Derived"] || {};
                const exports = $PS["Data.Units.SI.Derived"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Data_Units = $PS["Data.Units"];
                const Data_Units_SI = $PS["Data.Units.SI"];
                const weber = Data_Units.makeNonStandard("weber")("Wb")(1000.0)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.gram)(Data_Units.divideUnits(Data_Units.power(Data_Units_SI.meter)(2.0))(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units.power(Data_Units_SI.second)(2.0))(Data_Units_SI.ampere))));
                const watt = Data_Units.makeNonStandard("watt")("W")(1000.0)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.gram)(Data_Units.divideUnits(Data_Units.power(Data_Units_SI.meter)(2.0))(Data_Units.power(Data_Units_SI.second)(3.0))));
                const volt = Data_Units.makeNonStandard("volt")("V")(1000.0)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.gram)(Data_Units.divideUnits(Data_Units.power(Data_Units_SI.meter)(2.0))(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units.power(Data_Units_SI.second)(3.0))(Data_Units_SI.ampere))));
                const tesla = Data_Units.makeNonStandard("tesla")("T")(1000.0)(Data_Units.divideUnits(Data_Units_SI.gram)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units.power(Data_Units_SI.second)(2.0))(Data_Units_SI.ampere)));
                const sievert = Data_Units.makeNonStandard("sievert")("Sv")(1.0)(Data_Units.divideUnits(Data_Units.power(Data_Units_SI.meter)(2.0))(Data_Units.power(Data_Units_SI.second)(2.0)));
                const siemens = Data_Units.makeNonStandard("siemens")("S")(1.0e-3)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units.power(Data_Units_SI.second)(3.0))(Data_Units.divideUnits(Data_Units.power(Data_Units_SI.ampere)(2.0))(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.gram)(Data_Units.power(Data_Units_SI.meter)(2.0)))));
                const radian = Data_Units.makeNonStandard("radian")("rad")(1.0)(Data_Units.unity);
                const pascal = Data_Units.makeNonStandard("pascal")("Pa")(1000.0)(Data_Units.divideUnits(Data_Units_SI.gram)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.meter)(Data_Units.power(Data_Units_SI.second)(2.0))));
                const ohm = Data_Units.makeNonStandard("ohm")("\u03a9")(1000.0)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.gram)(Data_Units.divideUnits(Data_Units.power(Data_Units_SI.meter)(2.0))(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units.power(Data_Units_SI.second)(3.0))(Data_Units.power(Data_Units_SI.ampere)(2.0)))));
                const newton = Data_Units.makeNonStandard("newton")("N")(1000.0)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.gram)(Data_Units.divideUnits(Data_Units_SI.meter)(Data_Units.power(Data_Units_SI.second)(2.0))));
                const lux = Data_Units.makeNonStandard("lux")("lx")(1.0)(Data_Units.divideUnits(Data_Units_SI.candela)(Data_Units.power(Data_Units_SI.meter)(2.0)));
                const lumen = Data_Units.makeNonStandard("lumen")("lm")(1.0)(Data_Units_SI.candela);
                const katal = Data_Units.makeNonStandard("katal")("kat")(1.0)(Data_Units.divideUnits(Data_Units_SI.mole)(Data_Units_SI.second));
                const joule = Data_Units.makeNonStandard("joule")("J")(1000.0)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.gram)(Data_Units.divideUnits(Data_Units.power(Data_Units_SI.meter)(2.0))(Data_Units.power(Data_Units_SI.second)(2.0))));
                const hertz = Data_Units.makeNonStandard("hertz")("Hz")(1.0)(Data_Units.divideUnits(Data_Units.unity)(Data_Units_SI.second));
                const henry = Data_Units.makeNonStandard("henry")("H")(1000.0)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.gram)(Data_Units.divideUnits(Data_Units.power(Data_Units_SI.meter)(2.0))(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units.power(Data_Units_SI.second)(2.0))(Data_Units.power(Data_Units_SI.ampere)(2.0)))));
                const gray = Data_Units.makeNonStandard("gray")("Gy")(1.0)(Data_Units.divideUnits(Data_Units.power(Data_Units_SI.meter)(2.0))(Data_Units.power(Data_Units_SI.second)(2.0)));
                const farad = Data_Units.makeNonStandard("farad")("F")(1.0e-3)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units.power(Data_Units_SI.second)(4.0))(Data_Units.divideUnits(Data_Units.power(Data_Units_SI.ampere)(2.0))(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units.power(Data_Units_SI.gram)(1.0))(Data_Units.power(Data_Units_SI.meter)(2.0)))));
                const coulomb = Data_Units.makeNonStandard("coulomb")("C")(1.0)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.ampere)(Data_Units_SI.second));
                const becquerel = Data_Units.makeNonStandard("becquerel")("Bq")(1.0)(Data_Units.power(Data_Units_SI.second)(-1.0));
                exports["radian"] = radian;
                exports["hertz"] = hertz;
                exports["newton"] = newton;
                exports["pascal"] = pascal;
                exports["joule"] = joule;
                exports["watt"] = watt;
                exports["coulomb"] = coulomb;
                exports["volt"] = volt;
                exports["farad"] = farad;
                exports["ohm"] = ohm;
                exports["siemens"] = siemens;
                exports["weber"] = weber;
                exports["tesla"] = tesla;
                exports["henry"] = henry;
                exports["lumen"] = lumen;
                exports["lux"] = lux;
                exports["becquerel"] = becquerel;
                exports["gray"] = gray;
                exports["sievert"] = sievert;
                exports["katal"] = katal;
            })(PS);
            ($PS => {
                $PS["Data.Quantity"] = $PS["Data.Quantity"] || {};
                const exports = $PS["Data.Quantity"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Bind = $PS["Control.Bind"];
                const Data_Boolean = $PS["Data.Boolean"];
                const Data_Decimal = $PS["Data.Decimal"];
                const Data_Either = $PS["Data.Either"];
                const Data_Eq = $PS["Data.Eq"];
                const Data_EuclideanRing = $PS["Data.EuclideanRing"];
                const Data_Foldable = $PS["Data.Foldable"];
                const Data_Function = $PS["Data.Function"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_List_Types = $PS["Data.List.Types"];
                const Data_Ord = $PS["Data.Ord"];
                const Data_Ring = $PS["Data.Ring"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Data_Semiring = $PS["Data.Semiring"];
                const Data_Tuple = $PS["Data.Tuple"];
                const Data_Units = $PS["Data.Units"];
                const Data_Units_SI_Accepted = $PS["Data.Units.SI.Accepted"];
                const Data_Units_SI_Derived = $PS["Data.Units.SI.Derived"];
                const Quantity = (() => {
                    function Quantity(value0, value1) {
                        this.value0 = value0;
                        this.value1 = value1;
                    }
                    ;
                    Quantity.create = value0 => {
                        return value1 => {
                            return new Quantity(value0, value1);
                        };
                    };
                    return Quantity;
                })();
                const ConversionError = (() => {
                    function ConversionError(value0, value1) {
                        this.value0 = value0;
                        this.value1 = value1;
                    }
                    ;
                    ConversionError.create = value0 => {
                        return value1 => {
                            return new ConversionError(value0, value1);
                        };
                    };
                    return ConversionError;
                })();
                const value = ({ value0 }) => {
                    return value0;
                };
                const quantity$prime = n => {
                    return du => {
                        return new Quantity(n, du);
                    };
                };
                const scalar$prime = factor => {
                    return quantity$prime(factor)(Data_Units.unity);
                };
                const toStandard = ({ value1, value0 }) => {
                    const v1 = Data_Units.toStandardUnit(value1);
                    return quantity$prime(Data_Semiring.mul(Data_Decimal.semiringDecimal)(v1.value1)(value0))(v1.value0);
                };
                const quantity = n => {
                    return du => {
                        return new Quantity(Data_Decimal.fromNumber(n), du);
                    };
                };
                const scalar = factor => {
                    return quantity(factor)(Data_Units.unity);
                };
                const qNegate = ({ value0, value1 }) => {
                    return new Quantity(Data_Ring.negate(Data_Decimal.ringDecimal)(value0), value1);
                };
                const qMultiply = ({ value0, value1 }) => {
                    return ({ value0, value1 }) => {
                        return quantity$prime(Data_Semiring.mul(Data_Decimal.semiringDecimal)(value0)(value0))(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(value1)(value1));
                    };
                };
                const qDivide = ({ value0, value1 }) => {
                    return ({ value0, value1 }) => {
                        return quantity$prime(Data_EuclideanRing.div(Data_Decimal.euclideanRingDecimal)(value0)(value0))(Data_Units.divideUnits(value1)(value1));
                    };
                };
                const prettyDecimal = d => {
                    const $63 = Data_Decimal.isInteger(d) && Data_Ord.lessThan(Data_Decimal.ordDecimal)(d)(Data_Decimal.fromNumber(1.0e18));
                    if ($63) {
                        return Data_Decimal.toString(d);
                    }
                    ;
                    return Data_Decimal.toString(Data_Decimal.toSignificantDigits(6)(d));
                };
                const prettyPrint$prime = ({ value1, value0, constructor }) => {
                    if (Data_Eq.eq(Data_Units.eqDerivedUnit)(value1)(Data_Units.unity)) {
                        return {
                            number: prettyDecimal(value0),
                            space: false,
                            unit: ""
                        };
                    }
                    ;
                    if (Data_Boolean.otherwise) {
                        const space = Data_Eq.notEq(Data_Units.eqDerivedUnit)(value1)(Data_Units_SI_Accepted.degree);
                        return {
                            number: prettyDecimal(value0),
                            space,
                            unit: Data_Units.toString(value1)
                        };
                    }
                    ;
                    throw new Error(`Failed pattern match at Data.Quantity (line 105, column 1 - line 105, column 78): ${[constructor.name]}`);
                };
                const pow = ({ value0, value1 }) => {
                    return exp => {
                        return quantity$prime(Data_Decimal.pow(value0)(exp))(Data_Units.power(value1)(Data_Decimal.toNumber(exp)));
                    };
                };
                const sqrt = q => {
                    return pow(q)(Data_Decimal.fromNumber(0.5));
                };
                const $$isFinite = ({ value0 }) => {
                    return Data_Decimal["isFinite"](value0);
                };
                const derivedUnit = ({ value1 }) => {
                    return value1;
                };
                const eqQuantity = new Data_Eq.Eq(q1 => {
                    return q2 => {
                        const q2$prime = toStandard(q2);
                        const u2 = derivedUnit(q2$prime);
                        const v2 = value(q2$prime);
                        const q1$prime = toStandard(q1);
                        const u1 = derivedUnit(q1$prime);
                        const v1 = value(q1$prime);
                        return Data_Eq.eq(Data_Decimal.eqDecimal)(v1)(v2) && Data_Eq.eq(Data_Units.eqDerivedUnit)(u1)(u2) || Data_Eq.eq(Data_Decimal.eqDecimal)(v1)(Data_Semiring.zero(Data_Decimal.semiringDecimal)) && Data_Eq.eq(Data_Decimal.eqDecimal)(v2)(Data_Semiring.zero(Data_Decimal.semiringDecimal));
                    };
                });
                const convert = to => {
                    return v => {
                        if (Data_Eq.eq(Data_Units.eqDerivedUnit)(to)(v.value1)) {
                            return new Data_Either.Right(new Quantity(v.value0, to));
                        }
                        ;
                        if (Data_Eq.eq(Data_Decimal.eqDecimal)(v.value0)(Data_Semiring.zero(Data_Decimal.semiringDecimal))) {
                            return new Data_Either.Right(new Quantity(Data_Semiring.zero(Data_Decimal.semiringDecimal), to));
                        }
                        ;
                        if (Data_Boolean.otherwise) {
                            const v1 = Data_Units.toStandardUnit(to);
                            const q$prime = toStandard(v);
                            const from$prime = derivedUnit(q$prime);
                            const $97 = Data_Eq.eq(Data_Units.eqDerivedUnit)(from$prime)(v1.value0);
                            if ($97) {
                                return Data_Either.Right.create(new Quantity(Data_EuclideanRing.div(Data_Decimal.euclideanRingDecimal)(q$prime.value0)(v1.value1), to));
                            }
                            ;
                            return Data_Either.Left.create(new ConversionError(v.value1, to));
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.Quantity (line 215, column 1 - line 215, column 67): ${[to.constructor.name, v.constructor.name]}`);
                    };
                };
                const convertTo = Data_Function.flip(convert);
                const qAdd = v => {
                    return v1 => {
                        if (Data_Eq.eq(Data_Decimal.eqDecimal)(v.value0)(Data_Semiring.zero(Data_Decimal.semiringDecimal))) {
                            return Control_Applicative.pure(Data_Either.applicativeEither)(v1);
                        }
                        ;
                        if (Data_Eq.eq(Data_Decimal.eqDecimal)(v1.value0)(Data_Semiring.zero(Data_Decimal.semiringDecimal))) {
                            return Control_Applicative.pure(Data_Either.applicativeEither)(v);
                        }
                        ;
                        if (Data_Boolean.otherwise) {
                            return Control_Bind.bind(Data_Either.bindEither)(convertTo(v1)(v.value1))(({ value0 }) => {
                                return Control_Applicative.pure(Data_Either.applicativeEither)(quantity$prime(Data_Semiring.add(Data_Decimal.semiringDecimal)(v.value0)(value0))(v.value1));
                            });
                        }
                        ;
                        throw new Error(`Failed pattern match at Data.Quantity (line 262, column 1 - line 262, column 61): ${[v.constructor.name, v1.constructor.name]}`);
                    };
                };
                const qSubtract = q1 => {
                    return ({ value0, value1 }) => {
                        return qAdd(q1)(new Quantity(Data_Ring.negate(Data_Decimal.ringDecimal)(value0), value1));
                    };
                };
                const asValueIn$prime = u => {
                    return Control_Bind.composeKleisli(Data_Either.bindEither)(convertTo(u))((() => {
                        const $136 = Control_Applicative.pure(Data_Either.applicativeEither);
                        return $137 => {
                            return $136(value($137));
                        };
                    })());
                };
                const toScalar$prime = q => {
                    return asValueIn$prime(q)(Data_Units.unity);
                };
                const fullSimplify = v => {
                    const v1 = toScalar$prime(v);
                    if (v1 instanceof Data_Either.Right) {
                        const $120 = Data_Eq.notEq(Data_Units.eqDerivedUnit)(Data_Units.removePrefix(v.value1))(Data_Units_SI_Accepted.degree) && Data_Eq.notEq(Data_Units.eqDerivedUnit)(Data_Units.removePrefix(v.value1))(Data_Units_SI_Derived.radian);
                        if ($120) {
                            return new Quantity(v1.value0, Data_Units.unity);
                        }
                        ;
                        return quantity$prime(v.value0)(v.value1);
                    }
                    ;
                    if (v1 instanceof Data_Either.Left) {
                        const toTuple = ({ value1, value0 }) => {
                            const v3 = convertTo(quantity(1)(value1))(value0);
                            if (v3 instanceof Data_Either.Right) {
                                return new Data_Tuple.Tuple(v3.value0.value0, v3.value0.value1);
                            }
                            ;
                            if (v3 instanceof Data_Either.Left) {
                                return new Data_Tuple.Tuple(Data_Semiring.one(Data_Decimal.semiringDecimal), value0);
                            }
                            ;
                            throw new Error(`Failed pattern match at Data.Quantity (line 151, column 13 - line 153, column 55): ${[v3.constructor.name]}`);
                        };
                        const list = Data_Units.splitByDimension(v.value1);
                        const list$prime = Data_Functor.map(Data_List_Types.functorList)(toTuple)(list);
                        const factor = Data_Foldable.product(Data_List_Types.foldableList)(Data_Decimal.semiringDecimal)(Data_Functor.map(Data_List_Types.functorList)(Data_Tuple.fst)(list$prime));
                        const du$prime = Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Units.monoidDerivedUnit)(Data_Tuple.snd)(list$prime);
                        return new Quantity(Data_Semiring.mul(Data_Decimal.semiringDecimal)(v.value0)(factor), du$prime);
                    }
                    ;
                    throw new Error(`Failed pattern match at Data.Quantity (line 142, column 3 - line 160, column 32): ${[v1.constructor.name]}`);
                };
                const asValueIn = q => {
                    return u => {
                        return Data_Functor.map(Data_Either.functorEither)(Data_Decimal.toNumber)(asValueIn$prime(q)(u));
                    };
                };
                const toScalar = q => {
                    return asValueIn(q)(Data_Units.unity);
                };
                const abs = ({ value0, value1 }) => {
                    return quantity$prime(Data_Decimal.abs(value0))(value1);
                };
                exports["quantity"] = quantity;
                exports["quantity'"] = quantity$prime;
                exports["prettyPrint'"] = prettyPrint$prime;
                exports["derivedUnit"] = derivedUnit;
                exports["fullSimplify"] = fullSimplify;
                exports["scalar"] = scalar;
                exports["scalar'"] = scalar$prime;
                exports["convertTo"] = convertTo;
                exports["asValueIn"] = asValueIn;
                exports["asValueIn'"] = asValueIn$prime;
                exports["toScalar"] = toScalar;
                exports["toScalar'"] = toScalar$prime;
                exports["isFinite"] = $$isFinite;
                exports["qNegate"] = qNegate;
                exports["qAdd"] = qAdd;
                exports["qSubtract"] = qSubtract;
                exports["qMultiply"] = qMultiply;
                exports["qDivide"] = qDivide;
                exports["pow"] = pow;
                exports["abs"] = abs;
                exports["sqrt"] = sqrt;
                exports["eqQuantity"] = eqQuantity;
            })(PS);
            ($PS => {
                $PS["Data.Quantity.Math"] = $PS["Data.Quantity.Math"] || {};
                const exports = $PS["Data.Quantity.Math"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Bind = $PS["Control.Bind"];
                const Data_Decimal = $PS["Data.Decimal"];
                const Data_Either = $PS["Data.Either"];
                const Data_Foldable = $PS["Data.Foldable"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
                const Data_List_Types = $PS["Data.List.Types"];
                const Data_Quantity = $PS["Data.Quantity"];
                const Data_Semiring = $PS["Data.Semiring"];
                const tau = Data_Quantity["scalar'"](Data_Semiring.mul(Data_Decimal.semiringDecimal)(Data_Decimal.fromNumber(2.0))(Data_Decimal.pi));
                const pi = Data_Quantity["scalar'"](Data_Decimal.pi);
                const mean = xs => {
                    const n = Data_Quantity["scalar'"](Data_Decimal.fromInt(Data_List_NonEmpty.length(xs)));
                    return Data_Functor.map(Data_Either.functorEither)(v => {
                        return Data_Quantity.qDivide(v)(n);
                    })(Data_Foldable.foldM(Data_List_Types.foldableList)(Data_Either.monadEither)(Data_Quantity.qAdd)(Data_List_NonEmpty.head(xs))(Data_List_NonEmpty.tail(xs)));
                };
                const lift2 = f => {
                    return q1 => {
                        return q2 => {
                            const u = Data_Quantity.derivedUnit(q1);
                            return Control_Bind.bind(Data_Either.bindEither)(Data_Quantity["asValueIn'"](q1)(u))(v1 => {
                                return Control_Bind.bind(Data_Either.bindEither)(Data_Quantity["asValueIn'"](q2)(u))(v2 => {
                                    return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Quantity["quantity'"](f(v1)(v2))(u));
                                });
                            });
                        };
                    };
                };
                const max2 = lift2(Data_Decimal.max);
                const max = xs => {
                    return Data_Foldable.foldM(Data_List_Types.foldableList)(Data_Either.monadEither)(max2)(Data_List_NonEmpty.head(xs))(Data_List_NonEmpty.tail(xs));
                };
                const min2 = lift2(Data_Decimal.min);
                const min = xs => {
                    return Data_Foldable.foldM(Data_List_Types.foldableList)(Data_Either.monadEither)(min2)(Data_List_NonEmpty.head(xs))(Data_List_NonEmpty.tail(xs));
                };
                const modulo = lift2(Data_Decimal.modulo);
                const lift = fn => {
                    return q => {
                        return Data_Functor.map(Data_Either.functorEither)($1 => {
                            return Data_Quantity["scalar'"](fn($1));
                        })(Data_Quantity["toScalar'"](q));
                    };
                };
                const ln = lift(Data_Decimal.ln);
                const log10 = lift(Data_Decimal.log10);
                const round = lift(Data_Decimal.round);
                const sin = lift(Data_Decimal.sin);
                const sinh = lift(Data_Decimal.sinh);
                const tan = lift(Data_Decimal.tan);
                const tanh = lift(Data_Decimal.tanh);
                const gamma = lift(Data_Decimal.gamma);
                const floor = lift(Data_Decimal.floor);
                const factorial = lift(Data_Decimal.factorial);
                const exp = lift(Data_Decimal.exp);
                const e = Data_Quantity["scalar'"](Data_Decimal.e);
                const cosh = lift(Data_Decimal.cosh);
                const cos = lift(Data_Decimal.cos);
                const ceil = lift(Data_Decimal.ceil);
                const atanh = lift(Data_Decimal.atanh);
                const atan2 = x => {
                    return y => {
                        const removeDims = q => {
                            return Data_Quantity.qDivide(q)(Data_Quantity.quantity(1.0)(Data_Quantity.derivedUnit(q)));
                        };
                        return Data_Functor.map(Data_Either.functorEither)(removeDims)(lift2(Data_Decimal.atan2)(x)(y));
                    };
                };
                const atan = lift(Data_Decimal.atan);
                const asinh = lift(Data_Decimal.asinh);
                const asin = lift(Data_Decimal.asin);
                const acosh = lift(Data_Decimal.acosh);
                const acos = lift(Data_Decimal.acos);
                exports["acos"] = acos;
                exports["asin"] = asin;
                exports["atan"] = atan;
                exports["atan2"] = atan2;
                exports["cos"] = cos;
                exports["exp"] = exp;
                exports["ln"] = ln;
                exports["sin"] = sin;
                exports["tan"] = tan;
                exports["sinh"] = sinh;
                exports["cosh"] = cosh;
                exports["tanh"] = tanh;
                exports["asinh"] = asinh;
                exports["acosh"] = acosh;
                exports["atanh"] = atanh;
                exports["ceil"] = ceil;
                exports["floor"] = floor;
                exports["log10"] = log10;
                exports["max"] = max;
                exports["min"] = min;
                exports["mean"] = mean;
                exports["modulo"] = modulo;
                exports["round"] = round;
                exports["gamma"] = gamma;
                exports["factorial"] = factorial;
                exports["pi"] = pi;
                exports["e"] = e;
                exports["tau"] = tau;
            })(PS);
            ($PS => {
                $PS["Data.Quantity.Physics"] = $PS["Data.Quantity.Physics"] || {};
                const exports = $PS["Data.Quantity.Physics"];
                const Data_Decimal = $PS["Data.Decimal"];
                const Data_Either = $PS["Data.Either"];
                const Data_Quantity = $PS["Data.Quantity"];
                const Data_Quantity_Math = $PS["Data.Quantity.Math"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Data_Units = $PS["Data.Units"];
                const Data_Units_SI = $PS["Data.Units.SI"];
                const Data_Units_SI_Derived = $PS["Data.Units.SI.Derived"];
                const µB = Data_Quantity.quantity(9.274009994e-24)(Data_Units.divideUnits(Data_Units_SI_Derived.joule)(Data_Units_SI_Derived.tesla));
                const µ0 = Data_Quantity.qMultiply(Data_Quantity_Math.pi)(Data_Quantity.quantity(4.0e-7)(Data_Units.divideUnits(Data_Units_SI_Derived.newton)(Data_Units.power(Data_Units_SI.ampere)(2.0))));
                const speedOfLight = Data_Quantity.quantity(2.99792458e8)(Data_Units.divideUnits(Data_Units_SI.meter)(Data_Units_SI.second));
                const ε0 = (() => {
                    const ε0$prime = Data_Quantity.qDivide(Data_Quantity.scalar(1.0))(Data_Quantity.qMultiply(µ0)(Data_Quantity.pow(speedOfLight)(Data_Decimal.fromNumber(2.0))));
                    const v = Data_Quantity.convertTo(ε0$prime)(Data_Units.divideUnits(Data_Units_SI_Derived.farad)(Data_Units_SI.meter));
                    if (v instanceof Data_Either.Right) {
                        return v.value0;
                    }
                    ;
                    if (v instanceof Data_Either.Left) {
                        return ε0$prime;
                    }
                    ;
                    throw new Error(`Failed pattern match at Data.Quantity.Physics (line 60, column 6 - line 62, column 20): ${[v.constructor.name]}`);
                })();
                const protonMass = Data_Quantity.quantity(1.672621898e-27)(Data_Units_SI.kilogram);
                const planckConstant = Data_Quantity.quantity(6.62607004e-34)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI_Derived.joule)(Data_Units_SI.second));
                const ℏ = Data_Quantity.qDivide(planckConstant)(Data_Quantity.qMultiply(Data_Quantity.scalar(2.0))(Data_Quantity_Math.pi));
                const kB = Data_Quantity.quantity(1.38064852e-23)(Data_Units.divideUnits(Data_Units_SI_Derived.joule)(Data_Units_SI.kelvin));
                const idealGasConstant = Data_Quantity.quantity(8.3145)(Data_Units.divideUnits(Data_Units_SI_Derived.joule)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.mole)(Data_Units_SI.kelvin)));
                const gravitationalConstant = Data_Quantity.quantity(6.67408e-11)(Data_Units.divideUnits(Data_Units.power(Data_Units_SI.meter)(3.0))(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units.kilo(Data_Units_SI.gram))(Data_Units.power(Data_Units_SI.second)(2.0))));
                const g0 = Data_Quantity.quantity(9.80665)(Data_Units.divideUnits(Data_Units_SI.meter)(Data_Units.power(Data_Units_SI.second)(2.0)));
                const electronMass = Data_Quantity.quantity(9.1093826e-31)(Data_Units.kilo(Data_Units_SI.gram));
                const electronCharge = Data_Quantity.quantity(1.60217653e-19)(Data_Units_SI_Derived.coulomb);
                const α = Data_Quantity.fullSimplify(Data_Quantity.qDivide(Data_Quantity.pow(electronCharge)(Data_Decimal.fromNumber(2.0)))(Data_Quantity.qMultiply(Data_Quantity.qMultiply(Data_Quantity.qMultiply(Data_Quantity.qMultiply(Data_Quantity.scalar(4.0))(Data_Quantity_Math.pi))(ε0))(ℏ))(speedOfLight)));
                const avogadroConstant = Data_Quantity.quantity(6.022140857e23)(Data_Units.power(Data_Units_SI.mole)(-1.0));
                exports["speedOfLight"] = speedOfLight;
                exports["gravitationalConstant"] = gravitationalConstant;
                exports["planckConstant"] = planckConstant;
                exports["ℏ"] = ℏ;
                exports["electronMass"] = electronMass;
                exports["electronCharge"] = electronCharge;
                exports["µ0"] = µ0;
                exports["ε0"] = ε0;
                exports["µB"] = µB;
                exports["α"] = α;
                exports["protonMass"] = protonMass;
                exports["avogadroConstant"] = avogadroConstant;
                exports["kB"] = kB;
                exports["g0"] = g0;
                exports["idealGasConstant"] = idealGasConstant;
            })(PS);
            ($PS => {
                $PS["Data.Set"] = $PS["Data.Set"] || {};
                const exports = $PS["Data.Set"];
                const Data_List = $PS["Data.List"];
                const Data_Map_Internal = $PS["Data.Map.Internal"];
                const toList = v => {
                    return Data_Map_Internal.keys(v);
                };
                const toUnfoldable = dictUnfoldable => {
                    const $63 = Data_List.toUnfoldable(dictUnfoldable);
                    return $64 => {
                        return $63(toList($64));
                    };
                };
                exports["toUnfoldable"] = toUnfoldable;
            })(PS);
            (exports => {
                const hasArrayFrom = typeof Array.from === "function";
                const hasStringIterator = typeof Symbol !== "undefined" &&
                    Symbol != null &&
                    typeof Symbol.iterator !== "undefined" &&
                    typeof String.prototype[Symbol.iterator] === "function";
                const hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
                const hasCodePointAt = typeof String.prototype.codePointAt === "function";
                exports._unsafeCodePointAt0 = fallback => {
                    return hasCodePointAt
                        ? str => { return str.codePointAt(0); }
                        : fallback;
                };
                exports._fromCodePointArray = singleton => {
                    return hasFromCodePoint
                        ? cps => {
                            if (cps.length < 10e3) {
                                return String.fromCodePoint(...cps);
                            }
                            return cps.map(singleton).join("");
                        }
                        : cps => {
                            return cps.map(singleton).join("");
                        };
                };
                exports._singleton = fallback => {
                    return hasFromCodePoint ? String.fromCodePoint : fallback;
                };
                exports._take = fallback => {
                    return n => {
                        if (hasStringIterator) {
                            return str => {
                                let accum = "";
                                const iter = str[Symbol.iterator]();
                                for (let i = 0; i < n; ++i) {
                                    const o = iter.next();
                                    if (o.done)
                                        return accum;
                                    accum += o.value;
                                }
                                return accum;
                            };
                        }
                        return fallback(n);
                    };
                };
                exports._toCodePointArray = fallback => {
                    return unsafeCodePointAt0 => {
                        if (hasArrayFrom) {
                            return str => {
                                return Array.from(str, unsafeCodePointAt0);
                            };
                        }
                        return fallback;
                    };
                };
            })(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
            (exports => {
                exports.fromCharArray = a => {
                    return a.join("");
                };
                exports.toCharArray = s => {
                    return s.split("");
                };
                exports.singleton = c => {
                    return c;
                };
                exports._charAt = just => {
                    return nothing => {
                        return i => {
                            return s => {
                                return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
                            };
                        };
                    };
                };
                exports.length = ({ length }) => {
                    return length;
                };
                exports._indexOf = just => {
                    return nothing => {
                        return x => {
                            return s => {
                                const i = s.indexOf(x);
                                return i === -1 ? nothing : just(i);
                            };
                        };
                    };
                };
                exports.take = n => {
                    return s => {
                        return s.substr(0, n);
                    };
                };
                exports.drop = n => {
                    return s => {
                        return s.substring(n);
                    };
                };
            })(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
            (exports => {
                exports.charAt = i => {
                    return s => {
                        if (i >= 0 && i < s.length)
                            return s.charAt(i);
                        throw new Error("Data.String.Unsafe.charAt: Invalid index.");
                    };
                };
            })(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
            ($PS => {
                $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
                const exports = $PS["Data.String.Unsafe"];
                const $foreign = $PS["Data.String.Unsafe"];
                exports["charAt"] = $foreign.charAt;
            })(PS);
            ($PS => {
                $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
                const exports = $PS["Data.String.CodeUnits"];
                const $foreign = $PS["Data.String.CodeUnits"];
                const Data_Maybe = $PS["Data.Maybe"];
                const Data_String_Unsafe = $PS["Data.String.Unsafe"];
                const uncons = v => {
                    if (v === "") {
                        return Data_Maybe.Nothing.value;
                    }
                    ;
                    return new Data_Maybe.Just({
                        head: Data_String_Unsafe.charAt(0)(v),
                        tail: $foreign.drop(1)(v)
                    });
                };
                const indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
                const charAt = $foreign["_charAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
                exports["uncons"] = uncons;
                exports["indexOf"] = indexOf;
                exports["singleton"] = $foreign.singleton;
                exports["fromCharArray"] = $foreign.fromCharArray;
                exports["toCharArray"] = $foreign.toCharArray;
                exports["length"] = $foreign.length;
                exports["take"] = $foreign.take;
                exports["drop"] = $foreign.drop;
            })(PS);
            ($PS => {
                $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
                const exports = $PS["Data.String.CodePoints"];
                const $foreign = $PS["Data.String.CodePoints"];
                const Data_Array = $PS["Data.Array"];
                const Data_Bounded = $PS["Data.Bounded"];
                const Data_Enum = $PS["Data.Enum"];
                const Data_EuclideanRing = $PS["Data.EuclideanRing"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_Maybe = $PS["Data.Maybe"];
                const Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
                const Data_String_Unsafe = $PS["Data.String.Unsafe"];
                const Data_Tuple = $PS["Data.Tuple"];
                const Data_Unfoldable = $PS["Data.Unfoldable"];
                const CodePoint = x => {
                    return x;
                };
                const unsurrogate = lead => {
                    return trail => {
                        return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
                    };
                };
                const isTrail = cu => {
                    return 56320 <= cu && cu <= 57343;
                };
                const isLead = cu => {
                    return 55296 <= cu && cu <= 56319;
                };
                const uncons = s => {
                    const v = Data_String_CodeUnits.length(s);
                    if (v === 0) {
                        return Data_Maybe.Nothing.value;
                    }
                    ;
                    if (v === 1) {
                        return new Data_Maybe.Just({
                            head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
                            tail: ""
                        });
                    }
                    ;
                    const cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
                    const cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
                    const $21 = isLead(cu0) && isTrail(cu1);
                    if ($21) {
                        return new Data_Maybe.Just({
                            head: unsurrogate(cu0)(cu1),
                            tail: Data_String_CodeUnits.drop(2)(s)
                        });
                    }
                    ;
                    return new Data_Maybe.Just({
                        head: cu0,
                        tail: Data_String_CodeUnits.drop(1)(s)
                    });
                };
                const unconsButWithTuple = s => {
                    return Data_Functor.map(Data_Maybe.functorMaybe)(({ head, tail }) => {
                        return new Data_Tuple.Tuple(head, tail);
                    })(uncons(s));
                };
                const toCodePointArrayFallback = s => {
                    return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
                };
                const unsafeCodePointAt0Fallback = s => {
                    const cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
                    const $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
                    if ($25) {
                        const cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
                        const $26 = isTrail(cu1);
                        if ($26) {
                            return unsurrogate(cu0)(cu1);
                        }
                        ;
                        return cu0;
                    }
                    ;
                    return cu0;
                };
                const unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
                const toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
                const length = $52 => {
                    return Data_Array.length(toCodePointArray($52));
                };
                const indexOf = p => {
                    return s => {
                        return Data_Functor.map(Data_Maybe.functorMaybe)(i => {
                            return length(Data_String_CodeUnits.take(i)(s));
                        })(Data_String_CodeUnits.indexOf(p)(s));
                    };
                };
                const fromCharCode = (() => {
                    const $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
                    return $54 => {
                        return Data_String_CodeUnits.singleton($53($54));
                    };
                })();
                const singletonFallback = v => {
                    if (v <= 65535) {
                        return fromCharCode(v);
                    }
                    ;
                    const lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
                    const trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
                    return fromCharCode(lead) + fromCharCode(trail);
                };
                const fromCodePointArray = $foreign["_fromCodePointArray"](singletonFallback);
                const singleton = $foreign["_singleton"](singletonFallback);
                const takeFallback = n => {
                    return v => {
                        if (n < 1) {
                            return "";
                        }
                        ;
                        const v1 = uncons(v);
                        if (v1 instanceof Data_Maybe.Just) {
                            return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
                        }
                        ;
                        return v;
                    };
                };
                const take = $foreign["_take"](takeFallback);
                const drop = n => {
                    return s => {
                        return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
                    };
                };
                const codePointFromChar = (() => {
                    const $55 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
                    return $56 => {
                        return CodePoint($55($56));
                    };
                })();
                exports["codePointFromChar"] = codePointFromChar;
                exports["singleton"] = singleton;
                exports["fromCodePointArray"] = fromCodePointArray;
                exports["length"] = length;
                exports["indexOf"] = indexOf;
                exports["drop"] = drop;
            })(PS);
            (exports => {
                exports.split = sep => {
                    return s => {
                        return s.split(sep);
                    };
                };
                exports.toLower = s => {
                    return s.toLowerCase();
                };
            })(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
            ($PS => {
                $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
                const exports = $PS["Data.String.Common"];
                const $foreign = $PS["Data.String.Common"];
                const $$null = s => {
                    return s === "";
                };
                exports["null"] = $$null;
                exports["split"] = $foreign.split;
                exports["toLower"] = $foreign.toLower;
            })(PS);
            ($PS => {
                $PS["Data.String.Pattern"] = $PS["Data.String.Pattern"] || {};
                const exports = $PS["Data.String.Pattern"];
                const Data_Newtype = $PS["Data.Newtype"];
                const Pattern = x => {
                    return x;
                };
                const newtypePattern = new Data_Newtype.Newtype(n => {
                    return n;
                }, Pattern);
                exports["newtypePattern"] = newtypePattern;
            })(PS);
            ($PS => {
                $PS["Data.Units.Astronomical"] = $PS["Data.Units.Astronomical"] || {};
                const exports = $PS["Data.Units.Astronomical"];
                const Data_Units = $PS["Data.Units"];
                const Data_Units_SI = $PS["Data.Units.SI"];
                const parsec = Data_Units.makeNonStandard("parsec")("parsec")(3.085677581e16)(Data_Units_SI.meter);
                const lightyear = Data_Units.makeNonStandard("lightyear")("ly")(9.4607304725808e15)(Data_Units_SI.meter);
                exports["parsec"] = parsec;
                exports["lightyear"] = lightyear;
            })(PS);
            ($PS => {
                $PS["Data.Units.Bit"] = $PS["Data.Units.Bit"] || {};
                const exports = $PS["Data.Units.Bit"];
                const Data_Units = $PS["Data.Units"];
                const bit = Data_Units.makeStandard("bit")("bit");
                const $$byte = Data_Units.makeNonStandard("byte")("B")(8.0)(bit);
                exports["bit"] = bit;
                exports["byte"] = $$byte;
            })(PS);
            ($PS => {
                $PS["Data.Units.CGS"] = $PS["Data.Units.CGS"] || {};
                const exports = $PS["Data.Units.CGS"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Data_Units = $PS["Data.Units"];
                const Data_Units_SI = $PS["Data.Units.SI"];
                const gauss = Data_Units.makeNonStandard("gauss")("gauss")(0.1)(Data_Units.divideUnits(Data_Units_SI.gram)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units.power(Data_Units_SI.second)(2.0))(Data_Units_SI.ampere)));
                exports["gauss"] = gauss;
            })(PS);
            ($PS => {
                $PS["Data.Units.Currency"] = $PS["Data.Units.Currency"] || {};
                const exports = $PS["Data.Units.Currency"];
                const Data_Units = $PS["Data.Units"];
                const euro = Data_Units.makeStandard("euro")("EUR");
                const dollar = Data_Units.makeStandard("dollar")("USD");
                exports["dollar"] = dollar;
                exports["euro"] = euro;
            })(PS);
            ($PS => {
                $PS["Data.Units.Imperial"] = $PS["Data.Units.Imperial"] || {};
                const exports = $PS["Data.Units.Imperial"];
                const Data_Units = $PS["Data.Units"];
                const Data_Units_SI = $PS["Data.Units.SI"];
                const yard = Data_Units.makeNonStandard("yard")("yd")(0.9144)(Data_Units_SI.meter);
                const thou = Data_Units.makeNonStandard("thou")("thou")(2.54e-5)(Data_Units_SI.meter);
                const pound = Data_Units.makeNonStandard("pound")("lb")(453.6)(Data_Units_SI.gram);
                const ounce = Data_Units.makeNonStandard("ounce")("oz")(28.35)(Data_Units_SI.gram);
                const mile = Data_Units.makeNonStandard("mile")("mi")(1609.344)(Data_Units_SI.meter);
                const inch = Data_Units.makeNonStandard("inch")("in")(2.54e-2)(Data_Units_SI.meter);
                const furlong = Data_Units.makeNonStandard("furlong")("furlong")(201.168)(Data_Units_SI.meter);
                const foot = Data_Units.makeNonStandard("foot")("ft")(0.3048)(Data_Units_SI.meter);
                exports["inch"] = inch;
                exports["foot"] = foot;
                exports["yard"] = yard;
                exports["mile"] = mile;
                exports["ounce"] = ounce;
                exports["pound"] = pound;
                exports["thou"] = thou;
                exports["furlong"] = furlong;
            })(PS);
            ($PS => {
                $PS["Data.Units.Misc"] = $PS["Data.Units.Misc"] || {};
                const exports = $PS["Data.Units.Misc"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Data_Units = $PS["Data.Units"];
                const Data_Units_SI = $PS["Data.Units.SI"];
                const rpm = Data_Units.makeNonStandard("rpm")("rpm")(1.0 / 60.0)(Data_Units.power(Data_Units_SI.second)(-1.0));
                const psi = Data_Units.makeNonStandard("psi")("psi")(6894757.0)(Data_Units.divideUnits(Data_Units_SI.gram)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.meter)(Data_Units.power(Data_Units_SI.second)(2.0))));
                const pixel = Data_Units.makeStandard("pixel")("px");
                const piece = Data_Units.makeStandard("piece")("piece");
                const person = Data_Units.makeStandard("person")("person");
                const mmHg = Data_Units.makeNonStandard("mmHg")("mmHg")(133322.387415)(Data_Units.divideUnits(Data_Units_SI.gram)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.meter)(Data_Units.power(Data_Units_SI.second)(2.0))));
                const lbf = Data_Units.makeNonStandard("pound_force")("lbf")(4448.222)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.gram)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.meter)(Data_Units.power(Data_Units_SI.second)(-2.0))));
                const frame = Data_Units.makeStandard("frame")("frame");
                const fortnight = Data_Units.makeNonStandard("fortnight")("fortnight")(14.0 * 24.0 * 3600.0)(Data_Units_SI.second);
                const dot = Data_Units.makeStandard("dot")("dot");
                const calorie = Data_Units.makeNonStandard("calorie")("cal")(4184.0)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.gram)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units.power(Data_Units_SI.meter)(2.0))(Data_Units.power(Data_Units_SI.second)(-2.0))));
                const btu = Data_Units.makeNonStandard("BTU")("BTU")(1055055.85262)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.gram)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units.power(Data_Units_SI.meter)(2.0))(Data_Units.power(Data_Units_SI.second)(-2.0))));
                const atm = Data_Units.makeNonStandard("atm")("atm")(1.01325e8)(Data_Units.divideUnits(Data_Units_SI.gram)(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI.meter)(Data_Units.power(Data_Units_SI.second)(2.0))));
                exports["calorie"] = calorie;
                exports["btu"] = btu;
                exports["lbf"] = lbf;
                exports["rpm"] = rpm;
                exports["fortnight"] = fortnight;
                exports["mmHg"] = mmHg;
                exports["psi"] = psi;
                exports["atm"] = atm;
                exports["pixel"] = pixel;
                exports["dot"] = dot;
                exports["frame"] = frame;
                exports["piece"] = piece;
                exports["person"] = person;
            })(PS);
            ($PS => {
                $PS["Data.Units.Nautical"] = $PS["Data.Units.Nautical"] || {};
                const exports = $PS["Data.Units.Nautical"];
                const Data_Units = $PS["Data.Units"];
                const Data_Units_SI = $PS["Data.Units.SI"];
                const nauticalMile = Data_Units.makeNonStandard("nautical mile")("M")(1852.0)(Data_Units_SI.meter);
                const knot = Data_Units.makeNonStandard("knot")("kn")(1852.0 / 3600.0)(Data_Units.divideUnits(Data_Units_SI.meter)(Data_Units_SI.second));
                exports["knot"] = knot;
                exports["nauticalMile"] = nauticalMile;
            })(PS);
            ($PS => {
                $PS["Data.Units.PartsPerX"] = $PS["Data.Units.PartsPerX"] || {};
                const exports = $PS["Data.Units.PartsPerX"];
                const Data_Units = $PS["Data.Units"];
                const percent = Data_Units.makeNonStandard("percent")("pct")(1.0e-2)(Data_Units.unity);
                const partsPerTrillion = Data_Units.makeNonStandard("parts-per-trillion")("ppt")(1.0e-12)(Data_Units.unity);
                const partsPerQuadrillion = Data_Units.makeNonStandard("parts-per-quadrillion")("ppq")(1.0e-15)(Data_Units.unity);
                const partsPerMillion = Data_Units.makeNonStandard("parts-per-million")("ppm")(1.0e-6)(Data_Units.unity);
                const partsPerBillion = Data_Units.makeNonStandard("parts-per-billion")("ppb")(1.0e-9)(Data_Units.unity);
                exports["percent"] = percent;
                exports["partsPerMillion"] = partsPerMillion;
                exports["partsPerBillion"] = partsPerBillion;
                exports["partsPerTrillion"] = partsPerTrillion;
                exports["partsPerQuadrillion"] = partsPerQuadrillion;
            })(PS);
            ($PS => {
                $PS["Data.Units.Time"] = $PS["Data.Units.Time"] || {};
                const exports = $PS["Data.Units.Time"];
                const Data_Units = $PS["Data.Units"];
                const Data_Units_SI = $PS["Data.Units.SI"];
                const year = Data_Units.makeNonStandard("year")("year")(365.25 * 24.0 * 3600.0)(Data_Units_SI.second);
                const week = Data_Units.makeNonStandard("week")("week")(7.0 * 24.0 * 3600.0)(Data_Units_SI.second);
                const month = Data_Units.makeNonStandard("month")("month")((30.0 * 24.0 + 10.5) * 3600.0)(Data_Units_SI.second);
                const minute = Data_Units.makeNonStandard("minute")("min")(60.0)(Data_Units_SI.second);
                const hour = Data_Units.makeNonStandard("hour")("h")(3600.0)(Data_Units_SI.second);
                const day = Data_Units.makeNonStandard("day")("d")(24.0 * 3600.0)(Data_Units_SI.second);
                exports["minute"] = minute;
                exports["hour"] = hour;
                exports["day"] = day;
                exports["week"] = week;
                exports["month"] = month;
                exports["year"] = year;
            })(PS);
            ($PS => {
                $PS["Data.Units.USCustomary"] = $PS["Data.Units.USCustomary"] || {};
                const exports = $PS["Data.Units.USCustomary"];
                const Data_Units = $PS["Data.Units"];
                const Data_Units_SI = $PS["Data.Units.SI"];
                const teaspoon = Data_Units.makeNonStandard("teaspoon")("teaspoon")(4.92892159375e-6)(Data_Units.power(Data_Units_SI.meter)(3.0));
                const tablespoon = Data_Units.makeNonStandard("tablespoon")("tablespoon")(1.478676478125e-5)(Data_Units.power(Data_Units_SI.meter)(3.0));
                const rod = Data_Units.makeNonStandard("rod")("rod")(5.0292)(Data_Units_SI.meter);
                const pint = Data_Units.makeNonStandard("pint")("pint")(4.73176473e-4)(Data_Units.power(Data_Units_SI.meter)(3.0));
                const hogshead = Data_Units.makeNonStandard("hogshead")("hogshead")(0.238480942392)(Data_Units.power(Data_Units_SI.meter)(3.0));
                const gallon = Data_Units.makeNonStandard("gallon")("gal")(3.785411784e-3)(Data_Units.power(Data_Units_SI.meter)(3.0));
                const fluidounce = Data_Units.makeNonStandard("fluidounce")("floz")(2.95735295625e-5)(Data_Units.power(Data_Units_SI.meter)(3.0));
                const cup = Data_Units.makeNonStandard("cup")("cup")(2.365882365e-4)(Data_Units.power(Data_Units_SI.meter)(3.0));
                exports["gallon"] = gallon;
                exports["pint"] = pint;
                exports["cup"] = cup;
                exports["tablespoon"] = tablespoon;
                exports["teaspoon"] = teaspoon;
                exports["fluidounce"] = fluidounce;
                exports["hogshead"] = hogshead;
                exports["rod"] = rod;
            })(PS);
            ($PS => {
                $PS["Insect.Functions"] = $PS["Insect.Functions"] || {};
                const exports = $PS["Insect.Functions"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Bind = $PS["Control.Bind"];
                const Data_Either = $PS["Data.Either"];
                const Data_Quantity = $PS["Data.Quantity"];
                const Data_Units_SI = $PS["Data.Units.SI"];
                const offsetFahrenheit = 459.67;
                const offsetCelsius = 273.15;
                const toCelsius = tempKelvin$prime => {
                    return Control_Bind.bind(Data_Either.bindEither)(Data_Quantity.asValueIn(tempKelvin$prime)(Data_Units_SI.kelvin))(tempKelvin => {
                        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Quantity.scalar(tempKelvin - offsetCelsius));
                    });
                };
                const multiplierFahrenheit = 5.0 / 9.0;
                const toFahrenheit = tempKelvin$prime => {
                    return Control_Bind.bind(Data_Either.bindEither)(Data_Quantity.asValueIn(tempKelvin$prime)(Data_Units_SI.kelvin))(tempKelvin => {
                        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Quantity.scalar(tempKelvin / multiplierFahrenheit - offsetFahrenheit));
                    });
                };
                const fromFahrenheit = tempFahrenheit$prime => {
                    return Control_Bind.bind(Data_Either.bindEither)(Data_Quantity.toScalar(tempFahrenheit$prime))(tempFahrenheit => {
                        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Quantity.quantity((tempFahrenheit + offsetFahrenheit) * multiplierFahrenheit)(Data_Units_SI.kelvin));
                    });
                };
                const fromCelsius = tempCelsius$prime => {
                    return Control_Bind.bind(Data_Either.bindEither)(Data_Quantity.toScalar(tempCelsius$prime))(tempCelsius => {
                        return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Quantity.quantity(tempCelsius + offsetCelsius)(Data_Units_SI.kelvin));
                    });
                };
                exports["fromCelsius"] = fromCelsius;
                exports["toCelsius"] = toCelsius;
                exports["fromFahrenheit"] = fromFahrenheit;
                exports["toFahrenheit"] = toFahrenheit;
            })(PS);
            ($PS => {
                $PS["Insect.Language"] = $PS["Insect.Language"] || {};
                const exports = $PS["Insect.Language"];
                const QConversionError = (() => {
                    function QConversionError(value0) {
                        this.value0 = value0;
                    }
                    ;
                    QConversionError.create = value0 => {
                        return new QConversionError(value0);
                    };
                    return QConversionError;
                })();
                const WrongArityError = (() => {
                    function WrongArityError(value0, value1, value2) {
                        this.value0 = value0;
                        this.value1 = value1;
                        this.value2 = value2;
                    }
                    ;
                    WrongArityError.create = value0 => {
                        return value1 => {
                            return value2 => {
                                return new WrongArityError(value0, value1, value2);
                            };
                        };
                    };
                    return WrongArityError;
                })();
                const LookupError = (() => {
                    function LookupError(value0) {
                        this.value0 = value0;
                    }
                    ;
                    LookupError.create = value0 => {
                        return new LookupError(value0);
                    };
                    return LookupError;
                })();
                const NumericalError = (() => {
                    function NumericalError() {
                    }
                    ;
                    NumericalError.value = new NumericalError();
                    return NumericalError;
                })();
                const RedefinedConstantError = (() => {
                    function RedefinedConstantError(value0) {
                        this.value0 = value0;
                    }
                    ;
                    RedefinedConstantError.create = value0 => {
                        return new RedefinedConstantError(value0);
                    };
                    return RedefinedConstantError;
                })();
                const InvalidIdentifier = (() => {
                    function InvalidIdentifier(value0) {
                        this.value0 = value0;
                    }
                    ;
                    InvalidIdentifier.create = value0 => {
                        return new InvalidIdentifier(value0);
                    };
                    return InvalidIdentifier;
                })();
                const Help = (() => {
                    function Help() {
                    }
                    ;
                    Help.value = new Help();
                    return Help;
                })();
                const Reset = (() => {
                    function Reset() {
                    }
                    ;
                    Reset.value = new Reset();
                    return Reset;
                })();
                const List = (() => {
                    function List() {
                    }
                    ;
                    List.value = new List();
                    return List;
                })();
                const Clear = (() => {
                    function Clear() {
                    }
                    ;
                    Clear.value = new Clear();
                    return Clear;
                })();
                const Quit = (() => {
                    function Quit() {
                    }
                    ;
                    Quit.value = new Quit();
                    return Quit;
                })();
                const Add = (() => {
                    function Add() {
                    }
                    ;
                    Add.value = new Add();
                    return Add;
                })();
                const Sub = (() => {
                    function Sub() {
                    }
                    ;
                    Sub.value = new Sub();
                    return Sub;
                })();
                const Mul = (() => {
                    function Mul() {
                    }
                    ;
                    Mul.value = new Mul();
                    return Mul;
                })();
                const Div = (() => {
                    function Div() {
                    }
                    ;
                    Div.value = new Div();
                    return Div;
                })();
                const Pow = (() => {
                    function Pow() {
                    }
                    ;
                    Pow.value = new Pow();
                    return Pow;
                })();
                const Mod = (() => {
                    function Mod() {
                    }
                    ;
                    Mod.value = new Mod();
                    return Mod;
                })();
                const ConvertTo = (() => {
                    function ConvertTo() {
                    }
                    ;
                    ConvertTo.value = new ConvertTo();
                    return ConvertTo;
                })();
                const Scalar = (() => {
                    function Scalar(value0) {
                        this.value0 = value0;
                    }
                    ;
                    Scalar.create = value0 => {
                        return new Scalar(value0);
                    };
                    return Scalar;
                })();
                const Unit = (() => {
                    function Unit(value0) {
                        this.value0 = value0;
                    }
                    ;
                    Unit.create = value0 => {
                        return new Unit(value0);
                    };
                    return Unit;
                })();
                const Variable = (() => {
                    function Variable(value0) {
                        this.value0 = value0;
                    }
                    ;
                    Variable.create = value0 => {
                        return new Variable(value0);
                    };
                    return Variable;
                })();
                const Factorial = (() => {
                    function Factorial(value0) {
                        this.value0 = value0;
                    }
                    ;
                    Factorial.create = value0 => {
                        return new Factorial(value0);
                    };
                    return Factorial;
                })();
                const Negate = (() => {
                    function Negate(value0) {
                        this.value0 = value0;
                    }
                    ;
                    Negate.create = value0 => {
                        return new Negate(value0);
                    };
                    return Negate;
                })();
                const Apply = (() => {
                    function Apply(value0, value1) {
                        this.value0 = value0;
                        this.value1 = value1;
                    }
                    ;
                    Apply.create = value0 => {
                        return value1 => {
                            return new Apply(value0, value1);
                        };
                    };
                    return Apply;
                })();
                const BinOp = (() => {
                    function BinOp(value0, value1, value2) {
                        this.value0 = value0;
                        this.value1 = value1;
                        this.value2 = value2;
                    }
                    ;
                    BinOp.create = value0 => {
                        return value1 => {
                            return value2 => {
                                return new BinOp(value0, value1, value2);
                            };
                        };
                    };
                    return BinOp;
                })();
                const Expression = (() => {
                    function Expression(value0) {
                        this.value0 = value0;
                    }
                    ;
                    Expression.create = value0 => {
                        return new Expression(value0);
                    };
                    return Expression;
                })();
                const VariableAssignment = (() => {
                    function VariableAssignment(value0, value1) {
                        this.value0 = value0;
                        this.value1 = value1;
                    }
                    ;
                    VariableAssignment.create = value0 => {
                        return value1 => {
                            return new VariableAssignment(value0, value1);
                        };
                    };
                    return VariableAssignment;
                })();
                const FunctionAssignment = (() => {
                    function FunctionAssignment(value0, value1, value2) {
                        this.value0 = value0;
                        this.value1 = value1;
                        this.value2 = value2;
                    }
                    ;
                    FunctionAssignment.create = value0 => {
                        return value1 => {
                            return value2 => {
                                return new FunctionAssignment(value0, value1, value2);
                            };
                        };
                    };
                    return FunctionAssignment;
                })();
                const Command = (() => {
                    function Command(value0) {
                        this.value0 = value0;
                    }
                    ;
                    Command.create = value0 => {
                        return new Command(value0);
                    };
                    return Command;
                })();
                exports["QConversionError"] = QConversionError;
                exports["WrongArityError"] = WrongArityError;
                exports["LookupError"] = LookupError;
                exports["NumericalError"] = NumericalError;
                exports["RedefinedConstantError"] = RedefinedConstantError;
                exports["InvalidIdentifier"] = InvalidIdentifier;
                exports["Add"] = Add;
                exports["Sub"] = Sub;
                exports["Mul"] = Mul;
                exports["Div"] = Div;
                exports["Pow"] = Pow;
                exports["Mod"] = Mod;
                exports["ConvertTo"] = ConvertTo;
                exports["Scalar"] = Scalar;
                exports["Unit"] = Unit;
                exports["Variable"] = Variable;
                exports["Factorial"] = Factorial;
                exports["Negate"] = Negate;
                exports["Apply"] = Apply;
                exports["BinOp"] = BinOp;
                exports["Help"] = Help;
                exports["Reset"] = Reset;
                exports["List"] = List;
                exports["Clear"] = Clear;
                exports["Quit"] = Quit;
                exports["Expression"] = Expression;
                exports["VariableAssignment"] = VariableAssignment;
                exports["FunctionAssignment"] = FunctionAssignment;
                exports["Command"] = Command;
            })(PS);
            ($PS => {
                $PS["Insect.Environment"] = $PS["Insect.Environment"] || {};
                const exports = $PS["Insect.Environment"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Data_Bifunctor = $PS["Data.Bifunctor"];
                const Data_Either = $PS["Data.Either"];
                const Data_Eq = $PS["Data.Eq"];
                const Data_Foldable = $PS["Data.Foldable"];
                const Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
                const Data_List_Types = $PS["Data.List.Types"];
                const Data_Map_Internal = $PS["Data.Map.Internal"];
                const Data_Ord = $PS["Data.Ord"];
                const Data_Quantity = $PS["Data.Quantity"];
                const Data_Quantity_Math = $PS["Data.Quantity.Math"];
                const Data_Quantity_Physics = $PS["Data.Quantity.Physics"];
                const Data_Tuple = $PS["Data.Tuple"];
                const Insect_Functions = $PS["Insect.Functions"];
                const Insect_Language = $PS["Insect.Language"];
                const Constant = (() => {
                    function Constant() {
                    }
                    ;
                    Constant.value = new Constant();
                    return Constant;
                })();
                const HiddenConstant = (() => {
                    function HiddenConstant() {
                    }
                    ;
                    HiddenConstant.value = new HiddenConstant();
                    return HiddenConstant;
                })();
                const UserDefined = (() => {
                    function UserDefined() {
                    }
                    ;
                    UserDefined.value = new UserDefined();
                    return UserDefined;
                })();
                const StoredValue = (() => {
                    function StoredValue(value0, value1) {
                        this.value0 = value0;
                        this.value1 = value1;
                    }
                    ;
                    StoredValue.create = value0 => {
                        return value1 => {
                            return new StoredValue(value0, value1);
                        };
                    };
                    return StoredValue;
                })();
                const StoredFunction = (() => {
                    function StoredFunction(value0, value1) {
                        this.value0 = value0;
                        this.value1 = value1;
                    }
                    ;
                    StoredFunction.create = value0 => {
                        return value1 => {
                            return new StoredFunction(value0, value1);
                        };
                    };
                    return StoredFunction;
                })();
                const initialEnvironment = (() => {
                    const wrapSimple2 = name => {
                        return func => {
                            return qs => {
                                const numArgs = Data_List_NonEmpty.length(qs);
                                if (qs.value1 instanceof Data_List_Types.Cons && qs.value1.value1 instanceof Data_List_Types.Nil) {
                                    return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Insect_Language.QConversionError.create)(func(qs.value0)(qs.value1.value0));
                                }
                                ;
                                return Data_Either.Left.create(new Insect_Language.WrongArityError(name, 2, numArgs));
                            };
                        };
                    };
                    const wrapSimple = name => {
                        return func => {
                            return qs => {
                                const numArgs = Data_List_NonEmpty.length(qs);
                                const $7 = numArgs === 1;
                                if ($7) {
                                    return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Insect_Language.QConversionError.create)(func(Data_List_NonEmpty.head(qs)));
                                }
                                ;
                                return Data_Either.Left.create(new Insect_Language.WrongArityError(name, 1, numArgs));
                            };
                        };
                    };
                    const hiddenVal = identifier => {
                        return value => {
                            return new Data_Tuple.Tuple(identifier, new StoredValue(HiddenConstant.value, value));
                        };
                    };
                    const constVal = identifier => {
                        return value => {
                            return new Data_Tuple.Tuple(identifier, new StoredValue(Constant.value, value));
                        };
                    };
                    const constFuncN = identifier => {
                        return func => {
                            return new Data_Tuple.Tuple(identifier, new StoredFunction(Constant.value, func));
                        };
                    };
                    const constFunc2 = identifier => {
                        return func => {
                            return new Data_Tuple.Tuple(identifier, new StoredFunction(Constant.value, wrapSimple2(identifier)(func)));
                        };
                    };
                    const constFunc = identifier => {
                        return func => {
                            return new Data_Tuple.Tuple(identifier, new StoredFunction(Constant.value, wrapSimple(identifier)(func)));
                        };
                    };
                    return {
                        values: Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)([constVal("alpha")(Data_Quantity_Physics.α), constVal("avogadroConstant")(Data_Quantity_Physics.avogadroConstant), constVal("bohrMagneton")(Data_Quantity_Physics.µB), constVal("boltzmannConstant")(Data_Quantity_Physics.kB), constVal("c")(Data_Quantity_Physics.speedOfLight), constVal("e")(Data_Quantity_Math.e), constVal("electricConstant")(Data_Quantity_Physics.ε0), constVal("eps0")(Data_Quantity_Physics.ε0), constVal("\u03b50")(Data_Quantity_Physics.ε0), constVal("elementaryCharge")(Data_Quantity_Physics.electronCharge), constVal("electronCharge")(Data_Quantity_Physics.electronCharge), constVal("electronMass")(Data_Quantity_Physics.electronMass), constVal("G")(Data_Quantity_Physics.gravitationalConstant), constVal("g0")(Data_Quantity_Physics.g0), constVal("gravity")(Data_Quantity_Physics.g0), constVal("h_bar")(Data_Quantity_Physics.ℏ), constVal("\u210f")(Data_Quantity_Physics.ℏ), constVal("k_B")(Data_Quantity_Physics.kB), constVal("magneticConstant")(Data_Quantity_Physics.µ0), constVal("mu0")(Data_Quantity_Physics.µ0), constVal("\xb50")(Data_Quantity_Physics.µ0), constVal("muB")(Data_Quantity_Physics.µB), constVal("\xb5_B")(Data_Quantity_Physics.µB), constVal("N_A")(Data_Quantity_Physics.avogadroConstant), constVal("pi")(Data_Quantity_Math.pi), constVal("\u03c0")(Data_Quantity_Math.pi), constVal("planckConstant")(Data_Quantity_Physics.planckConstant), constVal("protonMass")(Data_Quantity_Physics.protonMass), constVal("speedOfLight")(Data_Quantity_Physics.speedOfLight), constVal("R")(Data_Quantity_Physics.idealGasConstant), hiddenVal("hundred")(Data_Quantity.scalar(100.0)), hiddenVal("thousand")(Data_Quantity.scalar(1000.0)), hiddenVal("million")(Data_Quantity.scalar(1000000.0)), hiddenVal("billion")(Data_Quantity.scalar(1.0e9)), hiddenVal("trillion")(Data_Quantity.scalar(1.0e12)), hiddenVal("quadrillion")(Data_Quantity.scalar(1.0e15)), hiddenVal("quintillion")(Data_Quantity.scalar(1.0e18)), hiddenVal("googol")(Data_Quantity.scalar(1.0e100)), hiddenVal("tau")(Data_Quantity_Math.tau), hiddenVal("\u03c4")(Data_Quantity_Math.tau)]),
                        functions: Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)([constFunc("abs")((() => {
                            const $10 = Control_Applicative.pure(Data_Either.applicativeEither);
                            return $11 => {
                                return $10(Data_Quantity.abs($11));
                            };
                        })()), constFunc("acos")(Data_Quantity_Math.acos), constFunc("acosh")(Data_Quantity_Math.acosh), constFunc("acos")(Data_Quantity_Math.acos), constFunc("acosh")(Data_Quantity_Math.acosh), constFunc("asin")(Data_Quantity_Math.asin), constFunc("asinh")(Data_Quantity_Math.asinh), constFunc("atan")(Data_Quantity_Math.atan), constFunc2("atan2")(Data_Quantity_Math.atan2), constFunc("atanh")(Data_Quantity_Math.atanh), constFunc("ceil")(Data_Quantity_Math.ceil), constFunc("cos")(Data_Quantity_Math.cos), constFunc("cosh")(Data_Quantity_Math.cosh), constFunc("exp")(Data_Quantity_Math.exp), constFunc("floor")(Data_Quantity_Math.floor), constFunc("fromCelsius")(Insect_Functions.fromCelsius), constFunc("fromFahrenheit")(Insect_Functions.fromFahrenheit), constFunc("gamma")(Data_Quantity_Math.gamma), constFunc("ln")(Data_Quantity_Math.ln), constFunc("log")(Data_Quantity_Math.ln), constFunc("log10")(Data_Quantity_Math.log10), constFuncN("minimum")((() => {
                            const $12 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Insect_Language.QConversionError.create);
                            return $13 => {
                                return $12(Data_Quantity_Math.min(Data_List_Types.NonEmptyList($13)));
                            };
                        })()), constFuncN("maximum")((() => {
                            const $14 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Insect_Language.QConversionError.create);
                            return $15 => {
                                return $14(Data_Quantity_Math.max(Data_List_Types.NonEmptyList($15)));
                            };
                        })()), constFuncN("mean")((() => {
                            const $16 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Insect_Language.QConversionError.create);
                            return $17 => {
                                return $16(Data_Quantity_Math.mean(Data_List_Types.NonEmptyList($17)));
                            };
                        })()), constFunc("round")(Data_Quantity_Math.round), constFunc("sin")(Data_Quantity_Math.sin), constFunc("sinh")(Data_Quantity_Math.sinh), constFunc("sqrt")((() => {
                            const $18 = Control_Applicative.pure(Data_Either.applicativeEither);
                            return $19 => {
                                return $18(Data_Quantity.sqrt($19));
                            };
                        })()), constFunc("tan")(Data_Quantity_Math.tan), constFunc("tanh")(Data_Quantity_Math.tanh), constFunc("toCelsius")(Insect_Functions.toCelsius), constFunc("toFahrenheit")(Insect_Functions.toFahrenheit)])
                    };
                })();
                const eqStorageType = new Data_Eq.Eq(x => {
                    return y => {
                        if (x instanceof Constant && y instanceof Constant) {
                            return true;
                        }
                        ;
                        if (x instanceof HiddenConstant && y instanceof HiddenConstant) {
                            return true;
                        }
                        ;
                        if (x instanceof UserDefined && y instanceof UserDefined) {
                            return true;
                        }
                        ;
                        return false;
                    };
                });
                exports["Constant"] = Constant;
                exports["HiddenConstant"] = HiddenConstant;
                exports["UserDefined"] = UserDefined;
                exports["StoredValue"] = StoredValue;
                exports["StoredFunction"] = StoredFunction;
                exports["initialEnvironment"] = initialEnvironment;
                exports["eqStorageType"] = eqStorageType;
            })(PS);
            ($PS => {
                $PS["Insect.Format"] = $PS["Insect.Format"] || {};
                const exports = $PS["Insect.Format"];
                const Control_Category = $PS["Control.Category"];
                const Data_Array = $PS["Data.Array"];
                const Data_Foldable = $PS["Data.Foldable"];
                const Data_Monoid = $PS["Data.Monoid"];
                const Normal = (() => {
                    function Normal() {
                    }
                    ;
                    Normal.value = new Normal();
                    return Normal;
                })();
                const Optional = (() => {
                    function Optional() {
                    }
                    ;
                    Optional.value = new Optional();
                    return Optional;
                })();
                const FTText = (() => {
                    function FTText() {
                    }
                    ;
                    FTText.value = new FTText();
                    return FTText;
                })();
                const FTEmphasized = (() => {
                    function FTEmphasized() {
                    }
                    ;
                    FTEmphasized.value = new FTEmphasized();
                    return FTEmphasized;
                })();
                const FTError = (() => {
                    function FTError() {
                    }
                    ;
                    FTError.value = new FTError();
                    return FTError;
                })();
                const FTValue = (() => {
                    function FTValue() {
                    }
                    ;
                    FTValue.value = new FTValue();
                    return FTValue;
                })();
                const FTIdentifier = (() => {
                    function FTIdentifier() {
                    }
                    ;
                    FTIdentifier.value = new FTIdentifier();
                    return FTIdentifier;
                })();
                const FTFunction = (() => {
                    function FTFunction() {
                    }
                    ;
                    FTFunction.value = new FTFunction();
                    return FTFunction;
                })();
                const FTUnit = (() => {
                    function FTUnit() {
                    }
                    ;
                    FTUnit.value = new FTUnit();
                    return FTUnit;
                })();
                const Formatted = (() => {
                    function Formatted(value0, value1, value2) {
                        this.value0 = value0;
                        this.value1 = value1;
                        this.value2 = value2;
                    }
                    ;
                    Formatted.create = value0 => {
                        return value1 => {
                            return value2 => {
                                return new Formatted(value0, value1, value2);
                            };
                        };
                    };
                    return Formatted;
                })();
                const val = Formatted.create(Normal.value)(FTValue.value);
                const unit = Formatted.create(Normal.value)(FTUnit.value);
                const uncurry = fmt => {
                    return ({ value0, value1, value2 }) => {
                        return fmt(value0)(value1)(value2);
                    };
                };
                const text = Formatted.create(Normal.value)(FTText.value);
                const optional = ({ value1, value2 }) => {
                    return new Formatted(Optional.value, value1, value2);
                };
                const nl = text("\x0a");
                const jtClass = v => {
                    return v1 => {
                        if (v1 === "") {
                            return "";
                        }
                        ;
                        return `[[;;;hl-${v}]${v1}]`;
                    };
                };
                const ident = Formatted.create(Normal.value)(FTIdentifier.value);
                const $$function = Formatted.create(Normal.value)(FTFunction.value);
                const format = formatter => {
                    return m => {
                        return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(uncurry(formatter))(Data_Array.cons(optional(nl))(m));
                    };
                };
                const fmtPlain = v => {
                    return ({ constructor }) => {
                        return v2 => {
                            if (v instanceof Normal) {
                                return v2;
                            }
                            ;
                            if (v instanceof Optional) {
                                return "";
                            }
                            ;
                            throw new Error(`Failed pattern match at Insect.Format (line 95, column 1 - line 95, column 21): ${[v.constructor.name, constructor.name, v2.constructor.name]}`);
                        };
                    };
                };
                const fmtJqueryTerminal = ({ constructor }) => {
                    return v1 => {
                        if (v1 instanceof FTText) {
                            return Control_Category.identity(Control_Category.categoryFn);
                        }
                        ;
                        if (v1 instanceof FTEmphasized) {
                            return jtClass("emphasized");
                        }
                        ;
                        if (v1 instanceof FTError) {
                            return jtClass("error");
                        }
                        ;
                        if (v1 instanceof FTValue) {
                            return jtClass("value");
                        }
                        ;
                        if (v1 instanceof FTIdentifier) {
                            return jtClass("identifier");
                        }
                        ;
                        if (v1 instanceof FTFunction) {
                            return jtClass("function");
                        }
                        ;
                        if (v1 instanceof FTUnit) {
                            return jtClass("unit");
                        }
                        ;
                        throw new Error(`Failed pattern match at Insect.Format (line 104, column 1 - line 104, column 30): ${[constructor.name, v1.constructor.name]}`);
                    };
                };
                const error = Formatted.create(Normal.value)(FTError.value);
                const emph = Formatted.create(Normal.value)(FTEmphasized.value);
                const consoleCode = code => {
                    return str => {
                        return `\x1b[${code}m${str}\x1b[0m`;
                    };
                };
                const fmtConsole = ({ constructor }) => {
                    return v1 => {
                        return s => {
                            if (v1 instanceof FTText) {
                                return s;
                            }
                            ;
                            if (v1 instanceof FTEmphasized) {
                                return consoleCode("01")(s);
                            }
                            ;
                            if (v1 instanceof FTError) {
                                return consoleCode("31")(s);
                            }
                            ;
                            if (v1 instanceof FTValue) {
                                return consoleCode("36")(s);
                            }
                            ;
                            if (v1 instanceof FTIdentifier) {
                                return consoleCode("33")(s);
                            }
                            ;
                            if (v1 instanceof FTFunction) {
                                return consoleCode("03")(s);
                            }
                            ;
                            if (v1 instanceof FTUnit) {
                                return consoleCode("32")(s);
                            }
                            ;
                            throw new Error(`Failed pattern match at Insect.Format (line 117, column 1 - line 117, column 23): ${[constructor.name, v1.constructor.name, s.constructor.name]}`);
                        };
                    };
                };
                exports["text"] = text;
                exports["emph"] = emph;
                exports["error"] = error;
                exports["val"] = val;
                exports["ident"] = ident;
                exports["function"] = $$function;
                exports["unit"] = unit;
                exports["optional"] = optional;
                exports["nl"] = nl;
                exports["format"] = format;
                exports["fmtPlain"] = fmtPlain;
                exports["fmtJqueryTerminal"] = fmtJqueryTerminal;
                exports["fmtConsole"] = fmtConsole;
            })(PS);
            ($PS => {
                $PS["Insect.PrettyPrint"] = $PS["Insect.PrettyPrint"] || {};
                const exports = $PS["Insect.PrettyPrint"];
                const Data_Array = $PS["Data.Array"];
                const Data_Decimal = $PS["Data.Decimal"];
                const Data_Foldable = $PS["Data.Foldable"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_List_Types = $PS["Data.List.Types"];
                const Data_Monoid = $PS["Data.Monoid"];
                const Data_NonEmpty = $PS["Data.NonEmpty"];
                const Data_Quantity = $PS["Data.Quantity"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Data_Units = $PS["Data.Units"];
                const Insect_Format = $PS["Insect.Format"];
                const Insect_Language = $PS["Insect.Language"];
                const prettyVariable = name => {
                    return [Insect_Format.ident(name)];
                };
                const prettyUnit = u => {
                    return [Insect_Format.unit(Data_Units.toString(u))];
                };
                const prettyScalar = n => {
                    return [Insect_Format.val(Data_Decimal.toString(n))];
                };
                const prettyQuantity = q => {
                    const rec = Data_Quantity["prettyPrint'"](q);
                    const space = (() => {
                        if (rec.space) {
                            return " ";
                        }
                        ;
                        return "";
                    })();
                    return [Insect_Format.val(rec.number), Insect_Format.text(space), Insect_Format.unit(rec.unit)];
                };
                const prettyQuantity$prime = s => {
                    return u => {
                        return prettyQuantity(Data_Quantity["quantity'"](s)(u));
                    };
                };
                const prettyOp = op => {
                    const opToStr = v => {
                        if (v instanceof Insect_Language.Add) {
                            return " + ";
                        }
                        ;
                        if (v instanceof Insect_Language.Sub) {
                            return " - ";
                        }
                        ;
                        if (v instanceof Insect_Language.Mul) {
                            return " \xd7 ";
                        }
                        ;
                        if (v instanceof Insect_Language.Div) {
                            return " / ";
                        }
                        ;
                        if (v instanceof Insect_Language.Pow) {
                            return "^";
                        }
                        ;
                        if (v instanceof Insect_Language.Mod) {
                            return " % ";
                        }
                        ;
                        if (v instanceof Insect_Language.ConvertTo) {
                            return " \u279e ";
                        }
                        ;
                        throw new Error(`Failed pattern match at Insect.PrettyPrint (line 25, column 5 - line 25, column 30): ${[v.constructor.name]}`);
                    };
                    return [Insect_Format.text(opToStr(op))];
                };
                const parens = m => {
                    return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.cons(Insect_Format.text("("))(m))([Insect_Format.text(")")]);
                };
                const withParens$prime = v => {
                    if (v instanceof Insect_Language.Unit) {
                        return pretty(v);
                    }
                    ;
                    if (v instanceof Insect_Language.Scalar) {
                        return pretty(v);
                    }
                    ;
                    if (v instanceof Insect_Language.Variable) {
                        return pretty(v);
                    }
                    ;
                    if (v instanceof Insect_Language.Apply) {
                        return pretty(v);
                    }
                    ;
                    return parens(pretty(v));
                };
                const withParens = v => {
                    if (v instanceof Insect_Language.BinOp && (v.value0 instanceof Insect_Language.Mul && (v.value1 instanceof Insect_Language.Scalar && v.value2 instanceof Insect_Language.Unit))) {
                        return pretty(v);
                    }
                    ;
                    return withParens$prime(v);
                };
                const prettyApply = fn => {
                    return xs => {
                        return Data_Semigroup.append(Data_Semigroup.semigroupArray)([Insect_Format["function"](fn), Insect_Format.text("(")])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Foldable.intercalate(Data_NonEmpty.foldableNonEmpty(Data_List_Types.foldableList))(Data_Monoid.monoidArray)([Insect_Format.text(", ")])(Data_Functor.map(Data_NonEmpty.functorNonEmpty(Data_List_Types.functorList))(pretty)(xs)))([Insect_Format.text(")")]));
                    };
                };
                var pretty = v => {
                    if (v instanceof Insect_Language.Scalar) {
                        return prettyScalar(v.value0);
                    }
                    ;
                    if (v instanceof Insect_Language.Unit) {
                        return prettyUnit(v.value0);
                    }
                    ;
                    if (v instanceof Insect_Language.Variable) {
                        return prettyVariable(v.value0);
                    }
                    ;
                    if (v instanceof Insect_Language.Factorial) {
                        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(withParens(v.value0))([Insect_Format.text("!")]);
                    }
                    ;
                    if (v instanceof Insect_Language.Negate) {
                        return Data_Array.cons(Insect_Format.text("-"))(withParens(v.value0));
                    }
                    ;
                    if (v instanceof Insect_Language.Apply) {
                        return prettyApply(v.value0)(v.value1);
                    }
                    ;
                    if (v instanceof Insect_Language.BinOp && v.value0 instanceof Insect_Language.ConvertTo) {
                        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(pretty(v.value1))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(prettyOp(Insect_Language.ConvertTo.value))(pretty(v.value2)));
                    }
                    ;
                    if (v instanceof Insect_Language.BinOp && (v.value0 instanceof Insect_Language.Mul && (v.value1 instanceof Insect_Language.Scalar && v.value2 instanceof Insect_Language.Unit))) {
                        return prettyQuantity$prime(v.value1.value0)(v.value2.value0);
                    }
                    ;
                    if (v instanceof Insect_Language.BinOp && v.value0 instanceof Insect_Language.Mul) {
                        var addP = ex => {
                            if (ex instanceof Insect_Language.BinOp && ex.value0 instanceof Insect_Language.Pow) {
                                return pretty(ex);
                            }
                            ;
                            if (ex instanceof Insect_Language.BinOp && ex.value0 instanceof Insect_Language.Mul) {
                                return pretty(ex);
                            }
                            ;
                            return withParens(ex);
                        };
                        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(addP(v.value1))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(prettyOp(Insect_Language.Mul.value))(addP(v.value2)));
                    }
                    ;
                    if (v instanceof Insect_Language.BinOp && v.value0 instanceof Insect_Language.Div) {
                        const addPRight = ex => {
                            if (ex instanceof Insect_Language.BinOp && ex.value0 instanceof Insect_Language.Pow) {
                                return pretty(ex);
                            }
                            ;
                            return withParens(ex);
                        };
                        const addPLeft = ex => {
                            if (ex instanceof Insect_Language.BinOp && ex.value0 instanceof Insect_Language.Pow) {
                                return pretty(ex);
                            }
                            ;
                            if (ex instanceof Insect_Language.BinOp && ex.value0 instanceof Insect_Language.Mul) {
                                return pretty(ex);
                            }
                            ;
                            return withParens(ex);
                        };
                        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(addPLeft(v.value1))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(prettyOp(Insect_Language.Div.value))(addPRight(v.value2)));
                    }
                    ;
                    if (v instanceof Insect_Language.BinOp && v.value0 instanceof Insect_Language.Add) {
                        var addP = ex => {
                            if (ex instanceof Insect_Language.BinOp && ex.value0 instanceof Insect_Language.Pow) {
                                return pretty(ex);
                            }
                            ;
                            if (ex instanceof Insect_Language.BinOp && ex.value0 instanceof Insect_Language.Mul) {
                                return pretty(ex);
                            }
                            ;
                            if (ex instanceof Insect_Language.BinOp && ex.value0 instanceof Insect_Language.Add) {
                                return pretty(ex);
                            }
                            ;
                            return withParens(ex);
                        };
                        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(addP(v.value1))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(prettyOp(Insect_Language.Add.value))(addP(v.value2)));
                    }
                    ;
                    if (v instanceof Insect_Language.BinOp && v.value0 instanceof Insect_Language.Sub) {
                        var addP = ex => {
                            if (ex instanceof Insect_Language.BinOp && ex.value0 instanceof Insect_Language.Pow) {
                                return pretty(ex);
                            }
                            ;
                            if (ex instanceof Insect_Language.BinOp && ex.value0 instanceof Insect_Language.Mul) {
                                return pretty(ex);
                            }
                            ;
                            return withParens(ex);
                        };
                        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(addP(v.value1))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(prettyOp(Insect_Language.Sub.value))(addP(v.value2)));
                    }
                    ;
                    if (v instanceof Insect_Language.BinOp) {
                        return Data_Semigroup.append(Data_Semigroup.semigroupArray)(withParens$prime(v.value1))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(prettyOp(v.value0))(withParens$prime(v.value2)));
                    }
                    ;
                    throw new Error(`Failed pattern match at Insect.PrettyPrint (line 82, column 1 - line 82, column 29): ${[v.constructor.name]}`);
                };
                exports["pretty"] = pretty;
                exports["prettyQuantity"] = prettyQuantity;
            })(PS);
            ($PS => {
                $PS["Insect.Interpreter"] = $PS["Insect.Interpreter"] || {};
                const exports = $PS["Insect.Interpreter"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Bind = $PS["Control.Bind"];
                const Data_Array = $PS["Data.Array"];
                const Data_Bifunctor = $PS["Data.Bifunctor"];
                const Data_Boolean = $PS["Data.Boolean"];
                const Data_Either = $PS["Data.Either"];
                const Data_Eq = $PS["Data.Eq"];
                const Data_Foldable = $PS["Data.Foldable"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_Int = $PS["Data.Int"];
                const Data_List = $PS["Data.List"];
                const Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
                const Data_List_Types = $PS["Data.List.Types"];
                const Data_Map_Internal = $PS["Data.Map.Internal"];
                const Data_Maybe = $PS["Data.Maybe"];
                const Data_Monoid = $PS["Data.Monoid"];
                const Data_NonEmpty = $PS["Data.NonEmpty"];
                const Data_Ord = $PS["Data.Ord"];
                const Data_Quantity = $PS["Data.Quantity"];
                const Data_Quantity_Math = $PS["Data.Quantity.Math"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Data_Show = $PS["Data.Show"];
                const Data_String_Common = $PS["Data.String.Common"];
                const Data_Traversable = $PS["Data.Traversable"];
                const Data_Tuple = $PS["Data.Tuple"];
                const Data_Units = $PS["Data.Units"];
                const Insect_Environment = $PS["Insect.Environment"];
                const Insect_Format = $PS["Insect.Format"];
                const Insect_Language = $PS["Insect.Language"];
                const Insect_PrettyPrint = $PS["Insect.PrettyPrint"];
                const Value = (() => {
                    function Value() {
                    }
                    ;
                    Value.value = new Value();
                    return Value;
                })();
                const ValueSet = (() => {
                    function ValueSet() {
                    }
                    ;
                    ValueSet.value = new ValueSet();
                    return ValueSet;
                })();
                const Info = (() => {
                    function Info() {
                    }
                    ;
                    Info.value = new Info();
                    return Info;
                })();
                const $$Error = (() => {
                    function $$Error() {
                    }
                    ;
                    $$Error.value = new $$Error();
                    return $$Error;
                })();
                const Message = (() => {
                    function Message(value0, value1) {
                        this.value0 = value0;
                        this.value1 = value1;
                    }
                    ;
                    Message.create = value0 => {
                        return value1 => {
                            return new Message(value0, value1);
                        };
                    };
                    return Message;
                })();
                const MQuit = (() => {
                    function MQuit() {
                    }
                    ;
                    MQuit.value = new MQuit();
                    return MQuit;
                })();
                const MClear = (() => {
                    function MClear() {
                    }
                    ;
                    MClear.value = new MClear();
                    return MClear;
                })();
                const isConstant = ({ values, functions }) => {
                    return name => {
                        const isConstantValue = (() => {
                            const v = Data_Map_Internal.lookup(Data_Ord.ordString)(name)(values);
                            if (v instanceof Data_Maybe.Just && v.value0.value0 instanceof Insect_Environment.Constant) {
                                return true;
                            }
                            ;
                            if (v instanceof Data_Maybe.Just && v.value0.value0 instanceof Insect_Environment.HiddenConstant) {
                                return true;
                            }
                            ;
                            return false;
                        })();
                        const isConstantFunction = (() => {
                            const v = Data_Map_Internal.lookup(Data_Ord.ordString)(name)(functions);
                            if (v instanceof Data_Maybe.Just && v.value0.value0 instanceof Insect_Environment.Constant) {
                                return true;
                            }
                            ;
                            if (v instanceof Data_Maybe.Just && v.value0.value0 instanceof Insect_Environment.HiddenConstant) {
                                return true;
                            }
                            ;
                            return false;
                        })();
                        return isConstantValue || isConstantFunction;
                    };
                };
                const conversionErrorMessage = ({ value0, value1 }) => {
                    const baseRep = u => {
                        const us = Data_Units.baseRepresentation(u);
                        const us$prime = Data_List.sortBy(Data_Ord.comparing(Data_Ord.ordString)(Data_Units.toString))(us);
                        const usStrs = Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidArray)([Insect_Format.text("\xb7")])(Data_Functor.map(Data_List_Types.functorList)($139 => {
                            return Data_Array.singleton(Insect_Format.unit(Data_Units.toString($139)));
                        })(us$prime));
                        const br = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.cons(Insect_Format.text(" (base units: "))(usStrs))([Insect_Format.text(")")]);
                        const $41 = Data_Eq.eq(Data_Units.eqDerivedUnit)(Data_Tuple.fst(Data_Units.toStandardUnit(u)))(Data_Units.unity);
                        if ($41) {
                            return [];
                        }
                        ;
                        const $42 = Data_Units.toString(u) === Insect_Format.format(Insect_Format.fmtPlain)(usStrs);
                        if ($42) {
                            return [];
                        }
                        ;
                        return br;
                    };
                    const $43 = Data_Eq.eq(Data_Units.eqDerivedUnit)(value0)(Data_Units.unity);
                    if ($43) {
                        return [Insect_Format.error("  Conversion error:"), Insect_Format.nl, Insect_Format.nl, Insect_Format.text("    Cannot convert a "), Insect_Format.unit("scalar"), Insect_Format.text(" to a quantity of unit "), Insect_Format.unit(Data_Units.toString(value1))];
                    }
                    ;
                    const $44 = Data_Eq.eq(Data_Units.eqDerivedUnit)(value1)(Data_Units.unity);
                    if ($44) {
                        return [Insect_Format.error("  Conversion error:"), Insect_Format.nl, Insect_Format.nl, Insect_Format.text("    Cannot convert quantity of unit "), Insect_Format.unit(Data_Units.toString(value0)), Insect_Format.text(" to a "), Insect_Format.unit("scalar")];
                    }
                    ;
                    return Data_Semigroup.append(Data_Semigroup.semigroupArray)([Insect_Format.error("  Conversion error:"), Insect_Format.nl, Insect_Format.nl, Insect_Format.text("    Cannot convert unit "), Insect_Format.unit(Data_Units.toString(value0))])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(baseRep(value0))(Data_Semigroup.append(Data_Semigroup.semigroupArray)([Insect_Format.nl, Insect_Format.text("                to unit "), Insect_Format.unit(Data_Units.toString(value1))])(baseRep(value1))));
                };
                const evalErrorMessage = v => {
                    if (v instanceof Insect_Language.QConversionError) {
                        return conversionErrorMessage(v.value0);
                    }
                    ;
                    if (v instanceof Insect_Language.WrongArityError) {
                        return [Insect_Format.optional(Insect_Format.text("  ")), Insect_Format.error("Wrong number of arguments:"), Insect_Format.nl, Insect_Format.nl, Insect_Format.text("    The function '"), Insect_Format["function"](v.value0), Insect_Format.text("'"), Insect_Format.text(" takes "), Insect_Format.val(Data_Show.show(Data_Show.showInt)(v.value1)), Insect_Format.text((() => {
                            const $49 = v.value1 === 1;
                            if ($49) {
                                return " argument";
                            }
                            ;
                            return " arguments";
                        })()), Insect_Format.text(" (got "), Insect_Format.val(Data_Show.show(Data_Show.showInt)(v.value2)), Insect_Format.text(")")];
                    }
                    ;
                    if (v instanceof Insect_Language.LookupError) {
                        return [Insect_Format.optional(Insect_Format.text("  ")), Insect_Format.error("Unknown identifier: "), Insect_Format.ident(v.value0)];
                    }
                    ;
                    if (v instanceof Insect_Language.NumericalError) {
                        return [Insect_Format.optional(Insect_Format.text("  ")), Insect_Format.error("Numerical error: "), Insect_Format.text("division by zero or out-of-bounds error")];
                    }
                    ;
                    if (v instanceof Insect_Language.RedefinedConstantError) {
                        return [Insect_Format.optional(Insect_Format.text("  ")), Insect_Format.error("Assignment error: "), Insect_Format.text("'"), Insect_Format.emph(v.value0), Insect_Format.text("' cannot be redefined.")];
                    }
                    ;
                    if (v instanceof Insect_Language.InvalidIdentifier) {
                        return [Insect_Format.optional(Insect_Format.text("  ")), Insect_Format.error("Invalid identifier: "), Insect_Format.text("second argument of '"), Insect_Format["function"](v.value0), Insect_Format.text("' must be a variable name.")];
                    }
                    ;
                    throw new Error(`Failed pattern match at Insect.Interpreter (line 193, column 1 - line 193, column 38): ${[v.constructor.name]}`);
                };
                const errorWithInput = prefix => {
                    return expr => {
                        return env => {
                            return err => {
                                return {
                                    msg: Message.create($$Error.value)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(Insect_Format.optional)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.cons(Insect_Format.text("  "))(prefix))(Insect_PrettyPrint.pretty(expr))))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(Insect_Format.optional)([Insect_Format.nl, Insect_Format.nl]))(evalErrorMessage(err)))),
                                    newEnv: env
                                };
                            };
                        };
                    };
                };
                const checkFinite = q => {
                    if (Data_Quantity["isFinite"](q)) {
                        return Control_Applicative.pure(Data_Either.applicativeEither)(q);
                    }
                    ;
                    if (Data_Boolean.otherwise) {
                        return new Data_Either.Left(Insect_Language.NumericalError.value);
                    }
                    ;
                    throw new Error(`Failed pattern match at Insect.Interpreter (line 48, column 1 - line 48, column 41): ${[q.constructor.name]}`);
                };
                const evalSpecial = func => {
                    return v => {
                        return v1 => {
                            return v2 => {
                                return v3 => {
                                    return v4 => {
                                        if (v2 instanceof Insect_Language.Variable) {
                                            const qMultiply = q1$prime => {
                                                return q2$prime => {
                                                    return Control_Bind.bind(Data_Either.bindEither)(q1$prime)(q1 => {
                                                        return Control_Bind.bind(Data_Either.bindEither)(q2$prime)(q2 => {
                                                            return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Quantity.qMultiply(q1)(q2));
                                                        });
                                                    });
                                                };
                                            };
                                            const qAdd = q1$prime => {
                                                return q2$prime => {
                                                    return Control_Bind.bind(Data_Either.bindEither)(q1$prime)(q1 => {
                                                        return Control_Bind.bind(Data_Either.bindEither)(q2$prime)(q2 => {
                                                            return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Insect_Language.QConversionError.create)(Data_Quantity.qAdd(q1)(q2));
                                                        });
                                                    });
                                                };
                                            };
                                            return Control_Bind.bind(Data_Either.bindEither)($$eval(v)(v3))(lowQuantity => {
                                                return Control_Bind.bind(Data_Either.bindEither)($$eval(v)(v4))(highQuantity => {
                                                    return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Insect_Language.QConversionError.create)(Data_Functor.map(Data_Either.functorEither)(Data_Int.round)(Data_Quantity.toScalar(lowQuantity))))(low => {
                                                        return Control_Bind.bind(Data_Either.bindEither)(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Insect_Language.QConversionError.create)(Data_Functor.map(Data_Either.functorEither)(Data_Int.round)(Data_Quantity.toScalar(highQuantity))))(high => {
                                                            const iteration = n => {
                                                                return $$eval({
                                                                    values: Data_Map_Internal.insert(Data_Ord.ordString)(v2.value0)(new Insect_Environment.StoredValue(Insect_Environment.UserDefined.value, Data_Quantity.scalar(Data_Int.toNumber(n))))(v.values),
                                                                    functions: v.functions
                                                                })(v1);
                                                            };
                                                            const qs = (() => {
                                                                const $63 = low > high;
                                                                if ($63) {
                                                                    return Data_List_Types.Nil.value;
                                                                }
                                                                ;
                                                                return Data_Functor.map(Data_List_Types.functorList)(iteration)(Data_List.range(low)(high));
                                                            })();
                                                            const $64 = func === "sum";
                                                            if ($64) {
                                                                if (qs instanceof Data_List_Types.Cons) {
                                                                    return Data_NonEmpty.foldl1(Data_List_Types.foldableList)(qAdd)(new Data_NonEmpty.NonEmpty(qs.value0, qs.value1));
                                                                }
                                                                ;
                                                                if (qs instanceof Data_List_Types.Nil) {
                                                                    return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Quantity.scalar(0.0));
                                                                }
                                                                ;
                                                                throw new Error(`Failed pattern match at Insect.Interpreter (line 83, column 7 - line 85, column 42): ${[qs.constructor.name]}`);
                                                            }
                                                            ;
                                                            return Data_Foldable.foldl(Data_List_Types.foldableList)(qMultiply)(new Data_Either.Right(Data_Quantity.scalar(1.0)))(qs);
                                                        });
                                                    });
                                                });
                                            });
                                        }
                                        ;
                                        return new Data_Either.Left(new Insect_Language.InvalidIdentifier(func));
                                    };
                                };
                            };
                        };
                    };
                };
                var $$eval = env => {
                    return v => {
                        if (v instanceof Insect_Language.Scalar) {
                            return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Quantity["scalar'"](v.value0));
                        }
                        ;
                        if (v instanceof Insect_Language.Unit) {
                            return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Quantity.quantity(1.0)(v.value0));
                        }
                        ;
                        if (v instanceof Insect_Language.Variable) {
                            var v1 = Data_Map_Internal.lookup(Data_Ord.ordString)(v.value0)(env.values);
                            if (v1 instanceof Data_Maybe.Just) {
                                return Control_Applicative.pure(Data_Either.applicativeEither)(v1.value0.value1);
                            }
                            ;
                            if (v1 instanceof Data_Maybe.Nothing) {
                                return new Data_Either.Left(new Insect_Language.LookupError(v.value0));
                            }
                            ;
                            throw new Error(`Failed pattern match at Insect.Interpreter (line 105, column 35 - line 107, column 70): ${[v1.constructor.name]}`);
                        }
                        ;
                        if (v instanceof Insect_Language.Factorial) {
                            return Control_Bind.bind(Data_Either.bindEither)($$eval(env)(v.value0))((() => {
                                const $140 = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Insect_Language.QConversionError.create);
                                return $141 => {
                                    return $140(Data_Quantity_Math.factorial($141));
                                };
                            })());
                        }
                        ;
                        if (v instanceof Insect_Language.Negate) {
                            return Data_Functor.map(Data_Either.functorEither)(Data_Quantity.qNegate)($$eval(env)(v.value0));
                        }
                        ;
                        if (v instanceof Insect_Language.Apply) {
                            const $80 = v.value0 === "sum" || v.value0 === "product";
                            if ($80) {
                                if (v.value1.value1 instanceof Data_List_Types.Cons && (v.value1.value1.value1 instanceof Data_List_Types.Cons && (v.value1.value1.value1.value1 instanceof Data_List_Types.Cons && v.value1.value1.value1.value1.value1 instanceof Data_List_Types.Nil))) {
                                    return evalSpecial(v.value0)(env)(v.value1.value0)(v.value1.value1.value0)(v.value1.value1.value1.value0)(v.value1.value1.value1.value1.value0);
                                }
                                ;
                                return new Data_Either.Left(new Insect_Language.WrongArityError(v.value0, 4, Data_List_NonEmpty.length(v.value1)));
                            }
                            ;
                            var v1 = Data_Map_Internal.lookup(Data_Ord.ordString)(v.value0)(env.functions);
                            if (v1 instanceof Data_Maybe.Just) {
                                return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bind(Data_Either.bindEither)(Data_Traversable.traverse(Data_NonEmpty.traversableNonEmpty(Data_List_Types.traversableList))(Data_Either.applicativeEither)($$eval(env))(v.value1))(v1.value0.value1))(checkFinite);
                            }
                            ;
                            if (v1 instanceof Data_Maybe.Nothing) {
                                return new Data_Either.Left(new Insect_Language.LookupError(v.value0));
                            }
                            ;
                            throw new Error(`Failed pattern match at Insect.Interpreter (line 119, column 7 - line 122, column 42): ${[v1.constructor.name]}`);
                        }
                        ;
                        if (v instanceof Insect_Language.BinOp) {
                            const wrap = Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Insect_Language.QConversionError.create);
                            const toScalar = q => {
                                return wrap(Data_Quantity["toScalar'"](q));
                            };
                            const qSubtract = q1 => {
                                return q2 => {
                                    return wrap(Data_Quantity.qSubtract(q1)(q2));
                                };
                            };
                            const qAdd = q1 => {
                                return q2 => {
                                    return wrap(Data_Quantity.qAdd(q1)(q2));
                                };
                            };
                            const modulo = q1 => {
                                return q2 => {
                                    return wrap(Data_Quantity_Math.modulo(q1)(q2));
                                };
                            };
                            const convertTo = source => {
                                return target => {
                                    return wrap(Data_Quantity.convertTo(source)(Data_Quantity.derivedUnit(target)));
                                };
                            };
                            const run = v1 => {
                                return a => {
                                    return b => {
                                        if (v1 instanceof Insect_Language.Sub) {
                                            return qSubtract(a)(b);
                                        }
                                        ;
                                        if (v1 instanceof Insect_Language.Add) {
                                            return qAdd(a)(b);
                                        }
                                        ;
                                        if (v1 instanceof Insect_Language.Mul) {
                                            return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Quantity.qMultiply(a)(b));
                                        }
                                        ;
                                        if (v1 instanceof Insect_Language.Div) {
                                            return Control_Applicative.pure(Data_Either.applicativeEither)(Data_Quantity.qDivide(a)(b));
                                        }
                                        ;
                                        if (v1 instanceof Insect_Language.Pow) {
                                            return Data_Functor.map(Data_Either.functorEither)(Data_Quantity.pow(a))(toScalar(b));
                                        }
                                        ;
                                        if (v1 instanceof Insect_Language.Mod) {
                                            return modulo(a)(b);
                                        }
                                        ;
                                        if (v1 instanceof Insect_Language.ConvertTo) {
                                            return convertTo(a)(b);
                                        }
                                        ;
                                        throw new Error(`Failed pattern match at Insect.Interpreter (line 128, column 5 - line 128, column 60): ${[v1.constructor.name, a.constructor.name, b.constructor.name]}`);
                                    };
                                };
                            };
                            return Control_Bind.bind(Data_Either.bindEither)($$eval(env)(v.value1))(x$prime => {
                                return Control_Bind.bind(Data_Either.bindEither)($$eval(env)(v.value2))(y$prime => {
                                    return Control_Bind.bind(Data_Either.bindEither)(run(v.value0)(x$prime)(y$prime))(checkFinite);
                                });
                            });
                        }
                        ;
                        throw new Error(`Failed pattern match at Insect.Interpreter (line 102, column 1 - line 102, column 50): ${[env.constructor.name, v.constructor.name]}`);
                    };
                };
                const evalAndSimplify = env => {
                    return v => {
                        if (v instanceof Insect_Language.BinOp && v.value0 instanceof Insect_Language.ConvertTo) {
                            return $$eval(env)(v);
                        }
                        ;
                        return Data_Functor.map(Data_Either.functorEither)(Data_Quantity.fullSimplify)($$eval(env)(v));
                    };
                };
                const runInsect = env => {
                    return v => {
                        if (v instanceof Insect_Language.Expression) {
                            var v1 = evalAndSimplify(env)(v.value0);
                            if (v1 instanceof Data_Either.Left) {
                                return errorWithInput([])(v.value0)(env)(v1.value0);
                            }
                            ;
                            if (v1 instanceof Data_Either.Right) {
                                return {
                                    msg: Message.create(Value.value)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(Insect_Format.optional)(Data_Array.cons(Insect_Format.text("  "))(Insect_PrettyPrint.pretty(v.value0))))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(Insect_Format.optional)([Insect_Format.nl, Insect_Format.nl, Insect_Format.text("   = ")]))(Insect_PrettyPrint.prettyQuantity(v1.value0)))),
                                    newEnv: {
                                        values: Data_Map_Internal.insert(Data_Ord.ordString)("ans")(new Insect_Environment.StoredValue(Insect_Environment.UserDefined.value, v1.value0))(env.values),
                                        functions: env.functions
                                    }
                                };
                            }
                            ;
                            throw new Error(`Failed pattern match at Insect.Interpreter (line 252, column 3 - line 259, column 8): ${[v1.constructor.name]}`);
                        }
                        ;
                        if (v instanceof Insect_Language.VariableAssignment) {
                            var v1 = evalAndSimplify(env)(v.value1);
                            if (v1 instanceof Data_Either.Left) {
                                return errorWithInput([Insect_Format.ident(v.value0), Insect_Format.text(" = ")])(v.value1)(env)(v1.value0);
                            }
                            ;
                            if (v1 instanceof Data_Either.Right) {
                                const $115 = isConstant(env)(v.value0);
                                if ($115) {
                                    return errorWithInput([Insect_Format.ident(v.value0), Insect_Format.text(" = ")])(v.value1)(env)(new Insect_Language.RedefinedConstantError(v.value0));
                                }
                                ;
                                return {
                                    msg: Message.create(ValueSet.value)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(Insect_Format.optional)([Insect_Format.text("  "), Insect_Format.ident(v.value0), Insect_Format.text(" = ")]))(Insect_PrettyPrint.prettyQuantity(v1.value0))),
                                    newEnv: {
                                        values: Data_Map_Internal.insert(Data_Ord.ordString)(v.value0)(new Insect_Environment.StoredValue(Insect_Environment.UserDefined.value, v1.value0))(env.values),
                                        functions: Data_Map_Internal["delete"](Data_Ord.ordString)(v.value0)(env.functions)
                                    }
                                };
                            }
                            ;
                            throw new Error(`Failed pattern match at Insect.Interpreter (line 262, column 3 - line 274, column 12): ${[v1.constructor.name]}`);
                        }
                        ;
                        if (v instanceof Insect_Language.FunctionAssignment) {
                            const fArgs = Data_Foldable.intercalate(Data_NonEmpty.foldableNonEmpty(Data_List_Types.foldableList))(Data_Monoid.monoidArray)([Insect_Format.text(", ")])(Data_Functor.map(Data_NonEmpty.functorNonEmpty(Data_List_Types.functorList))(a => {
                                return [Insect_Format.ident(a)];
                            })(v.value1));
                            const fAssign = Data_Semigroup.append(Data_Semigroup.semigroupArray)([Insect_Format["function"](v.value0), Insect_Format.text("(")])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(fArgs)([Insect_Format.text(") = ")]));
                            const numExpected = Data_List_NonEmpty.length(v.value1);
                            const userFunc = argValues => {
                                const insertArg = map => {
                                    return ({ value0, value1 }) => {
                                        return Data_Map_Internal.insert(Data_Ord.ordString)(value0)(new Insect_Environment.StoredValue(Insect_Environment.UserDefined.value, value1))(map);
                                    };
                                };
                                const args = Data_List_NonEmpty.zip(v.value1)(argValues);
                                const functionEnv = {
                                    values: Data_Foldable.foldl(Data_List_Types.foldableNonEmptyList)(insertArg)(env.values)(args),
                                    functions: Data_Map_Internal["delete"](Data_Ord.ordString)(v.value0)(env.functions)
                                };
                                const numGiven = Data_List_NonEmpty.length(argValues);
                                const $123 = numGiven === numExpected;
                                if ($123) {
                                    return evalAndSimplify(functionEnv)(v.value2);
                                }
                                ;
                                return new Data_Either.Left(new Insect_Language.WrongArityError(v.value0, numExpected, numGiven));
                            };
                            const $124 = isConstant(env)(v.value0);
                            if ($124) {
                                return errorWithInput(fAssign)(v.value2)(env)(new Insect_Language.RedefinedConstantError(v.value0));
                            }
                            ;
                            return {
                                msg: Message.create(ValueSet.value)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Functor.map(Data_Functor.functorArray)(Insect_Format.optional)(Data_Array.cons(Insect_Format.text("  "))(fAssign)))(Insect_PrettyPrint.pretty(v.value2))),
                                newEnv: {
                                    values: Data_Map_Internal["delete"](Data_Ord.ordString)(v.value0)(env.values),
                                    functions: Data_Map_Internal.insert(Data_Ord.ordString)(v.value0)(new Insect_Environment.StoredFunction(Insect_Environment.UserDefined.value, userFunc))(env.functions)
                                }
                            };
                        }
                        ;
                        if (v instanceof Insect_Language.Command && v.value0 instanceof Insect_Language.Help) {
                            return {
                                msg: new Message(Info.value, [Insect_Format.emph("insect"), Insect_Format.text(" evaluates mathematical expressions that can"), Insect_Format.nl, Insect_Format.text("involve physical quantities. You can start by trying"), Insect_Format.nl, Insect_Format.text("one of these examples:"), Insect_Format.nl, Insect_Format.text(""), Insect_Format.nl, Insect_Format.emph("  > "), Insect_Format.val("1920"), Insect_Format.text(" / "), Insect_Format.val("16"), Insect_Format.text(" * "), Insect_Format.val("9"), Insect_Format.text("         "), Insect_Format.emph("  > "), Insect_Format["function"]("sin"), Insect_Format.text("("), Insect_Format.val("30"), Insect_Format.text(" "), Insect_Format.unit("deg"), Insect_Format.text(")"), Insect_Format.nl, Insect_Format.text(""), Insect_Format.nl, Insect_Format.emph("  > "), Insect_Format.val("2"), Insect_Format.text(" "), Insect_Format.unit("min"), Insect_Format.text(" + "), Insect_Format.val("30"), Insect_Format.text(" "), Insect_Format.unit("s"), Insect_Format.text("          "), Insect_Format.emph("  > "), Insect_Format.val("6"), Insect_Format.text(" "), Insect_Format.unit("Mbit/s"), Insect_Format.text(" * "), Insect_Format.val("1.5"), Insect_Format.text(" "), Insect_Format.unit("h"), Insect_Format.text(" -> "), Insect_Format.unit("GB"), Insect_Format.nl, Insect_Format.text(""), Insect_Format.nl, Insect_Format.emph("  > "), Insect_Format.text("list"), Insect_Format.text("                  "), Insect_Format.emph("  > "), Insect_Format.ident("r"), Insect_Format.text(" = "), Insect_Format.val("80"), Insect_Format.text(" "), Insect_Format.unit("cm"), Insect_Format.nl, Insect_Format.emph("  > "), Insect_Format.val("40000"), Insect_Format.text(" "), Insect_Format.unit("km"), Insect_Format.text(" / "), Insect_Format.ident("c"), Insect_Format.text(" -> "), Insect_Format.unit("ms"), Insect_Format.text("    "), Insect_Format.emph("  > "), Insect_Format.ident("pi"), Insect_Format.text(" * "), Insect_Format.ident("r"), Insect_Format.text("^"), Insect_Format.val("2"), Insect_Format.text(" -> "), Insect_Format.unit("m"), Insect_Format.text("^"), Insect_Format.val("2"), Insect_Format.nl, Insect_Format.text(""), Insect_Format.nl, Insect_Format.text("Full documentation: https://github.com/sharkdp/insect")]),
                                newEnv: env
                            };
                        }
                        ;
                        if (v instanceof Insect_Language.Command && v.value0 instanceof Insect_Language.List) {
                            const storedValue = ({ value1 }) => {
                                return value1;
                            };
                            const toLine = kvPairs => {
                                const val = storedValue(Data_Tuple.snd(Data_List_NonEmpty.head(kvPairs)));
                                const identifiers = Data_Array.fromFoldable(Data_Foldable.foldableArray)(Data_Foldable.intercalate(Data_List_Types.foldableNonEmptyList)(Data_Monoid.monoidArray)([Insect_Format.text(" = ")])(Data_Functor.map(Data_List_Types.functorNonEmptyList)($142 => {
                                    return Data_Array.singleton(Insect_Format.ident(Data_Tuple.fst($142)));
                                })(kvPairs)));
                                return Data_Semigroup.append(Data_Semigroup.semigroupArray)([Insect_Format.nl, Insect_Format.text("  ")])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(identifiers)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([Insect_Format.text(" = ")])(Insect_PrettyPrint.prettyQuantity(val))));
                            };
                            const storageType = ({ value0 }) => {
                                return value0;
                            };
                            const visibleValues = Data_List.filter(e => {
                                return Data_Eq.notEq(Insect_Environment.eqStorageType)(storageType(Data_Tuple.snd(e)))(Insect_Environment.HiddenConstant.value);
                            })(Data_Map_Internal.toUnfoldable(Data_List_Types.unfoldableList)(env.values));
                            const envTuples = Data_List.sortBy(Data_Ord.comparing(Data_Ord.ordString)($143 => {
                                return (({ number }) => {
                                    return number;
                                })(Data_Quantity["prettyPrint'"](storedValue(Data_Tuple.snd($143))));
                            }))(visibleValues);
                            const envGrouped = Data_List.groupBy(x => {
                                return y => {
                                    return Data_Eq.eq(Data_Quantity.eqQuantity)(storedValue(Data_Tuple.snd(x)))(storedValue(Data_Tuple.snd(y)));
                                };
                            })(envTuples);
                            const envSorted = Data_List.sortBy(Data_Ord.comparing(Data_Ord.ordString)($144 => {
                                return Data_String_Common.toLower(Data_Tuple.fst(Data_List_NonEmpty.head($144)));
                            }))(envGrouped);
                            const list = Data_Semigroup.append(Data_Semigroup.semigroupArray)([Insect_Format.text("List of variables:"), Insect_Format.nl])(Data_Foldable.foldMap(Data_List_Types.foldableList)(Data_Monoid.monoidArray)(toLine)(envSorted));
                            return {
                                msg: new Message(Info.value, list),
                                newEnv: env
                            };
                        }
                        ;
                        if (v instanceof Insect_Language.Command && v.value0 instanceof Insect_Language.Reset) {
                            return {
                                msg: new Message(Info.value, [Insect_Format.text("Environment has been reset.")]),
                                newEnv: Insect_Environment.initialEnvironment
                            };
                        }
                        ;
                        if (v instanceof Insect_Language.Command && v.value0 instanceof Insect_Language.Quit) {
                            return {
                                msg: MQuit.value,
                                newEnv: Insect_Environment.initialEnvironment
                            };
                        }
                        ;
                        if (v instanceof Insect_Language.Command && v.value0 instanceof Insect_Language.Clear) {
                            return {
                                msg: MClear.value,
                                newEnv: env
                            };
                        }
                        ;
                        throw new Error(`Failed pattern match at Insect.Interpreter (line 250, column 1 - line 250, column 47): ${[env.constructor.name, v.constructor.name]}`);
                    };
                };
                exports["Value"] = Value;
                exports["ValueSet"] = ValueSet;
                exports["Info"] = Info;
                exports["Error"] = $$Error;
                exports["Message"] = Message;
                exports["MQuit"] = MQuit;
                exports["MClear"] = MClear;
                exports["runInsect"] = runInsect;
            })(PS);
            ($PS => {
                $PS["Text.Parsing.Parser.Pos"] = $PS["Text.Parsing.Parser.Pos"] || {};
                const exports = $PS["Text.Parsing.Parser.Pos"];
                const Data_EuclideanRing = $PS["Data.EuclideanRing"];
                const Data_Foldable = $PS["Data.Foldable"];
                const Data_Newtype = $PS["Data.Newtype"];
                const Data_String_Common = $PS["Data.String.Common"];
                const Data_String_Pattern = $PS["Data.String.Pattern"];
                const updatePosString = pos$prime => {
                    return str => {
                        const updatePosChar = ({ line, column }) => {
                            return c => {
                                if (c === "\x0a") {
                                    return {
                                        line: line + 1 | 0,
                                        column: 1
                                    };
                                }
                                ;
                                if (c === "\x0d") {
                                    return {
                                        line: line + 1 | 0,
                                        column: 1
                                    };
                                }
                                ;
                                if (c === "\x09") {
                                    return {
                                        line,
                                        column: (column + 8 | 0) - Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(column - 1 | 0)(8) | 0
                                    };
                                }
                                ;
                                return {
                                    line,
                                    column: column + 1 | 0
                                };
                            };
                        };
                        return Data_Foldable.foldl(Data_Foldable.foldableArray)(updatePosChar)(pos$prime)(Data_String_Common.split(Data_Newtype.wrap(Data_String_Pattern.newtypePattern)(""))(str));
                    };
                };
                const initialPos = {
                    line: 1,
                    column: 1
                };
                exports["initialPos"] = initialPos;
                exports["updatePosString"] = updatePosString;
            })(PS);
            ($PS => {
                $PS["Text.Parsing.Parser"] = $PS["Text.Parsing.Parser"] || {};
                const exports = $PS["Text.Parsing.Parser"];
                const Control_Alt = $PS["Control.Alt"];
                const Control_Alternative = $PS["Control.Alternative"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Bind = $PS["Control.Bind"];
                const Control_Lazy = $PS["Control.Lazy"];
                const Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
                const Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
                const Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
                const Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
                const Control_Plus = $PS["Control.Plus"];
                const Data_Either = $PS["Data.Either"];
                const Data_Identity = $PS["Data.Identity"];
                const Data_Newtype = $PS["Data.Newtype"];
                const Data_Tuple = $PS["Data.Tuple"];
                const Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];
                const ParseState = (() => {
                    function ParseState(value0, value1, value2) {
                        this.value0 = value0;
                        this.value1 = value1;
                        this.value2 = value2;
                    }
                    ;
                    ParseState.create = value0 => {
                        return value1 => {
                            return value2 => {
                                return new ParseState(value0, value1, value2);
                            };
                        };
                    };
                    return ParseState;
                })();
                const ParseError = (() => {
                    function ParseError(value0, value1) {
                        this.value0 = value0;
                        this.value1 = value1;
                    }
                    ;
                    ParseError.create = value0 => {
                        return value1 => {
                            return new ParseError(value0, value1);
                        };
                    };
                    return ParseError;
                })();
                const ParserT = x => {
                    return x;
                };
                const parseErrorPosition = ({ value1 }) => {
                    return value1;
                };
                const parseErrorMessage = ({ value0 }) => {
                    return value0;
                };
                const newtypeParserT = new Data_Newtype.Newtype(n => {
                    return n;
                }, ParserT);
                const runParserT = dictMonad => {
                    return s => {
                        return p => {
                            const initialState = new ParseState(s, Text_Parsing_Parser_Pos.initialPos, false);
                            return Control_Monad_State_Trans.evalStateT(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p)))(initialState);
                        };
                    };
                };
                const runParser = s => {
                    const $90 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
                    const $91 = runParserT(Data_Identity.monadIdentity)(s);
                    return $92 => {
                        return $90($91($92));
                    };
                };
                const monadThrowParserT = dictMonad => {
                    return Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
                };
                const monadStateParserT = dictMonad => {
                    return Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad));
                };
                const position = dictMonad => {
                    return Control_Monad_State_Class.gets(monadStateParserT(dictMonad))(({ value1 }) => {
                        return value1;
                    });
                };
                const lazyParserT = new Control_Lazy.Lazy(f => {
                    return Control_Lazy.defer(Control_Monad_State_Trans.lazyStateT)((() => {
                        const $98 = Data_Newtype.unwrap(newtypeParserT);
                        return $99 => {
                            return Control_Monad_Except_Trans.runExceptT($98(f($99)));
                        };
                    })());
                });
                const functorParserT = dictFunctor => {
                    return Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(dictFunctor));
                };
                const failWithPosition = dictMonad => {
                    return message => {
                        return pos => {
                            return Control_Monad_Error_Class.throwError(monadThrowParserT(dictMonad))(new ParseError(message, pos));
                        };
                    };
                };
                const bindParserT = dictMonad => {
                    return Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
                };
                const fail = dictMonad => {
                    return message => {
                        return Control_Bind.bindFlipped(bindParserT(dictMonad))(failWithPosition(dictMonad)(message))(position(dictMonad));
                    };
                };
                const applyParserT = dictMonad => {
                    return Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
                };
                const applicativeParserT = dictMonad => {
                    return Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
                };
                const altParserT = dictMonad => {
                    return new Control_Alt.Alt(() => {
                        return functorParserT(((dictMonad.Bind1()).Apply0()).Functor0());
                    }, p1 => {
                        return p2 => {
                            return ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(v => {
                                return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p1)))(new ParseState(v.value0, v.value1, false)))(({ value0, value1 }) => {
                                    if (value0 instanceof Data_Either.Left && !value1.value2) {
                                        return Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p2)))(v);
                                    }
                                    ;
                                    return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(value0, value1));
                                });
                            })));
                        };
                    });
                };
                const plusParserT = dictMonad => {
                    return new Control_Plus.Plus(() => {
                        return altParserT(dictMonad);
                    }, fail(dictMonad)("No alternative"));
                };
                const alternativeParserT = dictMonad => {
                    return new Control_Alternative.Alternative(() => {
                        return applicativeParserT(dictMonad);
                    }, () => {
                        return plusParserT(dictMonad);
                    });
                };
                exports["ParseError"] = ParseError;
                exports["parseErrorMessage"] = parseErrorMessage;
                exports["parseErrorPosition"] = parseErrorPosition;
                exports["ParseState"] = ParseState;
                exports["ParserT"] = ParserT;
                exports["runParser"] = runParser;
                exports["fail"] = fail;
                exports["newtypeParserT"] = newtypeParserT;
                exports["lazyParserT"] = lazyParserT;
                exports["functorParserT"] = functorParserT;
                exports["applyParserT"] = applyParserT;
                exports["applicativeParserT"] = applicativeParserT;
                exports["bindParserT"] = bindParserT;
                exports["monadStateParserT"] = monadStateParserT;
                exports["altParserT"] = altParserT;
                exports["plusParserT"] = plusParserT;
                exports["alternativeParserT"] = alternativeParserT;
            })(PS);
            ($PS => {
                $PS["Text.Parsing.Parser.Combinators"] = $PS["Text.Parsing.Parser.Combinators"] || {};
                const exports = $PS["Text.Parsing.Parser.Combinators"];
                const Control_Alt = $PS["Control.Alt"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Apply = $PS["Control.Apply"];
                const Control_Bind = $PS["Control.Bind"];
                const Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
                const Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
                const Control_Plus = $PS["Control.Plus"];
                const Data_Either = $PS["Data.Either"];
                const Data_Foldable = $PS["Data.Foldable"];
                const Data_Function = $PS["Data.Function"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_List = $PS["Data.List"];
                const Data_List_Types = $PS["Data.List.Types"];
                const Data_Maybe = $PS["Data.Maybe"];
                const Data_Newtype = $PS["Data.Newtype"];
                const Data_Tuple = $PS["Data.Tuple"];
                const Data_Unit = $PS["Data.Unit"];
                const Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
                const withErrorMessage = dictMonad => {
                    return p => {
                        return msg => {
                            return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Text_Parsing_Parser.fail(dictMonad)(`Expected ${msg}`));
                        };
                    };
                };
                const tryRethrow = dictMonad => {
                    return p => {
                        return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(v => {
                            return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(({ value0, value1 }) => {
                                if (value0 instanceof Data_Either.Left) {
                                    return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Either.Left(new Text_Parsing_Parser.ParseError(value0.value0.value0, v.value1)), new Text_Parsing_Parser.ParseState(value1.value0, value1.value1, v.value2)));
                                }
                                ;
                                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(value0, value1));
                            });
                        })));
                    };
                };
                const $$try = dictMonad => {
                    return p => {
                        return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(v => {
                            return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(({ value0, value1 }) => {
                                if (value0 instanceof Data_Either.Left) {
                                    return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(value0, new Text_Parsing_Parser.ParseState(value1.value0, value1.value1, v.value2)));
                                }
                                ;
                                return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(value0, value1));
                            });
                        })));
                    };
                };
                const skipMany1 = dictMonad => {
                    return p => {
                        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(x => {
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(skipMany(dictMonad)(p))(xs => {
                                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit);
                            });
                        });
                    };
                };
                var skipMany = dictMonad => {
                    return p => {
                        return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(skipMany1(dictMonad)(p))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit));
                    };
                };
                const sepBy1 = dictMonad => {
                    return p => {
                        return sep => {
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(a => {
                                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(sep)(p)))(as => {
                                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(a, as));
                                });
                            });
                        };
                    };
                };
                const sepBy = dictMonad => {
                    return p => {
                        return sep => {
                            return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(sepBy1(dictMonad)(p)(sep))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_Types.Nil.value));
                        };
                    };
                };
                const option = dictMonad => {
                    return a => {
                        return p => {
                            return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
                        };
                    };
                };
                const optionMaybe = dictMonad => {
                    return p => {
                        return option(dictMonad)(Data_Maybe.Nothing.value)(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.Just.create)(p));
                    };
                };
                const notFollowedBy = dictMonad => {
                    return p => {
                        return $$try(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))($$try(dictMonad)(p))(Text_Parsing_Parser.fail(dictMonad)("Negated parser succeeded")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit)));
                    };
                };
                const choice = dictFoldable => {
                    return dictMonad => {
                        return Data_Foldable.foldl(dictFoldable)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad)))(Control_Plus.empty(Text_Parsing_Parser.plusParserT(dictMonad)));
                    };
                };
                const between = dictMonad => {
                    return open => {
                        return close => {
                            return p => {
                                return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(open)(p))(close);
                            };
                        };
                    };
                };
                const asErrorMessage = dictMonad => {
                    return Data_Function.flip(withErrorMessage(dictMonad));
                };
                exports["withErrorMessage"] = withErrorMessage;
                exports["asErrorMessage"] = asErrorMessage;
                exports["between"] = between;
                exports["option"] = option;
                exports["optionMaybe"] = optionMaybe;
                exports["try"] = $$try;
                exports["tryRethrow"] = tryRethrow;
                exports["sepBy"] = sepBy;
                exports["sepBy1"] = sepBy1;
                exports["choice"] = choice;
                exports["skipMany"] = skipMany;
                exports["skipMany1"] = skipMany1;
                exports["notFollowedBy"] = notFollowedBy;
            })(PS);
            ($PS => {
                $PS["Text.Parsing.Parser.String"] = $PS["Text.Parsing.Parser.String"] || {};
                const exports = $PS["Text.Parsing.Parser.String"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Bind = $PS["Control.Bind"];
                const Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
                const Data_Eq = $PS["Data.Eq"];
                const Data_Foldable = $PS["Data.Foldable"];
                const Data_Function = $PS["Data.Function"];
                const Data_Maybe = $PS["Data.Maybe"];
                const Data_Newtype = $PS["Data.Newtype"];
                const Data_Show = $PS["Data.Show"];
                const Data_String_CodePoints = $PS["Data.String.CodePoints"];
                const Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
                const Data_String_Common = $PS["Data.String.Common"];
                const Data_String_Pattern = $PS["Data.String.Pattern"];
                const Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
                const Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
                const Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];
                const StringLike = function (drop, indexOf, $$null, uncons) {
                    this.drop = drop;
                    this.indexOf = indexOf;
                    this["null"] = $$null;
                    this.uncons = uncons;
                };
                const uncons = dict => {
                    return dict.uncons;
                };
                const stringLikeString = new StringLike(Data_String_CodePoints.drop, Data_String_CodePoints.indexOf, Data_String_Common["null"], Data_String_CodeUnits.uncons);
                const $$null = dict => {
                    return dict["null"];
                };
                const indexOf = dict => {
                    return dict.indexOf;
                };
                const eof = dictStringLike => {
                    return dictMonad => {
                        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(({ value0 }) => {
                            return value0;
                        }))(input => {
                            return Control_Applicative.unless(Text_Parsing_Parser.applicativeParserT(dictMonad))($$null(dictStringLike)(input))(Text_Parsing_Parser.fail(dictMonad)("Expected EOF"));
                        });
                    };
                };
                const drop = dict => {
                    return dict.drop;
                };
                const string = dictStringLike => {
                    return dictMonad => {
                        return str => {
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(({ value0 }) => {
                                return value0;
                            }))(input => {
                                const v = indexOf(dictStringLike)(Data_Newtype.wrap(Data_String_Pattern.newtypePattern)(str))(input);
                                if (v instanceof Data_Maybe.Just && v.value0 === 0) {
                                    return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(({ value1 }) => {
                                        return new Text_Parsing_Parser.ParseState(drop(dictStringLike)(Data_String_CodePoints.length(str))(input), Text_Parsing_Parser_Pos.updatePosString(value1)(str), true);
                                    }))(() => {
                                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(str);
                                    });
                                }
                                ;
                                return Text_Parsing_Parser.fail(dictMonad)(`Expected ${Data_Show.show(Data_Show.showString)(str)}`);
                            });
                        };
                    };
                };
                const anyChar = dictStringLike => {
                    return dictMonad => {
                        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(({ value0 }) => {
                            return value0;
                        }))(input => {
                            const v = uncons(dictStringLike)(input);
                            if (v instanceof Data_Maybe.Nothing) {
                                return Text_Parsing_Parser.fail(dictMonad)("Unexpected EOF");
                            }
                            ;
                            if (v instanceof Data_Maybe.Just) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(({ value1 }) => {
                                    return new Text_Parsing_Parser.ParseState(v.value0.tail, Text_Parsing_Parser_Pos.updatePosString(value1)(Data_String_CodeUnits.singleton(v.value0.head)), true);
                                }))(() => {
                                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v.value0.head);
                                });
                            }
                            ;
                            throw new Error(`Failed pattern match at Text.Parsing.Parser.String (line 56, column 3 - line 63, column 16): ${[v.constructor.name]}`);
                        });
                    };
                };
                const satisfy = dictStringLike => {
                    return dictMonad => {
                        return f => {
                            return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(anyChar(dictStringLike)(dictMonad))(c => {
                                const $52 = f(c);
                                if ($52) {
                                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(c);
                                }
                                ;
                                return Text_Parsing_Parser.fail(dictMonad)(`Character '${Data_String_CodeUnits.singleton(c)}' did not satisfy predicate`);
                            }));
                        };
                    };
                };
                const $$char = dictStringLike => {
                    return dictMonad => {
                        return c => {
                            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(v => {
                                return v === c;
                            }))(Data_Show.show(Data_Show.showChar)(c));
                        };
                    };
                };
                const noneOf = dictStringLike => {
                    return dictMonad => {
                        return ss => {
                            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))(`none of ${Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss)}`);
                        };
                    };
                };
                const oneOf = dictStringLike => {
                    return dictMonad => {
                        return ss => {
                            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(satisfy(dictStringLike)(dictMonad)(Data_Function.flip(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqChar))(ss)))(`one of ${Data_Show.show(Data_Show.showArray(Data_Show.showChar))(ss)}`);
                        };
                    };
                };
                exports["eof"] = eof;
                exports["string"] = string;
                exports["satisfy"] = satisfy;
                exports["char"] = $$char;
                exports["oneOf"] = oneOf;
                exports["noneOf"] = noneOf;
                exports["stringLikeString"] = stringLikeString;
            })(PS);
            ($PS => {
                $PS["Text.Parsing.Parser.Token"] = $PS["Text.Parsing.Parser.Token"] || {};
                const exports = $PS["Text.Parsing.Parser.Token"];
                const Control_Alt = $PS["Control.Alt"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Apply = $PS["Control.Apply"];
                const Control_Bind = $PS["Control.Bind"];
                const Control_Category = $PS["Control.Category"];
                const Control_Lazy = $PS["Control.Lazy"];
                const Data_Array = $PS["Data.Array"];
                const Data_Boolean = $PS["Data.Boolean"];
                const Data_Char = $PS["Data.Char"];
                const Data_Char_Unicode = $PS["Data.Char.Unicode"];
                const Data_Either = $PS["Data.Either"];
                const Data_Foldable = $PS["Data.Foldable"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_Int = $PS["Data.Int"];
                const Data_List = $PS["Data.List"];
                const Data_List_Types = $PS["Data.List.Types"];
                const Data_Maybe = $PS["Data.Maybe"];
                const Data_Ord = $PS["Data.Ord"];
                const Data_Ordering = $PS["Data.Ordering"];
                const Data_Ring = $PS["Data.Ring"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Data_Show = $PS["Data.Show"];
                const Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
                const Data_String_Common = $PS["Data.String.Common"];
                const Data_Unfoldable = $PS["Data.Unfoldable"];
                const Data_Unit = $PS["Data.Unit"];
                const $$Math = $PS["Math"];
                const Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
                const Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
                const Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
                const upper = dictMonad => {
                    return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isUpper))("uppercase letter");
                };
                const theReservedNames = dictMonad => {
                    return ({ caseSensitive, reservedNames, constructor }) => {
                        if (caseSensitive) {
                            return Data_Array.sort(Data_Ord.ordString)(reservedNames);
                        }
                        ;
                        if (Data_Boolean.otherwise) {
                            return Data_Array.sort(Data_Ord.ordString)(Data_Functor.map(Data_Functor.functorArray)(Data_String_Common.toLower)(reservedNames));
                        }
                        ;
                        throw new Error(`Failed pattern match at Text.Parsing.Parser.Token (line 722, column 1 - line 722, column 82): ${[constructor.name]}`);
                    };
                };
                const space = dictMonad => {
                    return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isSpace))("space");
                };
                const simpleSpace = dictMonad => {
                    return Text_Parsing_Parser_Combinators.skipMany1(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isSpace));
                };
                const oneLineComment = dictMonad => {
                    return ({ commentLine }) => {
                        return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(commentLine)))(Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v1 => {
                            return v1 !== "\x0a";
                        })));
                    };
                };
                const octDigit = dictMonad => {
                    return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isOctDigit))("oct digit");
                };
                const letter = dictMonad => {
                    return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isAlpha))("letter");
                };
                const isReserved = $copy_names => {
                    return $copy_name => {
                        let $tco_var_names = $copy_names;
                        let $tco_done = false;
                        let $tco_result;
                        function $tco_loop(names, name) {
                            const v = Data_Array.uncons(names);
                            if (v instanceof Data_Maybe.Nothing) {
                                $tco_done = true;
                                return false;
                            }
                            ;
                            if (v instanceof Data_Maybe.Just) {
                                const v1 = Data_Ord.compare(Data_Ord.ordString)(v.value0.head)(name);
                                if (v1 instanceof Data_Ordering.LT) {
                                    $tco_var_names = v.value0.tail;
                                    $copy_name = name;
                                    return;
                                }
                                ;
                                if (v1 instanceof Data_Ordering.EQ) {
                                    $tco_done = true;
                                    return true;
                                }
                                ;
                                if (v1 instanceof Data_Ordering.GT) {
                                    $tco_done = true;
                                    return false;
                                }
                                ;
                                throw new Error(`Failed pattern match at Text.Parsing.Parser.Token (line 717, column 39 - line 720, column 53): ${[v1.constructor.name]}`);
                            }
                            ;
                            throw new Error(`Failed pattern match at Text.Parsing.Parser.Token (line 715, column 5 - line 720, column 53): ${[v.constructor.name]}`);
                        }
                        ;
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_names, $copy_name);
                        }
                        ;
                        return $tco_result;
                    };
                };
                const isReservedName = dictMonad => {
                    return v => {
                        return name => {
                            const caseName = (() => {
                                if (v.caseSensitive) {
                                    return name;
                                }
                                ;
                                if (Data_Boolean.otherwise) {
                                    return Data_String_Common.toLower(name);
                                }
                                ;
                                throw new Error(`Failed pattern match at Text.Parsing.Parser.Token (line 710, column 5 - line 711, column 57): ${[]}`);
                            })();
                            return isReserved(theReservedNames(dictMonad)(v))(caseName);
                        };
                    };
                };
                const inCommentSingle = dictMonad => {
                    return ({ commentEnd, commentStart }) => {
                        const startEnd = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_String_CodeUnits.toCharArray(commentEnd))(Data_String_CodeUnits.toCharArray(commentStart));
                        return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(p => {
                            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(commentEnd))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators.skipMany1(dictMonad)(Text_Parsing_Parser_String.noneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd)))(p)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd))(p)))("end of comment");
                        });
                    };
                };
                const multiLineComment = dictMonad => {
                    return v => {
                        return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v.commentStart)))(inComment(dictMonad)(v));
                    };
                };
                const inCommentMulti = dictMonad => {
                    return v => {
                        const startEnd = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_String_CodeUnits.toCharArray(v.commentEnd))(Data_String_CodeUnits.toCharArray(v.commentStart));
                        return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(p => {
                            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor["void"](Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_Combinators["try"](dictMonad)(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(v.commentEnd))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(multiLineComment(dictMonad)(v))(p)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators.skipMany1(dictMonad)(Text_Parsing_Parser_String.noneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd)))(p)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(startEnd))(p)))("end of comment");
                        });
                    };
                };
                var inComment = dictMonad => {
                    return v => {
                        if (v.nestedComments) {
                            return inCommentMulti(dictMonad)(v);
                        }
                        ;
                        return inCommentSingle(dictMonad)(v);
                    };
                };
                const whiteSpace$prime = dictMonad => {
                    return v => {
                        if (Data_String_Common["null"](v.commentLine) && Data_String_Common["null"](v.commentStart)) {
                            return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(simpleSpace(dictMonad))(""));
                        }
                        ;
                        if (Data_String_Common["null"](v.commentLine)) {
                            return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(simpleSpace(dictMonad))(multiLineComment(dictMonad)(v)))(""));
                        }
                        ;
                        if (Data_String_Common["null"](v.commentStart)) {
                            return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(simpleSpace(dictMonad))(oneLineComment(dictMonad)(v)))(""));
                        }
                        ;
                        if (Data_Boolean.otherwise) {
                            return Text_Parsing_Parser_Combinators.skipMany(dictMonad)(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(simpleSpace(dictMonad))(oneLineComment(dictMonad)(v)))(multiLineComment(dictMonad)(v)))(""));
                        }
                        ;
                        throw new Error(`Failed pattern match at Text.Parsing.Parser.Token (line 731, column 1 - line 731, column 86): ${[v.constructor.name]}`);
                    };
                };
                const hexDigit = dictMonad => {
                    return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isHexDigit))("hex digit");
                };
                const digit = dictMonad => {
                    return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.isDigit))("digit");
                };
                const makeTokenParser = dictMonad => {
                    return v => {
                        const stringLetter = Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(c => {
                            return c !== "\"" && (c !== "\\" && c > "\x1a");
                        });
                        const sign = dictRing => {
                            return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("-"))(Data_Ring.negate(dictRing)))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("+"))(Control_Category.identity(Control_Category.categoryFn))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Control_Category.identity(Control_Category.categoryFn)));
                        };
                        const oper = (() => {
                            const go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(v.opStart)(c => {
                                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(v.opLetter))(cs => {
                                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.singleton(c) + Data_String_CodeUnits.fromCharArray(cs));
                                });
                            });
                            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(go)("operator");
                        })();
                        const number = base => {
                            return baseDigit => {
                                const folder = v1 => {
                                    return v2 => {
                                        if (v1 instanceof Data_Maybe.Nothing) {
                                            return Data_Maybe.Nothing.value;
                                        }
                                        ;
                                        if (v1 instanceof Data_Maybe.Just) {
                                            return Data_Functor.map(Data_Maybe.functorMaybe)(v3 => {
                                                return (base * v1.value0 | 0) + v3 | 0;
                                            })(Data_Char_Unicode.digitToInt(v2));
                                        }
                                        ;
                                        throw new Error(`Failed pattern match at Text.Parsing.Parser.Token (line 600, column 9 - line 600, column 49): ${[v1.constructor.name, v2.constructor.name]}`);
                                    };
                                };
                                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(baseDigit))(digits => {
                                    return Data_Maybe.maybe(Text_Parsing_Parser.fail(dictMonad)("not digits"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(Data_Foldable.foldl(Data_Foldable.foldableArray)(folder)(new Data_Maybe.Just(0))(digits));
                                });
                            };
                        };
                        const octal = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(["o", "O"]))(number(8)(octDigit(dictMonad)));
                        const lexeme = p => {
                            return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(dictMonad))(p)(whiteSpace$prime(dictMonad)(v));
                        };
                        const reservedOp = name => {
                            const go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(name))(() => {
                                return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.notFollowedBy(dictMonad)(v.opLetter))(`end of ${name}`);
                            });
                            return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
                        };
                        const symbol = name => {
                            return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(lexeme(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(name)))(name);
                        };
                        const parens = p => {
                            return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("("))(symbol(")"))(p);
                        };
                        const semi = symbol(";");
                        const semiSep = p => {
                            return Text_Parsing_Parser_Combinators.sepBy(dictMonad)(p)(semi);
                        };
                        const semiSep1 = p => {
                            return Text_Parsing_Parser_Combinators.sepBy1(dictMonad)(p)(semi);
                        };
                        const isReservedOp = name => {
                            return isReserved(Data_Array.sort(Data_Ord.ordString)(v.reservedOpNames))(name);
                        };
                        const operator = (() => {
                            const go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(oper)(name => {
                                const $82 = isReservedOp(name);
                                if ($82) {
                                    return Text_Parsing_Parser.fail(dictMonad)(`reserved operator ${name}`);
                                }
                                ;
                                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(name);
                            });
                            return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
                        })();
                        const ident = (() => {
                            const go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(v.identStart)(c => {
                                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(v.identLetter))(cs => {
                                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.singleton(c) + Data_String_CodeUnits.fromCharArray(cs));
                                });
                            });
                            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(go)("identifier");
                        })();
                        const identifier = (() => {
                            const go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(ident)(name => {
                                const $83 = isReservedName(dictMonad)(v)(name);
                                if ($83) {
                                    return Text_Parsing_Parser.fail(dictMonad)(`reserved word ${Data_Show.show(Data_Show.showString)(name)}`);
                                }
                                ;
                                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(name);
                            });
                            return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
                        })();
                        const hexadecimal = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(["x", "X"]))(number(16)(hexDigit(dictMonad)));
                        const fraction = (() => {
                            const op = v1 => {
                                return v2 => {
                                    if (v2 instanceof Data_Maybe.Nothing) {
                                        return Data_Maybe.Nothing.value;
                                    }
                                    ;
                                    if (v2 instanceof Data_Maybe.Just) {
                                        return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Char_Unicode.digitToInt(v1))(int$prime => {
                                            return Control_Applicative.pure(Data_Maybe.applicativeMaybe)((v2.value0 + Data_Int.toNumber(int$prime)) / 10.0);
                                        });
                                    }
                                    ;
                                    throw new Error(`Failed pattern match at Text.Parsing.Parser.Token (line 550, column 9 - line 550, column 51): ${[v1.constructor.name, v2.constructor.name]}`);
                                };
                            };
                            return Text_Parsing_Parser_Combinators.asErrorMessage(dictMonad)("fraction")(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("."))(() => {
                                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(digit(dictMonad)))("fraction"))(digits => {
                                    return Data_Maybe.maybe(Text_Parsing_Parser.fail(dictMonad)("not digit"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad)))(Data_Foldable.foldr(Data_Foldable.foldableArray)(op)(new Data_Maybe.Just(0.0))(digits));
                                });
                            }));
                        })();
                        const escapeGap = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(space(dictMonad)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\\")))("end of string gap");
                        const escapeEmpty = Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("&");
                        const escMap = Data_Array.zip(["a", "b", "f", "n", "r", "t", "v", "\\", "\"", "'"])(["\x07", "\x08", "\x0c", "\x0a", "\x0d", "\x09", "\x0b", "\\", "\"", "'"]);
                        const dot = symbol(".");
                        const decimal = number(10)(digit(dictMonad));
                        const exponent$prime = (() => {
                            const power = e => {
                                if (e < 0) {
                                    return 1.0 / power(-e | 0);
                                }
                                ;
                                if (Data_Boolean.otherwise) {
                                    return $$Math.pow(10.0)(Data_Int.toNumber(e));
                                }
                                ;
                                throw new Error(`Failed pattern match at Text.Parsing.Parser.Token (line 563, column 9 - line 563, column 31): ${[e.constructor.name]}`);
                            };
                            return Text_Parsing_Parser_Combinators.asErrorMessage(dictMonad)("exponent")(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(["e", "E"]))(() => {
                                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(sign(Data_Ring.ringInt))(f => {
                                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(decimal)("exponent"))(e => {
                                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(power(f(e)));
                                    });
                                });
                            }));
                        })();
                        const fractExponent = n => {
                            const justExponent = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(exponent$prime)(expo => {
                                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Int.toNumber(n) * expo);
                            });
                            const fractExponent$prime = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(fraction)(fract => {
                                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.option(dictMonad)(1.0)(exponent$prime))(expo => {
                                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))((Data_Int.toNumber(n) + fract) * expo);
                                });
                            });
                            return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(fractExponent$prime)(justExponent);
                        };
                        const fractFloat = n => {
                            return Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Either.Right.create)(fractExponent(n));
                        };
                        const decimalFloat = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(decimal)(n => {
                            return Text_Parsing_Parser_Combinators.option(dictMonad)(new Data_Either.Left(n))(fractFloat(n));
                        });
                        const zeroNumFloat = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Either.Left.create)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(hexadecimal)(octal)))(decimalFloat))(fractFloat(0)))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_Either.Left(0)));
                        const natFloat = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("0"))(zeroNumFloat))(decimalFloat);
                        const naturalOrFloat = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(natFloat))("number");
                        const floating = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(decimal)(fractExponent);
                        const $$float = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(floating))("float");
                        const zeroNumber = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("0"))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(hexadecimal)(octal))(decimal))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(0))))("");
                        const nat = Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(zeroNumber)(decimal);
                        const $$int = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(lexeme(sign(Data_Ring.ringInt)))(f => {
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(nat)(n => {
                                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(f(n));
                            });
                        });
                        const integer = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme($$int))("integer");
                        const natural = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(nat))("natural");
                        const comma = symbol(",");
                        const commaSep = p => {
                            return Text_Parsing_Parser_Combinators.sepBy(dictMonad)(p)(comma);
                        };
                        const commaSep1 = p => {
                            return Text_Parsing_Parser_Combinators.sepBy1(dictMonad)(p)(comma);
                        };
                        const colon = symbol(":");
                        const charNum = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(decimal)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("o"))(number(8)(octDigit(dictMonad)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("x"))(number(16)(hexDigit(dictMonad)))))(code => {
                            const $88 = code > 1114111;
                            if ($88) {
                                return Text_Parsing_Parser.fail(dictMonad)("invalid escape sequence");
                            }
                            ;
                            const v1 = Data_Char.fromCharCode(code);
                            if (v1 instanceof Data_Maybe.Just) {
                                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0);
                            }
                            ;
                            if (v1 instanceof Data_Maybe.Nothing) {
                                return Text_Parsing_Parser.fail(dictMonad)("invalid character code (should not happen)");
                            }
                            ;
                            throw new Error(`Failed pattern match at Text.Parsing.Parser.Token (line 448, column 17 - line 450, column 81): ${[v1.constructor.name]}`);
                        });
                        const charLetter = Text_Parsing_Parser_String.satisfy(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(c => {
                            return c !== "'" && (c !== "\\" && c > "\x1a");
                        });
                        const charEsc = (() => {
                            const parseEsc = ({ value0, value1 }) => {
                                return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)(value0))(value1);
                            };
                            return Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)(Data_Functor.map(Data_Functor.functorArray)(parseEsc)(escMap));
                        })();
                        const charControl = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("^"))(() => {
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(upper(dictMonad))(code => {
                                const v1 = Data_Char.fromCharCode((Data_Char.toCharCode(code) - Data_Char.toCharCode("A") | 0) + 1 | 0);
                                if (v1 instanceof Data_Maybe.Just) {
                                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0);
                                }
                                ;
                                if (v1 instanceof Data_Maybe.Nothing) {
                                    return Text_Parsing_Parser.fail(dictMonad)("invalid character code (should not happen)");
                                }
                                ;
                                throw new Error(`Failed pattern match at Text.Parsing.Parser.Token (line 437, column 9 - line 439, column 73): ${[v1.constructor.name]}`);
                            });
                        });
                        const caseString = name => {
                            if (v.caseSensitive) {
                                return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(name))(name);
                            }
                            ;
                            if (Data_Boolean.otherwise) {
                                const msg = Data_Show.show(Data_Show.showString)(name);
                                const caseChar = c => {
                                    if (Data_Char_Unicode.isAlpha(c)) {
                                        return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.toLower(c)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)(Data_Char_Unicode.toUpper(c)));
                                    }
                                    ;
                                    if (Data_Boolean.otherwise) {
                                        return Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)(c);
                                    }
                                    ;
                                    throw new Error(`Failed pattern match at Text.Parsing.Parser.Token (line 658, column 9 - line 658, column 50): ${[c.constructor.name]}`);
                                };
                                const walk = name$prime => {
                                    const v1 = Data_String_CodeUnits.uncons(name$prime);
                                    if (v1 instanceof Data_Maybe.Nothing) {
                                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_Unit.unit);
                                    }
                                    ;
                                    if (v1 instanceof Data_Maybe.Just) {
                                        return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(caseChar(v1.value0.head))(msg))(walk(v1.value0.tail));
                                    }
                                    ;
                                    throw new Error(`Failed pattern match at Text.Parsing.Parser.Token (line 654, column 22 - line 656, column 86): ${[v1.constructor.name]}`);
                                };
                                return Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(walk(name))(name);
                            }
                            ;
                            throw new Error(`Failed pattern match at Text.Parsing.Parser.Token (line 649, column 5 - line 649, column 52): ${[name.constructor.name]}`);
                        };
                        const reserved = name => {
                            const go = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(caseString(name))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_Combinators.notFollowedBy(dictMonad)(v.identLetter))(`end of ${name}`));
                            return lexeme(Text_Parsing_Parser_Combinators["try"](dictMonad)(go));
                        };
                        const brackets = p => {
                            return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("["))(symbol("]"))(p);
                        };
                        const braces = p => {
                            return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("{"))(symbol("}"))(p);
                        };
                        const ascii3codes = ["NUL", "SOH", "STX", "ETX", "EOT", "ENQ", "ACK", "BEL", "DLE", "DC1", "DC2", "DC3", "DC4", "NAK", "SYN", "ETB", "CAN", "SUB", "ESC", "DEL"];
                        const ascii3 = ["\x00", "\x01", "\x02", "\x03", "\x04", "\x05", "\x06", "\x07", "\x10", "\x11", "\x12", "\x13", "\x14", "\x15", "\x16", "\x17", "\x18", "\x1a", "\x1b", "\x7f"];
                        const ascii2codes = ["BS", "HT", "LF", "VT", "FF", "CR", "SO", "SI", "EM", "FS", "GS", "RS", "US", "SP"];
                        const ascii2 = ["\x08", "\x09", "\x0a", "\x0b", "\x0c", "\x0d", "\x0e", "\x0f", "\x19", "\x1c", "\x1d", "\x1e", "\x1f", " "];
                        const asciiMap = Data_Array.zip(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ascii3codes)(ascii2codes))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(ascii3)(ascii2));
                        const charAscii = (() => {
                            const parseAscii = ({ value0, value1 }) => {
                                return Text_Parsing_Parser_Combinators["try"](dictMonad)(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(dictMonad)(value0))(value1));
                            };
                            return Text_Parsing_Parser_Combinators.choice(Data_Foldable.foldableArray)(dictMonad)(Data_Functor.map(Data_Functor.functorArray)(parseAscii)(asciiMap));
                        })();
                        const escapeCode = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(charEsc)(charNum))(charAscii))(charControl))("escape code");
                        const charEscape = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\\"))(escapeCode);
                        const characterChar = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(charLetter)(charEscape))("literal character");
                        const charLiteral = (() => {
                            const go = Text_Parsing_Parser_Combinators.between(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("'"))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("'"))("end of character"))(characterChar);
                            return Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(lexeme(go))("character");
                        })();
                        const stringEscape = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\\"))(() => {
                            return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(escapeGap)(Data_Maybe.Nothing.value))(Data_Functor.voidLeft(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(escapeEmpty)(Data_Maybe.Nothing.value)))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.Just.create)(escapeCode));
                        });
                        const stringChar = Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.Just.create)(stringLetter))(stringEscape))("string character");
                        const stringLiteral = (() => {
                            const folder = v1 => {
                                return chars => {
                                    if (v1 instanceof Data_Maybe.Nothing) {
                                        return chars;
                                    }
                                    ;
                                    if (v1 instanceof Data_Maybe.Just) {
                                        return new Data_List_Types.Cons(v1.value0, chars);
                                    }
                                    ;
                                    throw new Error(`Failed pattern match at Text.Parsing.Parser.Token (line 404, column 9 - line 404, column 55): ${[v1.constructor.name, chars.constructor.name]}`);
                                };
                            };
                            const go = Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Text_Parsing_Parser_Combinators.between(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\""))(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(dictMonad)("\""))("end of string"))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(stringChar)))(maybeChars => {
                                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_String_CodeUnits.fromCharArray(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Foldable.foldr(Data_List_Types.foldableList)(folder)(Data_List_Types.Nil.value)(maybeChars))));
                            });
                            return lexeme(Text_Parsing_Parser_Combinators.withErrorMessage(dictMonad)(go)("literal string"));
                        })();
                        const angles = p => {
                            return Text_Parsing_Parser_Combinators.between(dictMonad)(symbol("<"))(symbol(">"))(p);
                        };
                        return {
                            identifier,
                            reserved,
                            operator,
                            reservedOp,
                            charLiteral,
                            stringLiteral,
                            natural,
                            integer,
                            "float": $$float,
                            naturalOrFloat,
                            decimal,
                            hexadecimal,
                            octal,
                            symbol,
                            lexeme,
                            whiteSpace: whiteSpace$prime(dictMonad)(v),
                            parens,
                            braces,
                            angles,
                            brackets,
                            semi,
                            comma,
                            colon,
                            dot,
                            semiSep,
                            semiSep1,
                            commaSep,
                            commaSep1
                        };
                    };
                };
                exports["makeTokenParser"] = makeTokenParser;
                exports["digit"] = digit;
                exports["letter"] = letter;
            })(PS);
            ($PS => {
                $PS["Insect.Parser"] = $PS["Insect.Parser"] || {};
                const exports = $PS["Insect.Parser"];
                const Control_Alt = $PS["Control.Alt"];
                const Control_Applicative = $PS["Control.Applicative"];
                const Control_Apply = $PS["Control.Apply"];
                const Control_Bind = $PS["Control.Bind"];
                const Control_Category = $PS["Control.Category"];
                const Control_Lazy = $PS["Control.Lazy"];
                const Data_Array = $PS["Data.Array"];
                const Data_Boolean = $PS["Data.Boolean"];
                const Data_Decimal = $PS["Data.Decimal"];
                const Data_Either = $PS["Data.Either"];
                const Data_Foldable = $PS["Data.Foldable"];
                const Data_Functor = $PS["Data.Functor"];
                const Data_Identity = $PS["Data.Identity"];
                const Data_List = $PS["Data.List"];
                const Data_List_Types = $PS["Data.List.Types"];
                const Data_Map_Internal = $PS["Data.Map.Internal"];
                const Data_Maybe = $PS["Data.Maybe"];
                const Data_NonEmpty = $PS["Data.NonEmpty"];
                const Data_Ord = $PS["Data.Ord"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Data_String_CodePoints = $PS["Data.String.CodePoints"];
                const Data_Unit = $PS["Data.Unit"];
                const Data_Units = $PS["Data.Units"];
                const Data_Units_Astronomical = $PS["Data.Units.Astronomical"];
                const Data_Units_Bit = $PS["Data.Units.Bit"];
                const Data_Units_CGS = $PS["Data.Units.CGS"];
                const Data_Units_Currency = $PS["Data.Units.Currency"];
                const Data_Units_Imperial = $PS["Data.Units.Imperial"];
                const Data_Units_Misc = $PS["Data.Units.Misc"];
                const Data_Units_Nautical = $PS["Data.Units.Nautical"];
                const Data_Units_PartsPerX = $PS["Data.Units.PartsPerX"];
                const Data_Units_SI = $PS["Data.Units.SI"];
                const Data_Units_SI_Accepted = $PS["Data.Units.SI.Accepted"];
                const Data_Units_SI_Derived = $PS["Data.Units.SI.Derived"];
                const Data_Units_Time = $PS["Data.Units.Time"];
                const Data_Units_USCustomary = $PS["Data.Units.USCustomary"];
                const Insect_Language = $PS["Insect.Language"];
                const Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
                const Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
                const Text_Parsing_Parser_String = $PS["Text.Parsing.Parser.String"];
                const Text_Parsing_Parser_Token = $PS["Text.Parsing.Parser.Token"];
                const DictEntry = (() => {
                    function DictEntry(value0, value1) {
                        this.value0 = value0;
                        this.value1 = value1;
                    }
                    ;
                    DictEntry.create = value0 => {
                        return value1 => {
                            return new DictEntry(value0, value1);
                        };
                    };
                    return DictEntry;
                })();
                const Dictionary = (() => {
                    function Dictionary(value0) {
                        this.value0 = value0;
                    }
                    ;
                    Dictionary.create = value0 => {
                        return new Dictionary(value0);
                    };
                    return Dictionary;
                })();
                const specialCases = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("d"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Units_Time.day)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("t"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Units_SI_Accepted.tonne)));
                const sepBy1 = dictMonad => {
                    return p => {
                        return sep => {
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(a => {
                                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(sep)(p)))(as => {
                                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_NonEmpty.NonEmpty(a, as));
                                });
                            });
                        };
                    };
                };
                const prefixDict = new Dictionary([new DictEntry(Data_Units.kibi, ["kibi", "Ki"]), new DictEntry(Data_Units.mebi, ["mebi", "Mi"]), new DictEntry(Data_Units.gibi, ["gibi", "Gi"]), new DictEntry(Data_Units.tebi, ["tebi", "Ti"]), new DictEntry(Data_Units.pebi, ["pebi", "Pi"]), new DictEntry(Data_Units.exbi, ["exbi", "Ei"]), new DictEntry(Data_Units.zebi, ["zebi", "Zi"]), new DictEntry(Data_Units.yobi, ["yobi", "Yi"]), new DictEntry(Data_Units.atto, ["atto", "a"]), new DictEntry(Data_Units.femto, ["femto", "f"]), new DictEntry(Data_Units.peta, ["peta"]), new DictEntry(Data_Units.mega, ["mega"]), new DictEntry(Data_Units.pico, ["pico", "p"]), new DictEntry(Data_Units.nano, ["nano", "n"]), new DictEntry(Data_Units.micro, ["micro", "u", "\xb5", "\u03bc"]), new DictEntry(Data_Units.milli, ["milli", "m"]), new DictEntry(Data_Units.centi, ["centi", "c"]), new DictEntry(Data_Units.deci, ["deci", "d"]), new DictEntry(Data_Units.hecto, ["hecto", "h"]), new DictEntry(Data_Units.kilo, ["kilo", "k"]), new DictEntry(Data_Units.mega, ["M"]), new DictEntry(Data_Units.giga, ["giga", "G"]), new DictEntry(Data_Units.tera, ["tera", "T"]), new DictEntry(Data_Units.peta, ["P"]), new DictEntry(Data_Units.exa, ["exa", "E"])]);
                const normalUnitDict = new Dictionary([new DictEntry(Data_Units_SI_Derived.radian, ["radians", "radian", "rad"]), new DictEntry(Data_Units_SI_Accepted.degree, ["degrees", "degree", "deg", "\xb0"]), new DictEntry(Data_Units_SI_Derived.hertz, ["hertz", "Hz"]), new DictEntry(Data_Units_Misc.rpm, ["RPM", "rpm"]), new DictEntry(Data_Units_SI_Derived.newton, ["newton", "N"]), new DictEntry(Data_Units_SI_Derived.joule, ["joules", "joule", "J"]), new DictEntry(Data_Units_SI_Derived.pascal, ["pascal", "Pa"]), new DictEntry(Data_Units_SI_Derived.volt, ["volts", "volt", "V"]), new DictEntry(Data_Units_SI_Derived.farad, ["farad", "F"]), new DictEntry(Data_Units_SI_Derived.ohm, ["ohms", "ohm", "\u03a9"]), new DictEntry(Data_Units_SI_Derived.sievert, ["sievert", "Sv"]), new DictEntry(Data_Units_SI_Derived.weber, ["weber", "Wb"]), new DictEntry(Data_Units_SI_Derived.tesla, ["tesla", "T"]), new DictEntry(Data_Units_SI_Derived.henry, ["henrys", "henries", "henry", "H"]), new DictEntry(Data_Units_SI_Derived.coulomb, ["coulomb", "C"]), new DictEntry(Data_Units_SI_Derived.siemens, ["siemens", "S"]), new DictEntry(Data_Units_SI_Derived.lumen, ["lumen", "lm"]), new DictEntry(Data_Units_SI_Derived.lux, ["lux", "lx"]), new DictEntry(Data_Units_SI_Derived.becquerel, ["becquerel", "Bq"]), new DictEntry(Data_Units_SI_Derived.gray, ["gray", "Gy"]), new DictEntry(Data_Units_SI_Derived.katal, ["katal", "kat"]), new DictEntry(Data_Units_SI_Accepted.hectare, ["hectare", "ha"]), new DictEntry(Data_Units_SI_Accepted.tonne, ["tonnes", "tonne", "tons", "ton"]), new DictEntry(Data_Units_SI_Accepted.electronvolt, ["electronvolt", "eV"]), new DictEntry(Data_Units_Misc.calorie, ["calories", "calorie", "cal"]), new DictEntry(Data_Units_SI_Accepted.bel, ["bel"]), new DictEntry(Data_Units_SI_Accepted.astronomicalUnit, ["AU", "au", "astronomicalunits", "astronomicalunit"]), new DictEntry(Data_Units_Astronomical.parsec, ["parsecs", "parsec", "pc"]), new DictEntry(Data_Units_Astronomical.lightyear, ["lightyears", "lightyear", "ly"]), new DictEntry(Data_Units_SI_Accepted.barn, ["barn"]), new DictEntry(Data_Units_SI_Accepted.bar, ["bar"]), new DictEntry(Data_Units_SI_Accepted.angstrom, ["angstrom", "\xc5"]), new DictEntry(Data_Units_CGS.gauss, ["gauss"]), new DictEntry(Data_Units_SI.ampere, ["amperes", "ampere", "amps", "amp", "A"]), new DictEntry(Data_Units_SI.mole, ["mole", "mol"]), new DictEntry(Data_Units_SI.kelvin, ["kelvin", "K"]), new DictEntry(Data_Units_SI.candela, ["candela", "cd"]), new DictEntry(Data_Semigroup.append(Data_Units.semigroupDerivedUnit)(Data_Units_SI_Derived.watt)(Data_Units_Time.hour), ["Wh"]), new DictEntry(Data_Units_SI_Derived.watt, ["watts", "watt", "W"]), new DictEntry(Data_Units_Bit["byte"], ["Bytes", "bytes", "Byte", "byte", "B", "Octets", "octets", "Octet", "octet"]), new DictEntry(Data_Units_Bit.bit, ["bits", "bit"]), new DictEntry(Data_Units.divideUnits(Data_Units_Bit.bit)(Data_Units_SI.second), ["bps"]), new DictEntry(Data_Units_SI.second, ["seconds", "second", "sec", "s"]), new DictEntry(Data_Units_Time.minute, ["minutes", "minute", "min"]), new DictEntry(Data_Units_Time.hour, ["hours", "hour", "h"]), new DictEntry(Data_Units_Time.day, ["days", "day"]), new DictEntry(Data_Units_Time.week, ["weeks", "week"]), new DictEntry(Data_Units_Misc.fortnight, ["fortnights", "fortnight"]), new DictEntry(Data_Units_Time.month, ["months", "month"]), new DictEntry(Data_Units_Time.year, ["years", "year"]), new DictEntry(Data_Units_SI.gram, ["grammes", "gramme", "grams", "gram", "g"]), new DictEntry(Data_Units_SI.meter, ["metres", "metre", "meters", "meter", "m"]), new DictEntry(Data_Units_SI_Accepted.liter, ["liters", "liter", "litres", "litre", "L", "l"]), new DictEntry(Data_Units_Misc.atm, ["atm"]), new DictEntry(Data_Units_Misc.pixel, ["pixels", "pixel", "px"]), new DictEntry(Data_Units_Misc.frame, ["frames", "frame"]), new DictEntry(Data_Units.divideUnits(Data_Units_Misc.frame)(Data_Units_SI.second), ["fps"]), new DictEntry(Data_Units_Misc.dot, ["dots", "dot"])]);
                const imperialUnitDict = new Dictionary([new DictEntry(Data_Units_PartsPerX.percent, ["pct", "percent"]), new DictEntry(Data_Units_PartsPerX.partsPerMillion, ["ppm"]), new DictEntry(Data_Units_PartsPerX.partsPerBillion, ["ppb"]), new DictEntry(Data_Units_PartsPerX.partsPerTrillion, ["ppt"]), new DictEntry(Data_Units_PartsPerX.partsPerQuadrillion, ["ppq"]), new DictEntry(Data_Units_Imperial.mile, ["miles", "mile"]), new DictEntry(Data_Units.divideUnits(Data_Units_Imperial.mile)(Data_Units_Time.hour), ["mph"]), new DictEntry(Data_Units_Imperial.inch, ["inches", "inch", "in"]), new DictEntry(Data_Units_Imperial.yard, ["yards", "yard", "yd"]), new DictEntry(Data_Units_Imperial.foot, ["feet", "foot", "ft"]), new DictEntry(Data_Units_Imperial.thou, ["thou"]), new DictEntry(Data_Units_Imperial.ounce, ["ounces", "ounce", "oz"]), new DictEntry(Data_Units_Misc.lbf, ["pound_force", "lbf"]), new DictEntry(Data_Units_Imperial.pound, ["pounds", "pound", "lb"]), new DictEntry(Data_Units_USCustomary.gallon, ["gallons", "gallon", "gal"]), new DictEntry(Data_Units_USCustomary.pint, ["pints", "pint"]), new DictEntry(Data_Units_USCustomary.cup, ["cups", "cup"]), new DictEntry(Data_Units_USCustomary.tablespoon, ["tablespoons", "tablespoon", "tbsp"]), new DictEntry(Data_Units_USCustomary.teaspoon, ["teaspoons", "teaspoon", "tsp"]), new DictEntry(Data_Units_USCustomary.fluidounce, ["fluidounces", "fluidounce", "floz"]), new DictEntry(Data_Units_Imperial.furlong, ["furlong"]), new DictEntry(Data_Units_Misc.btu, ["BTU"]), new DictEntry(Data_Units_Misc.psi, ["psi"]), new DictEntry(Data_Units_Misc.mmHg, ["mmHg"]), new DictEntry(Data_Units_USCustomary.hogshead, ["hogsheads", "hogshead"]), new DictEntry(Data_Units_USCustomary.rod, ["rods", "rod"]), new DictEntry(Data_Units.divideUnits(Data_Units_Misc.pixel)(Data_Units_Imperial.inch), ["ppi"]), new DictEntry(Data_Units.divideUnits(Data_Units_Misc.dot)(Data_Units_Imperial.inch), ["dpi"]), new DictEntry(Data_Units_Misc.piece, ["pieces", "piece"]), new DictEntry(Data_Units_Misc.person, ["persons", "person", "people"]), new DictEntry(Data_Units_Currency.dollar, ["dollars", "dollar", "USD", "$"]), new DictEntry(Data_Units_Currency.euro, ["euros", "euro", "EUR", "\u20ac"]), new DictEntry(Data_Units_Nautical.knot, ["knots", "knot", "kn", "kt"]), new DictEntry(Data_Units_Nautical.nauticalMile, ["M", "NM", "nmi"])]);
                const identStart = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.letter(Data_Identity.monadIdentity))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("_"));
                const identLetter = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.letter(Data_Identity.monadIdentity))(Text_Parsing_Parser_Token.digit(Data_Identity.monadIdentity)))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("_")))(Text_Parsing_Parser_String["char"](Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("'"));
                const foldr1 = f => {
                    return ({ value1, value0 }) => {
                        const v1 = Data_List.last(value1);
                        const v2 = Data_List.init(value1);
                        if (v2 instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                            return f(value0)(Data_Foldable.foldr(Data_List_Types.foldableList)(f)(v1.value0)(v2.value0));
                        }
                        ;
                        return value0;
                    };
                };
                const commands = ["help", "?", "list", "ls", "ll", "reset", "clear", "cls", "quit", "exit"];
                const insectLanguage = {
                    commentStart: "",
                    commentEnd: "",
                    commentLine: "#",
                    nestedComments: false,
                    identStart,
                    identLetter,
                    opStart: Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(["+", "-", "*", "\xb7", "\u22c5", "\xd7", "/", "\xf7", "%", "^", "!", "\u2192", "\u279e", "="]),
                    opLetter: Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)([]),
                    reservedNames: Data_Semigroup.append(Data_Semigroup.semigroupArray)(commands)(["\xb9", "\xb2", "\xb3", "\u2074", "\u2075", "\u207b\xb9", "\u207b\xb2", "\u207b\xb3", "\u207b\u2074", "\u207b\u2075", "to", "per"]),
                    reservedOpNames: ["->", "+", "-", "*", "\xb7", "\u22c5", "\xd7", "/", "\xf7", "%", "^", "!", "**", "=", ","],
                    caseSensitive: true
                };
                const token = Text_Parsing_Parser_Token.makeTokenParser(Data_Identity.monadIdentity)(insectLanguage);
                const $$function = ({ functions }) => {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(token.identifier)(name => {
                        const $17 = name === "sum" || name === "product";
                        if ($17) {
                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(name);
                        }
                        ;
                        const v = Data_Map_Internal.lookup(Data_Ord.ordString)(name)(functions);
                        if (v instanceof Data_Maybe.Just) {
                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(name);
                        }
                        ;
                        if (v instanceof Data_Maybe.Nothing) {
                            return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)(`Unknown function '${name}'`);
                        }
                        ;
                        throw new Error(`Failed pattern match at Insect.Parser (line 353, column 7 - line 355, column 61): ${[v.constructor.name]}`);
                    });
                };
                const parens = token.parens;
                const reserved = token.reserved;
                const reservedOp = token.reservedOp;
                const variable = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Insect_Language.Variable.create)(token.identifier);
                const whiteSpace = token.whiteSpace;
                const number = (() => {
                    const fromCharArray = (() => {
                        const $42 = Data_Functor.map(Data_Functor.functorArray)(Data_String_CodePoints.codePointFromChar);
                        return $43 => {
                            return Data_String_CodePoints.fromCodePointArray($42($43));
                        };
                    })();
                    const digits = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Array.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]))("a digit")))(ds => {
                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(fromCharArray(Data_Array.fromFoldable(Data_Foldable.foldableArray)(ds)));
                    });
                    const signAndDigits = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)("+")(Text_Parsing_Parser_String.oneOf(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(["+", "-"])))(sign => {
                        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(digits)(intPart => {
                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_String_CodePoints.singleton(Data_String_CodePoints.codePointFromChar(sign)) + intPart);
                        });
                    });
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(digits)(intPart => {
                        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_Semigroup.append(Data_Semigroup.semigroupString))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(".")))(digits)))(mFracPart => {
                            const fracPart = Data_Maybe.fromMaybe("")(mFracPart);
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)("e"))(() => {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.notFollowedBy(Data_Identity.monadIdentity)(identStart))(() => {
                                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(signAndDigits)(sad => {
                                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(`e${sad}`);
                                    });
                                });
                            }))))(mExpPart => {
                                const expPart = Data_Maybe.fromMaybe("")(mExpPart);
                                return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(whiteSpace)(() => {
                                    const floatStr = intPart + (fracPart + expPart);
                                    const v = Data_Decimal.fromString(floatStr);
                                    if (v instanceof Data_Maybe.Just) {
                                        const $23 = Data_Decimal["isFinite"](v.value0);
                                        if ($23) {
                                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v.value0);
                                        }
                                        ;
                                        return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("This number is too large");
                                    }
                                    ;
                                    if (v instanceof Data_Maybe.Nothing) {
                                        return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)(`Parsing of number failed for input '${floatStr}'`);
                                    }
                                    ;
                                    throw new Error(`Failed pattern match at Insect.Parser (line 114, column 3 - line 119, column 79): ${[v.constructor.name]}`);
                                });
                            });
                        });
                    });
                })();
                const command = Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(reserved("help"))(reserved("?")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Insect_Language.Help.value)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(reserved("list"))(reserved("ls")))(reserved("ll")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Insect_Language.List.value))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(reserved("reset"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Insect_Language.Reset.value))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(reserved("clear"))(reserved("cls")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Insect_Language.Clear.value))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(reserved("quit"))(reserved("exit")))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Insect_Language.Quit.value))))(Text_Parsing_Parser_String.eof(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity));
                const buildDictParser = ({ value0 }) => {
                    const abbrevParser = x => {
                        return abbrev => {
                            return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.string(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)(abbrev))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(x));
                        };
                    };
                    const entryParser = ({ value0, value1 }) => {
                        return Data_Foldable.oneOf(Data_Foldable.foldableArray)(Text_Parsing_Parser.plusParserT(Data_Identity.monadIdentity))(Data_Functor.map(Data_Functor.functorArray)(abbrevParser(value0))(value1));
                    };
                    return Data_Foldable.oneOf(Data_Foldable.foldableArray)(Text_Parsing_Parser.plusParserT(Data_Identity.monadIdentity))(Data_Functor.map(Data_Functor.functorArray)(entryParser)(value0));
                };
                const imperialUnit = Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(buildDictParser(imperialUnitDict))("imperial unit");
                const normalUnit = Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(buildDictParser(normalUnitDict))("normal unit");
                const prefix = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(buildDictParser(prefixDict))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Control_Category.identity(Control_Category.categoryFn)));
                const unitWithSIPrefix = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(prefix)(p => {
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(normalUnit)(u => {
                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(p(u));
                    });
                });
                const derivedUnit = (() => {
                    const augment = p => {
                        return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(p)(Text_Parsing_Parser_Combinators.notFollowedBy(Data_Identity.monadIdentity)(identLetter));
                    };
                    return Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(augment(unitWithSIPrefix)))(augment(imperialUnit)))(augment(normalUnit)))(augment(specialCases)))(whiteSpace);
                })();
                const expression = env => {
                    const subOp = reservedOp("-");
                    const powPos = s => {
                        return q => {
                            if (s === 1.0) {
                                return q;
                            }
                            ;
                            if (Data_Boolean.otherwise) {
                                return new Insect_Language.BinOp(Insect_Language.Pow.value, q, Insect_Language.Scalar.create(Data_Decimal.fromNumber(s)));
                            }
                            ;
                            throw new Error(`Failed pattern match at Insect.Parser (line 460, column 5 - line 461, column 65): ${[s.constructor.name, q.constructor.name]}`);
                        };
                    };
                    const powOp = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(reservedOp("^"))(reservedOp("**"));
                    const powNeg = s => {
                        return q => {
                            return new Insect_Language.BinOp(Insect_Language.Pow.value, q, Insect_Language.Negate.create(Insect_Language.Scalar.create(Data_Decimal.fromNumber(s))));
                        };
                    };
                    const perOp = reserved("per");
                    const mulOp = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(reservedOp("*"))(reservedOp("\xb7")))(reservedOp("\u22c5")))(reservedOp("\xd7"));
                    const modOp = reservedOp("%");
                    const facOp = reservedOp("!");
                    const divOp = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(reservedOp("/"))(reservedOp("\xf7"));
                    const commaOp = reservedOp(",");
                    const arrOp = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(reservedOp("->"))(reservedOp("\u2192")))(reservedOp("\u279e")))(reserved("to"));
                    const addOp = reservedOp("+");
                    return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(p => {
                        const atomic = Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(whiteSpace)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(parens(p))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Insect_Language.Scalar.create)(number)))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Insect_Language.Unit.create)(derivedUnit))))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Control_Apply.apply(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Insect_Language.Apply.create)($$function(env)))(parens(sepBy1(Data_Identity.monadIdentity)(p)(commaOp))))))(variable));
                        const suffixFac = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(atomic)(a => {
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(facOp)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Insect_Language.Factorial.create))))(mf => {
                                if (mf instanceof Data_Maybe.Just) {
                                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(mf.value0(a));
                                }
                                ;
                                if (mf instanceof Data_Maybe.Nothing) {
                                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(a);
                                }
                                ;
                                throw new Error(`Failed pattern match at Insect.Parser (line 375, column 9 - line 377, column 27): ${[mf.constructor.name]}`);
                            });
                        });
                        const suffixPow = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(suffixFac)(x => {
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(reservedOp("\xb9"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(powPos(1.0))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(reservedOp("\xb2"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(powPos(2.0)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(reservedOp("\xb3"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(powPos(3.0)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(reservedOp("\u2074"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(powPos(4.0)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(reservedOp("\u2075"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(powPos(5.0)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(reservedOp("\u207b\xb9"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(powNeg(1.0)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(reservedOp("\u207b\xb2"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(powNeg(2.0)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(reservedOp("\u207b\xb3"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(powNeg(3.0)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(reservedOp("\u207b\u2074"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(powNeg(4.0)))))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(reservedOp("\u207b\u2075"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(powNeg(5.0))))))(mFn => {
                                if (mFn instanceof Data_Maybe.Just) {
                                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(mFn.value0(x));
                                }
                                ;
                                if (mFn instanceof Data_Maybe.Nothing) {
                                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(x);
                                }
                                ;
                                throw new Error(`Failed pattern match at Insect.Parser (line 393, column 9 - line 395, column 27): ${[mFn.constructor.name]}`);
                            });
                        });
                        const sepByPow = (() => {
                            const list = e => {
                                return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(suffixPow)(a => {
                                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_List.many(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(powOp)(() => {
                                        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(subOp)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Insect_Language.Negate.create)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(addOp)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Control_Category.identity(Control_Category.categoryFn)))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Control_Category.identity(Control_Category.categoryFn))))(func => {
                                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(e)(expr => {
                                                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(func(expr));
                                            });
                                        });
                                    })))(as => {
                                        return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Data_NonEmpty.NonEmpty(a, as));
                                    });
                                });
                            };
                            return Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(e => {
                                return Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(foldr1(Insect_Language.BinOp.create(Insect_Language.Pow.value)))(list(e));
                            });
                        })();
                        const sepByMulImplicit = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_NonEmpty.foldl1(Data_List_Types.foldableList)(Insect_Language.BinOp.create(Insect_Language.Mul.value)))(sepBy1(Data_Identity.monadIdentity)(sepByPow)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Unit.unit)));
                        const prefixed = Control_Lazy.fix(Text_Parsing_Parser.lazyParserT)(e => {
                            return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(subOp)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Insect_Language.Negate.create)(e)))(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(addOp)(e)))(sepByMulImplicit);
                        });
                        const sepByMod = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_NonEmpty.foldl1(Data_List_Types.foldableList)(Insect_Language.BinOp.create(Insect_Language.Mod.value)))(sepBy1(Data_Identity.monadIdentity)(prefixed)(modOp));
                        const sepByPer = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_NonEmpty.foldl1(Data_List_Types.foldableList)(Insect_Language.BinOp.create(Insect_Language.Div.value)))(sepBy1(Data_Identity.monadIdentity)(sepByMod)(perOp));
                        const sepByDiv = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_NonEmpty.foldl1(Data_List_Types.foldableList)(Insect_Language.BinOp.create(Insect_Language.Div.value)))(sepBy1(Data_Identity.monadIdentity)(sepByPer)(divOp));
                        const sepByMul = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_NonEmpty.foldl1(Data_List_Types.foldableList)(Insect_Language.BinOp.create(Insect_Language.Mul.value)))(sepBy1(Data_Identity.monadIdentity)(sepByDiv)(mulOp));
                        const sepBySub = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_NonEmpty.foldl1(Data_List_Types.foldableList)(Insect_Language.BinOp.create(Insect_Language.Sub.value)))(sepBy1(Data_Identity.monadIdentity)(sepByMul)(subOp));
                        const sepByAdd = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_NonEmpty.foldl1(Data_List_Types.foldableList)(Insect_Language.BinOp.create(Insect_Language.Add.value)))(sepBy1(Data_Identity.monadIdentity)(sepBySub)(addOp));
                        const sepByConv = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Data_NonEmpty.foldl1(Data_List_Types.foldableList)(Insect_Language.BinOp.create(Insect_Language.ConvertTo.value)))(sepBy1(Data_Identity.monadIdentity)(sepByAdd)(arrOp));
                        return sepByConv;
                    });
                };
                const fullExpression = env => {
                    return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(whiteSpace)(() => {
                        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expression(env))(expr => {
                            return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.withErrorMessage(Data_Identity.monadIdentity)(Text_Parsing_Parser_String.eof(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))("end of input"))(() => {
                                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(expr);
                            });
                        });
                    });
                };
                const assignment = env => {
                    const failIfUnit = n => {
                        return Control_Applicative.when(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_Either.isRight(Text_Parsing_Parser.runParser(n)(Control_Apply.applyFirst(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(derivedUnit)(Text_Parsing_Parser_String.eof(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity)))))(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)(`'${n}' is reserved for a physical unit`));
                    };
                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators["try"](Data_Identity.monadIdentity)(Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(whiteSpace)(() => {
                        return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(token.identifier)(name => {
                            return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.optionMaybe(Data_Identity.monadIdentity)(parens(sepBy1(Data_Identity.monadIdentity)(token.identifier)(reservedOp(",")))))(args => {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(reservedOp("="))(() => {
                                    return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(expression(env))(expr => {
                                        return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_String.eof(Text_Parsing_Parser_String.stringLikeString)(Data_Identity.monadIdentity))(() => {
                                            return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))({
                                                name,
                                                args,
                                                expr
                                            });
                                        });
                                    });
                                });
                            });
                        });
                    })))(({ name, args, expr }) => {
                        return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(failIfUnit(name))(() => {
                            if (args instanceof Data_Maybe.Nothing) {
                                return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Insect_Language.VariableAssignment(name, expr));
                            }
                            ;
                            if (args instanceof Data_Maybe.Just) {
                                return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Foldable.traverse_(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_NonEmpty.foldableNonEmpty(Data_List_Types.foldableList))(failIfUnit)(args.value0))(() => {
                                    return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Insect_Language.FunctionAssignment(name, args.value0, expr));
                                });
                            }
                            ;
                            throw new Error(`Failed pattern match at Insect.Parser (line 501, column 3 - line 505, column 45): ${[args.constructor.name]}`);
                        });
                    });
                };
                const statement = env => {
                    return Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Insect_Language.Command.create)(command))(assignment(env)))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(Insect_Language.Expression.create)(fullExpression(env)));
                };
                const parseInsect = env => {
                    return inp => {
                        return Text_Parsing_Parser.runParser(inp)(statement(env));
                    };
                };
                exports["commands"] = commands;
                exports["normalUnitDict"] = normalUnitDict;
                exports["imperialUnitDict"] = imperialUnitDict;
                exports["parseInsect"] = parseInsect;
            })(PS);
            ($PS => {
                $PS["Insect"] = $PS["Insect"] || {};
                const exports = $PS["Insect"];
                const Control_Bind = $PS["Control.Bind"];
                const Data_Array = $PS["Data.Array"];
                const Data_Either = $PS["Data.Either"];
                const Data_Map = $PS["Data.Map"];
                const Data_Ord = $PS["Data.Ord"];
                const Data_Semigroup = $PS["Data.Semigroup"];
                const Data_Set = $PS["Data.Set"];
                const Data_Show = $PS["Data.Show"];
                const Data_Unfoldable = $PS["Data.Unfoldable"];
                const Insect_Environment = $PS["Insect.Environment"];
                const Insect_Format = $PS["Insect.Format"];
                const Insect_Interpreter = $PS["Insect.Interpreter"];
                const Insect_Parser = $PS["Insect.Parser"];
                const Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
                const supportedUnits = (() => {
                    const toStrs = ({ value1 }) => {
                        return value1;
                    };
                    const toArray = ({ value0 }) => {
                        return Control_Bind.bind(Control_Bind.bindArray)(value0)(toStrs);
                    };
                    return Data_Array.sort(Data_Ord.ordString)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(toArray(Insect_Parser.normalUnitDict))(Data_Semigroup.append(Data_Semigroup.semigroupArray)(toArray(Insect_Parser.imperialUnitDict))(["d", "t"])));
                })();
                const msgTypeToString = v => {
                    if (v instanceof Insect_Interpreter.Info) {
                        return "info";
                    }
                    ;
                    if (v instanceof Insect_Interpreter["Error"]) {
                        return "error";
                    }
                    ;
                    if (v instanceof Insect_Interpreter.Value) {
                        return "value";
                    }
                    ;
                    if (v instanceof Insect_Interpreter.ValueSet) {
                        return "value-set";
                    }
                    ;
                    throw new Error(`Failed pattern match at Insect (line 42, column 1 - line 42, column 39): ${[v.constructor.name]}`);
                };
                const repl = fmt => {
                    return env => {
                        return userInput => {
                            const v = Insect_Parser.parseInsect(env)(userInput);
                            if (v instanceof Data_Either.Left) {
                                const pos = Text_Parsing_Parser.parseErrorPosition(v.value0);
                                return {
                                    msg: Insect_Format.format(fmt)([Insect_Format.optional(Insect_Format.text("  ")), Insect_Format.error(`Parse error at position ${Data_Show.show(Data_Show.showInt)(pos.column)}: `), Insect_Format.text(Text_Parsing_Parser.parseErrorMessage(v.value0))]),
                                    msgType: "error",
                                    newEnv: env
                                };
                            }
                            ;
                            if (v instanceof Data_Either.Right) {
                                const ans = Insect_Interpreter.runInsect(env)(v.value0);
                                if (ans.msg instanceof Insect_Interpreter.Message) {
                                    return {
                                        msgType: msgTypeToString(ans.msg.value0),
                                        msg: Insect_Format.format(fmt)(ans.msg.value1),
                                        newEnv: ans.newEnv
                                    };
                                }
                                ;
                                if (ans.msg instanceof Insect_Interpreter.MQuit) {
                                    return {
                                        msgType: "quit",
                                        msg: "",
                                        newEnv: ans.newEnv
                                    };
                                }
                                ;
                                if (ans.msg instanceof Insect_Interpreter.MClear) {
                                    return {
                                        msgType: "clear",
                                        msg: "",
                                        newEnv: ans.newEnv
                                    };
                                }
                                ;
                                throw new Error(`Failed pattern match at Insect (line 68, column 10 - line 80, column 36): ${[ans.msg.constructor.name]}`);
                            }
                            ;
                            throw new Error(`Failed pattern match at Insect (line 53, column 3 - line 80, column 36): ${[v.constructor.name]}`);
                        };
                    };
                };
                const initialEnvironment = Insect_Environment.initialEnvironment;
                const identifiers = ({ values }) => {
                    return Data_Set.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Map.keys(values));
                };
                const functions = env => {
                    return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Set.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Map.keys(env.functions)))(["sum", "product"]);
                };
                const fmtPlain = Insect_Format.fmtPlain;
                const fmtJqueryTerminal = Insect_Format.fmtJqueryTerminal;
                const fmtConsole = Insect_Format.fmtConsole;
                const commands = Insect_Parser.commands;
                exports["repl"] = repl;
                exports["initialEnvironment"] = initialEnvironment;
                exports["supportedUnits"] = supportedUnits;
                exports["fmtPlain"] = fmtPlain;
                exports["fmtJqueryTerminal"] = fmtJqueryTerminal;
                exports["fmtConsole"] = fmtConsole;
                exports["commands"] = commands;
                exports["functions"] = functions;
                exports["identifiers"] = identifiers;
            })(PS);
            module.exports = PS["Insect"];
        }, { "decimal.js": 1 }]
    }, {}, [2])(2);
});
